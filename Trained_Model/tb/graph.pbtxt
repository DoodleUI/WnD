node {
  name: "global_step/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "global_step"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global_step/Assign"
  op: "Assign"
  input: "global_step"
  input: "global_step/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global_step/read"
  op: "Identity"
  input: "global_step"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "global_step/cond/Switch"
  op: "Switch"
  input: "global_step/IsVariableInitialized"
  input: "global_step/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/switch_t"
  op: "Identity"
  input: "global_step/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/switch_f"
  op: "Identity"
  input: "global_step/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/pred_id"
  op: "Identity"
  input: "global_step/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/read"
  op: "Identity"
  input: "global_step/cond/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/read/Switch"
  op: "RefSwitch"
  input: "global_step"
  input: "global_step/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/Switch_1"
  op: "Switch"
  input: "global_step/Initializer/zeros"
  input: "global_step/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/Merge"
  op: "Merge"
  input: "global_step/cond/Switch_1"
  input: "global_step/cond/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/add/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "global_step/add"
  op: "Add"
  input: "global_step/cond/Merge"
  input: "global_step/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "list_files/file_pattern"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "D:\\Soumik\\SketchRnn\\D2AQD23\\RevisedStrokeNew\\train-00000-of-00001"
      }
    }
  }
}
node {
  name: "list_files/MatchingFiles"
  op: "MatchingFiles"
  input: "list_files/file_pattern"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "list_files/Shape"
  op: "Shape"
  input: "list_files/MatchingFiles"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "list_files/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "list_files/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "list_files/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "list_files/strided_slice"
  op: "StridedSlice"
  input: "list_files/Shape"
  input: "list_files/strided_slice/stack"
  input: "list_files/strided_slice/stack_1"
  input: "list_files/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "list_files/match_not_empty/y"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "list_files/match_not_empty"
  op: "Greater"
  input: "list_files/strided_slice"
  input: "list_files/match_not_empty/y"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "list_files/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "list_files/ReduceJoin"
  op: "ReduceJoin"
  input: "list_files/file_pattern"
  input: "list_files/Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
  attr {
    key: "separator"
    value {
      s: ", "
    }
  }
}
node {
  name: "list_files/message/x"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "No files matched pattern: "
      }
    }
  }
}
node {
  name: "list_files/message"
  op: "Add"
  input: "list_files/message/x"
  input: "list_files/ReduceJoin"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "list_files/assert_not_empty/Assert"
  op: "Assert"
  input: "list_files/match_not_empty"
  input: "list_files/message"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 1
    }
  }
}
node {
  name: "list_files/Identity"
  op: "Identity"
  input: "list_files/MatchingFiles"
  input: "^list_files/assert_not_empty/Assert"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "list_files/TensorSliceDataset"
  op: "TensorSliceDataset"
  input: "list_files/Identity"
  device: "/device:CPU:0"
  attr {
    key: "Toutput_types"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "list_files/Shape_1"
  op: "Shape"
  input: "list_files/Identity"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "list_files/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "list_files/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "list_files/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "list_files/strided_slice_1"
  op: "StridedSlice"
  input: "list_files/Shape_1"
  input: "list_files/strided_slice_1/stack"
  input: "list_files/strided_slice_1/stack_1"
  input: "list_files/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "list_files/Maximum/y"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "list_files/Maximum"
  op: "Maximum"
  input: "list_files/strided_slice_1"
  input: "list_files/Maximum/y"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "list_files/seed"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "list_files/seed2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "list_files/ShuffleDataset"
  op: "ShuffleDataset"
  input: "list_files/TensorSliceDataset"
  input: "list_files/Maximum"
  input: "list_files/seed"
  input: "list_files/seed2"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "reshuffle_each_iteration"
    value {
      b: true
    }
  }
}
node {
  name: "cycle_length"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 10
      }
    }
  }
}
node {
  name: "block_length"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "InterleaveDataset"
  op: "InterleaveDataset"
  input: "list_files/ShuffleDataset"
  input: "cycle_length"
  input: "block_length"
  device: "/device:CPU:0"
  attr {
    key: "Targuments"
    value {
      list {
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "f"
    value {
      func {
        name: "__inference_Dataset_interleave_<class \'abc.ABCMeta\'>_59"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_STRING
      }
    }
  }
}
node {
  name: "num_parallel_calls"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 10
      }
    }
  }
}
node {
  name: "ParallelMapDataset"
  op: "ParallelMapDataset"
  input: "InterleaveDataset"
  input: "num_parallel_calls"
  device: "/device:CPU:0"
  attr {
    key: "Targuments"
    value {
      list {
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "f"
    value {
      func {
        name: "__inference_Dataset_map_<class \'functools.partial\'>_78"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_INT64
        type: DT_FLOAT
        type: DT_INT64
        type: DT_INT64
      }
    }
  }
  attr {
    key: "preserve_cardinality"
    value {
      b: false
    }
  }
  attr {
    key: "sloppy"
    value {
      b: false
    }
  }
  attr {
    key: "use_inter_op_parallelism"
    value {
      b: true
    }
  }
}
node {
  name: "buffer_size"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 10000
      }
    }
  }
}
node {
  name: "PrefetchDataset"
  op: "PrefetchDataset"
  input: "ParallelMapDataset"
  input: "buffer_size"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_INT64
        type: DT_FLOAT
        type: DT_INT64
        type: DT_INT64
      }
    }
  }
  attr {
    key: "slack_period"
    value {
      i: 0
    }
  }
}
node {
  name: "batch_size"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 8
      }
    }
  }
}
node {
  name: "Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
            size: 1
          }
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "Const_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
            size: 1
          }
        }
        int64_val: -1
      }
    }
  }
}
node {
  name: "Const_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
            size: 1
          }
        }
        int64_val: 2
      }
    }
  }
}
node {
  name: "Const_3"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
            size: 1
          }
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "padding_value"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "padding_value_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "padding_value_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "padding_value_3"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "drop_remainder"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: true
      }
    }
  }
}
node {
  name: "PaddedBatchDatasetV2"
  op: "PaddedBatchDatasetV2"
  input: "PrefetchDataset"
  input: "batch_size"
  input: "Const"
  input: "Const_1"
  input: "Const_2"
  input: "Const_3"
  input: "padding_value"
  input: "padding_value_1"
  input: "padding_value_2"
  input: "padding_value_3"
  input: "drop_remainder"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "Toutput_types"
    value {
      list {
        type: DT_INT64
        type: DT_FLOAT
        type: DT_INT64
        type: DT_INT64
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: 8
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: 8
          }
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 8
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "parallel_copy"
    value {
      b: false
    }
  }
}
node {
  name: "OneShotIterator"
  op: "OneShotIterator"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dataset_factory"
    value {
      func {
        name: "_make_dataset_pda7gjKIBUs"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: 8
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: 8
          }
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 8
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_INT64
        type: DT_FLOAT
        type: DT_INT64
        type: DT_INT64
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "IteratorToStringHandle"
  op: "IteratorToStringHandle"
  input: "OneShotIterator"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "IteratorGetNext"
  op: "IteratorGetNext"
  input: "OneShotIterator"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: 8
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: 8
          }
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 8
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: 8
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: 8
          }
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 8
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_INT64
        type: DT_FLOAT
        type: DT_INT64
        type: DT_INT64
      }
    }
  }
}
node {
  name: "Slice/begin"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "Slice/size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Slice"
  op: "Slice"
  input: "IteratorGetNext:2"
  input: "Slice/begin"
  input: "Slice/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Squeeze"
  op: "Squeeze"
  input: "Slice"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
      }
    }
  }
}
node {
  name: "Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\010\000\000\000\377\377\377\377\005\000\000\000"
      }
    }
  }
}
node {
  name: "Reshape"
  op: "Reshape"
  input: "IteratorGetNext:1"
  input: "Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: -1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "Squeeze_1"
  op: "Squeeze"
  input: "IteratorGetNext:3"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
      }
    }
  }
}
node {
  name: "conv1d_1/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\005\000\000\000\005\000\000\0000\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_1/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.15047095715999603
      }
    }
  }
}
node {
  name: "conv1d_1/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.15047095715999603
      }
    }
  }
}
node {
  name: "conv1d_1/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv1d_1/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "conv1d_1/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "conv1d_1/kernel/Initializer/random_uniform/max"
  input: "conv1d_1/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "conv1d_1/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "conv1d_1/kernel/Initializer/random_uniform/RandomUniform"
  input: "conv1d_1/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "conv1d_1/kernel/Initializer/random_uniform"
  op: "Add"
  input: "conv1d_1/kernel/Initializer/random_uniform/mul"
  input: "conv1d_1/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "conv1d_1/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 5
        }
        dim {
          size: 48
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv1d_1/kernel/Assign"
  op: "Assign"
  input: "conv1d_1/kernel"
  input: "conv1d_1/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_1/kernel/read"
  op: "Identity"
  input: "conv1d_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "conv1d_1/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 48
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv1d_1/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 48
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv1d_1/bias/Assign"
  op: "Assign"
  input: "conv1d_1/bias"
  input: "conv1d_1/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_1/bias/read"
  op: "Identity"
  input: "conv1d_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "conv1d_1_doodle/conv1d_1/dilation_rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv1d_1_doodle/conv1d_1/conv1d/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv1d_1_doodle/conv1d_1/conv1d/ExpandDims"
  op: "ExpandDims"
  input: "Reshape"
  input: "conv1d_1_doodle/conv1d_1/conv1d/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 1
          }
          dim {
            size: -1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "conv1d_1_doodle/conv1d_1/conv1d/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "conv1d_1_doodle/conv1d_1/conv1d/ExpandDims_1"
  op: "ExpandDims"
  input: "conv1d_1/kernel/read"
  input: "conv1d_1_doodle/conv1d_1/conv1d/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "conv1d_1_doodle/conv1d_1/conv1d"
  op: "Conv2D"
  input: "conv1d_1_doodle/conv1d_1/conv1d/ExpandDims"
  input: "conv1d_1_doodle/conv1d_1/conv1d/ExpandDims_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 1
          }
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_1_doodle/conv1d_1/conv1d/Squeeze"
  op: "Squeeze"
  input: "conv1d_1_doodle/conv1d_1/conv1d"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "conv1d_1_doodle/conv1d_1/BiasAdd"
  op: "BiasAdd"
  input: "conv1d_1_doodle/conv1d_1/conv1d/Squeeze"
  input: "conv1d_1/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "conv1d_2/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\005\000\000\0000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_2/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.10350983589887619
      }
    }
  }
}
node {
  name: "conv1d_2/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10350983589887619
      }
    }
  }
}
node {
  name: "conv1d_2/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv1d_2/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 48
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "conv1d_2/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "conv1d_2/kernel/Initializer/random_uniform/max"
  input: "conv1d_2/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "conv1d_2/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "conv1d_2/kernel/Initializer/random_uniform/RandomUniform"
  input: "conv1d_2/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 48
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "conv1d_2/kernel/Initializer/random_uniform"
  op: "Add"
  input: "conv1d_2/kernel/Initializer/random_uniform/mul"
  input: "conv1d_2/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 48
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "conv1d_2/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 48
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 48
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv1d_2/kernel/Assign"
  op: "Assign"
  input: "conv1d_2/kernel"
  input: "conv1d_2/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 48
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_2/kernel/read"
  op: "Identity"
  input: "conv1d_2/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 48
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "conv1d_2/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv1d_2/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv1d_2/bias/Assign"
  op: "Assign"
  input: "conv1d_2/bias"
  input: "conv1d_2/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_2/bias/read"
  op: "Identity"
  input: "conv1d_2/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "conv1d_2_doodle/conv1d_2/dilation_rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv1d_2_doodle/conv1d_2/conv1d/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv1d_2_doodle/conv1d_2/conv1d/ExpandDims"
  op: "ExpandDims"
  input: "conv1d_1_doodle/conv1d_1/BiasAdd"
  input: "conv1d_2_doodle/conv1d_2/conv1d/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 1
          }
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "conv1d_2_doodle/conv1d_2/conv1d/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "conv1d_2_doodle/conv1d_2/conv1d/ExpandDims_1"
  op: "ExpandDims"
  input: "conv1d_2/kernel/read"
  input: "conv1d_2_doodle/conv1d_2/conv1d/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 5
          }
          dim {
            size: 48
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "conv1d_2_doodle/conv1d_2/conv1d"
  op: "Conv2D"
  input: "conv1d_2_doodle/conv1d_2/conv1d/ExpandDims"
  input: "conv1d_2_doodle/conv1d_2/conv1d/ExpandDims_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 1
          }
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_2_doodle/conv1d_2/conv1d/Squeeze"
  op: "Squeeze"
  input: "conv1d_2_doodle/conv1d_2/conv1d"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "conv1d_2_doodle/conv1d_2/BiasAdd"
  op: "BiasAdd"
  input: "conv1d_2_doodle/conv1d_2/conv1d/Squeeze"
  input: "conv1d_2/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "conv1d_3/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\003\000\000\000@\000\000\000`\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_3/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.11180339753627777
      }
    }
  }
}
node {
  name: "conv1d_3/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.11180339753627777
      }
    }
  }
}
node {
  name: "conv1d_3/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv1d_3/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 96
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "conv1d_3/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "conv1d_3/kernel/Initializer/random_uniform/max"
  input: "conv1d_3/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "conv1d_3/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "conv1d_3/kernel/Initializer/random_uniform/RandomUniform"
  input: "conv1d_3/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 96
          }
        }
      }
    }
  }
}
node {
  name: "conv1d_3/kernel/Initializer/random_uniform"
  op: "Add"
  input: "conv1d_3/kernel/Initializer/random_uniform/mul"
  input: "conv1d_3/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 96
          }
        }
      }
    }
  }
}
node {
  name: "conv1d_3/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 96
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 96
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv1d_3/kernel/Assign"
  op: "Assign"
  input: "conv1d_3/kernel"
  input: "conv1d_3/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 96
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_3/kernel/read"
  op: "Identity"
  input: "conv1d_3/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 96
          }
        }
      }
    }
  }
}
node {
  name: "conv1d_3/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 96
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 96
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv1d_3/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 96
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 96
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv1d_3/bias/Assign"
  op: "Assign"
  input: "conv1d_3/bias"
  input: "conv1d_3/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 96
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_3/bias/read"
  op: "Identity"
  input: "conv1d_3/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 96
          }
        }
      }
    }
  }
}
node {
  name: "conv1d_3_doodle/conv1d_3/dilation_rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv1d_3_doodle/conv1d_3/conv1d/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv1d_3_doodle/conv1d_3/conv1d/ExpandDims"
  op: "ExpandDims"
  input: "conv1d_2_doodle/conv1d_2/BiasAdd"
  input: "conv1d_3_doodle/conv1d_3/conv1d/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 1
          }
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "conv1d_3_doodle/conv1d_3/conv1d/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "conv1d_3_doodle/conv1d_3/conv1d/ExpandDims_1"
  op: "ExpandDims"
  input: "conv1d_3/kernel/read"
  input: "conv1d_3_doodle/conv1d_3/conv1d/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 96
          }
        }
      }
    }
  }
}
node {
  name: "conv1d_3_doodle/conv1d_3/conv1d"
  op: "Conv2D"
  input: "conv1d_3_doodle/conv1d_3/conv1d/ExpandDims"
  input: "conv1d_3_doodle/conv1d_3/conv1d/ExpandDims_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 1
          }
          dim {
            size: -1
          }
          dim {
            size: 96
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_3_doodle/conv1d_3/conv1d/Squeeze"
  op: "Squeeze"
  input: "conv1d_3_doodle/conv1d_3/conv1d"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: -1
          }
          dim {
            size: 96
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "conv1d_3_doodle/conv1d_3/BiasAdd"
  op: "BiasAdd"
  input: "conv1d_3_doodle/conv1d_3/conv1d/Squeeze"
  input: "conv1d_3/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: -1
          }
          dim {
            size: 96
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "DropoutWrapperInit/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "DropoutWrapperInit/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "DropoutWrapperInit/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "DropoutWrapperInit_1/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "DropoutWrapperInit_1/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "DropoutWrapperInit_1/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "DropoutWrapperInit_2/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "DropoutWrapperInit_2/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "DropoutWrapperInit_2/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "DropoutWrapperInit_3/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "DropoutWrapperInit_3/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "DropoutWrapperInit_3/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "DropoutWrapperInit_4/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "DropoutWrapperInit_4/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "DropoutWrapperInit_4/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "DropoutWrapperInit_5/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "DropoutWrapperInit_5/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "DropoutWrapperInit_5/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/Rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/range"
  op: "Range"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/range/start"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/Rank"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/concat/values_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/concat"
  op: "ConcatV2"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/concat/values_0"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/range"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/transpose"
  op: "Transpose"
  input: "conv1d_3_doodle/conv1d_3/BiasAdd"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 96
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/Cast"
  op: "Cast"
  input: "Squeeze"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/sequence_length"
  op: "Identity"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/Cast"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/concat"
  op: "ConcatV2"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/Const"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/Const_1"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/zeros/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/zeros"
  op: "Fill"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/concat"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/Const_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/Const_4"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/Const_5"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/concat_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/concat_1"
  op: "ConcatV2"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/Const_4"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/Const_5"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/zeros_1/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/zeros_1"
  op: "Fill"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/concat_1"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/zeros_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/Const_6"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/Const_7"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/Equal"
  op: "Equal"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/Shape"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/All"
  op: "All"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/Equal"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/Assert/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Expected shape for Tensor rnn_classification/cell_0/bidirectional_rnn/fw/fw/sequence_length:0 is "
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/Assert/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: " but saw shape: "
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Expected shape for Tensor rnn_classification/cell_0/bidirectional_rnn/fw/fw/sequence_length:0 is "
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/Assert/Assert/data_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: " but saw shape: "
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/Assert/Assert"
  op: "Assert"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/All"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/Assert/Assert/data_0"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/stack"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/Assert/Assert/data_2"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/Shape"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/CheckSeqLen"
  op: "Identity"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/sequence_length"
  input: "^rnn_classification/cell_0/bidirectional_rnn/fw/fw/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/Shape_1"
  op: "Shape"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/strided_slice"
  op: "StridedSlice"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/Shape_1"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/strided_slice/stack"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/strided_slice/stack_1"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/concat_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/concat_1"
  op: "ConcatV2"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/Const_1"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/Const_2"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/zeros/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/zeros"
  op: "Fill"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/concat_1"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/Const_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/Min"
  op: "Min"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/CheckSeqLen"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/Const_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/Const_4"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/Max"
  op: "Max"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/CheckSeqLen"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/Const_4"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/time"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/TensorArray"
  op: "TensorArrayV3"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/strided_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: 8
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/dynamic_rnn/output_0"
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/TensorArray_1"
  op: "TensorArrayV3"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/strided_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: 8
        }
        dim {
          size: 96
        }
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/dynamic_rnn/input_0"
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/TensorArrayUnstack/Shape"
  op: "Shape"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/TensorArrayUnstack/Shape"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice/stack"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice/stack_1"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/TensorArrayUnstack/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/TensorArrayUnstack/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/TensorArrayUnstack/range"
  op: "Range"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/TensorArrayUnstack/range/start"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/TensorArray_1"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/TensorArrayUnstack/range"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/transpose"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/fw/fw/transpose"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/Maximum/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/Maximum"
  op: "Maximum"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/Maximum/x"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/Max"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/Minimum"
  op: "Minimum"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/strided_slice"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/iteration_counter"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Enter"
  op: "Enter"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/iteration_counter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Enter_1"
  op: "Enter"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/time"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Enter_2"
  op: "Enter"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Enter_3"
  op: "Enter"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Enter_4"
  op: "Enter"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Merge"
  op: "Merge"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Enter"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Merge_1"
  op: "Merge"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Enter_1"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Merge_2"
  op: "Merge"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Enter_2"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Merge_3"
  op: "Merge"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Enter_3"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Merge_4"
  op: "Merge"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Enter_4"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/NextIteration_4"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Less"
  op: "Less"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Merge"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Less/Enter"
  op: "Enter"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Less_1"
  op: "Less"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Merge_1"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Less_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Less_1/Enter"
  op: "Enter"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/Minimum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/LogicalAnd"
  op: "LogicalAnd"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Less"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Less_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/LoopCond"
  op: "LoopCond"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/LogicalAnd"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Switch"
  op: "Switch"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Merge"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Merge"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Switch_1"
  op: "Switch"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Merge_1"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Merge_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Switch_2"
  op: "Switch"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Merge_2"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Merge_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Switch_3"
  op: "Switch"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Merge_3"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Merge_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Switch_4"
  op: "Switch"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Merge_4"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Merge_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Identity"
  op: "Identity"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Identity_1"
  op: "Identity"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Identity_2"
  op: "Identity"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Identity_3"
  op: "Identity"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Identity_4"
  op: "Identity"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Switch_4:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/add/y"
  op: "Const"
  input: "^rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/add"
  op: "Add"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Identity"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Identity_1"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 96
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/GreaterEqual"
  op: "GreaterEqual"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Identity_1"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/GreaterEqual/Enter"
  op: "Enter"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/CheckSeqLen"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\340\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.0902893915772438
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0902893915772438
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 224
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/kernel/Initializer/random_uniform/max"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 224
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/kernel/Initializer/random_uniform"
  op: "Add"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/kernel/Initializer/random_uniform/mul"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 224
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 224
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 224
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/kernel/Assign"
  op: "Assign"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/kernel"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 224
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/kernel/read"
  op: "Identity"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 224
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/bias/Assign"
  op: "Assign"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/bias"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/bias/read"
  op: "Identity"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/concat/axis"
  op: "Const"
  input: "^rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/concat"
  op: "ConcatV2"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayReadV3"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Identity_4"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 224
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul"
  op: "MatMul"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/concat"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul/Enter"
  op: "Enter"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 224
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd"
  op: "BiasAdd"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd/Enter"
  op: "Enter"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/Const"
  op: "Const"
  input: "^rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/split/split_dim"
  op: "Const"
  input: "^rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/split"
  op: "Split"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/split/split_dim"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "num_split"
    value {
      i: 4
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/add/y"
  op: "Const"
  input: "^rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/add"
  op: "Add"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/split:2"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/Sigmoid"
  op: "Sigmoid"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul"
  op: "Mul"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/Sigmoid"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/Sigmoid_1"
  op: "Sigmoid"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/split"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/Tanh"
  op: "Tanh"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/split:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1"
  op: "Mul"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/Sigmoid_1"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/add_1"
  op: "Add"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/Sigmoid_2"
  op: "Sigmoid"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/split:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/Tanh_1"
  op: "Tanh"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2"
  op: "Mul"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/Sigmoid_2"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Select"
  op: "Select"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/GreaterEqual"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Select/Enter"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Select/Enter"
  op: "Enter"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Select_1"
  op: "Select"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/GreaterEqual"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Identity_3"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/add_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Select_2"
  op: "Select"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/GreaterEqual"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Identity_4"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Identity_1"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Select"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/add_1/y"
  op: "Const"
  input: "^rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/add_1"
  op: "Add"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Identity_1"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/NextIteration"
  op: "NextIteration"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/NextIteration_1"
  op: "NextIteration"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/NextIteration_2"
  op: "NextIteration"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/NextIteration_3"
  op: "NextIteration"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Select_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/NextIteration_4"
  op: "NextIteration"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Select_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Exit"
  op: "Exit"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Exit_1"
  op: "Exit"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Exit_2"
  op: "Exit"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Exit_3"
  op: "Exit"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Exit_4"
  op: "Exit"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/TensorArray"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/fw/fw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/fw/fw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/fw/fw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/TensorArrayStack/range"
  op: "Range"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/TensorArrayStack/range/start"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArraySizeV3"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/fw/fw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/TensorArray"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/TensorArrayStack/range"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/fw/fw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: 8
        }
        dim {
          size: 128
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/Const_5"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/Rank_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/range_1/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/range_1/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/range_1"
  op: "Range"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/range_1/start"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/Rank_1"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/range_1/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/concat_2/values_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/concat_2/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/concat_2"
  op: "ConcatV2"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/concat_2/values_0"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/range_1"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/concat_2/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/transpose_1"
  op: "Transpose"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/concat_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/ReverseSequence"
  op: "ReverseSequence"
  input: "conv1d_3_doodle/conv1d_3/BiasAdd"
  input: "Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tlen"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: -1
          }
          dim {
            size: 96
          }
        }
      }
    }
  }
  attr {
    key: "batch_dim"
    value {
      i: 0
    }
  }
  attr {
    key: "seq_dim"
    value {
      i: 1
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/Rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/range"
  op: "Range"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/range/start"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/Rank"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/concat/values_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/concat"
  op: "ConcatV2"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/concat/values_0"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/range"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/transpose"
  op: "Transpose"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/ReverseSequence"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 96
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/Cast"
  op: "Cast"
  input: "Squeeze"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/sequence_length"
  op: "Identity"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/Cast"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/concat"
  op: "ConcatV2"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/Const"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/Const_1"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/zeros/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/zeros"
  op: "Fill"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/concat"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/Const_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/Const_4"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/Const_5"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/concat_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/concat_1"
  op: "ConcatV2"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/Const_4"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/Const_5"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/zeros_1/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/zeros_1"
  op: "Fill"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/concat_1"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/zeros_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/Const_6"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/Const_7"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/Equal"
  op: "Equal"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/Shape"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/All"
  op: "All"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/Equal"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/Assert/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Expected shape for Tensor rnn_classification/cell_0/bidirectional_rnn/bw/bw/sequence_length:0 is "
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/Assert/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: " but saw shape: "
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Expected shape for Tensor rnn_classification/cell_0/bidirectional_rnn/bw/bw/sequence_length:0 is "
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/Assert/Assert/data_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: " but saw shape: "
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/Assert/Assert"
  op: "Assert"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/All"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/Assert/Assert/data_0"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/stack"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/Assert/Assert/data_2"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/Shape"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/CheckSeqLen"
  op: "Identity"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/sequence_length"
  input: "^rnn_classification/cell_0/bidirectional_rnn/bw/bw/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/Shape_1"
  op: "Shape"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/strided_slice"
  op: "StridedSlice"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/Shape_1"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/strided_slice/stack"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/strided_slice/stack_1"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/concat_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/concat_1"
  op: "ConcatV2"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/Const_1"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/Const_2"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/zeros/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/zeros"
  op: "Fill"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/concat_1"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/Const_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/Min"
  op: "Min"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/CheckSeqLen"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/Const_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/Const_4"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/Max"
  op: "Max"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/CheckSeqLen"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/Const_4"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/time"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/TensorArray"
  op: "TensorArrayV3"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/strided_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: 8
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/dynamic_rnn/output_0"
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/TensorArray_1"
  op: "TensorArrayV3"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/strided_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: 8
        }
        dim {
          size: 96
        }
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/dynamic_rnn/input_0"
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/TensorArrayUnstack/Shape"
  op: "Shape"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/TensorArrayUnstack/Shape"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice/stack"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice/stack_1"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/TensorArrayUnstack/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/TensorArrayUnstack/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/TensorArrayUnstack/range"
  op: "Range"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/TensorArrayUnstack/range/start"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/TensorArray_1"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/TensorArrayUnstack/range"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/transpose"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/bw/bw/transpose"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/Maximum/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/Maximum"
  op: "Maximum"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/Maximum/x"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/Max"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/Minimum"
  op: "Minimum"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/strided_slice"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/iteration_counter"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Enter"
  op: "Enter"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/iteration_counter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Enter_1"
  op: "Enter"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/time"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Enter_2"
  op: "Enter"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Enter_3"
  op: "Enter"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Enter_4"
  op: "Enter"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Merge"
  op: "Merge"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Enter"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Merge_1"
  op: "Merge"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Enter_1"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Merge_2"
  op: "Merge"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Enter_2"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Merge_3"
  op: "Merge"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Enter_3"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Merge_4"
  op: "Merge"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Enter_4"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/NextIteration_4"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Less"
  op: "Less"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Merge"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Less/Enter"
  op: "Enter"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Less_1"
  op: "Less"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Merge_1"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Less_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Less_1/Enter"
  op: "Enter"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/Minimum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/LogicalAnd"
  op: "LogicalAnd"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Less"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Less_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/LoopCond"
  op: "LoopCond"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/LogicalAnd"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Switch"
  op: "Switch"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Merge"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Merge"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Switch_1"
  op: "Switch"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Merge_1"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Merge_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Switch_2"
  op: "Switch"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Merge_2"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Merge_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Switch_3"
  op: "Switch"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Merge_3"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Merge_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Switch_4"
  op: "Switch"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Merge_4"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Merge_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Identity"
  op: "Identity"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Identity_1"
  op: "Identity"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Identity_2"
  op: "Identity"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Identity_3"
  op: "Identity"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Identity_4"
  op: "Identity"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Switch_4:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/add/y"
  op: "Const"
  input: "^rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/add"
  op: "Add"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Identity"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Identity_1"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 96
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/GreaterEqual"
  op: "GreaterEqual"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Identity_1"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/GreaterEqual/Enter"
  op: "Enter"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/CheckSeqLen"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\340\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.0902893915772438
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0902893915772438
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 224
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/kernel/Initializer/random_uniform/max"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 224
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/kernel/Initializer/random_uniform"
  op: "Add"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/kernel/Initializer/random_uniform/mul"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 224
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 224
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 224
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/kernel/Assign"
  op: "Assign"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/kernel"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 224
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/kernel/read"
  op: "Identity"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 224
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/bias/Assign"
  op: "Assign"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/bias"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/bias/read"
  op: "Identity"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/concat/axis"
  op: "Const"
  input: "^rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/concat"
  op: "ConcatV2"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayReadV3"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Identity_4"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 224
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul"
  op: "MatMul"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/concat"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul/Enter"
  op: "Enter"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 224
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd"
  op: "BiasAdd"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd/Enter"
  op: "Enter"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/Const"
  op: "Const"
  input: "^rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/split/split_dim"
  op: "Const"
  input: "^rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/split"
  op: "Split"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/split/split_dim"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "num_split"
    value {
      i: 4
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/add/y"
  op: "Const"
  input: "^rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/add"
  op: "Add"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/split:2"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/Sigmoid"
  op: "Sigmoid"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul"
  op: "Mul"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/Sigmoid"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/Sigmoid_1"
  op: "Sigmoid"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/split"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/Tanh"
  op: "Tanh"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/split:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1"
  op: "Mul"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/Sigmoid_1"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/add_1"
  op: "Add"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/Sigmoid_2"
  op: "Sigmoid"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/split:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/Tanh_1"
  op: "Tanh"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2"
  op: "Mul"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/Sigmoid_2"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Select"
  op: "Select"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/GreaterEqual"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Select/Enter"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Select/Enter"
  op: "Enter"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Select_1"
  op: "Select"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/GreaterEqual"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Identity_3"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/add_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Select_2"
  op: "Select"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/GreaterEqual"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Identity_4"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Identity_1"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Select"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/add_1/y"
  op: "Const"
  input: "^rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/add_1"
  op: "Add"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Identity_1"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/NextIteration"
  op: "NextIteration"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/NextIteration_1"
  op: "NextIteration"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/NextIteration_2"
  op: "NextIteration"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/NextIteration_3"
  op: "NextIteration"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Select_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/NextIteration_4"
  op: "NextIteration"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Select_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Exit"
  op: "Exit"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Exit_1"
  op: "Exit"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Exit_2"
  op: "Exit"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Exit_3"
  op: "Exit"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Exit_4"
  op: "Exit"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/TensorArray"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/bw/bw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/bw/bw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/bw/bw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/TensorArrayStack/range"
  op: "Range"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/TensorArrayStack/range/start"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArraySizeV3"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/bw/bw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/TensorArray"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/TensorArrayStack/range"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/bw/bw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: 8
        }
        dim {
          size: 128
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/Const_5"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/Rank_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/range_1/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/range_1/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/range_1"
  op: "Range"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/range_1/start"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/Rank_1"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/range_1/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/concat_2/values_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/concat_2/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/concat_2"
  op: "ConcatV2"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/concat_2/values_0"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/range_1"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/concat_2/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/transpose_1"
  op: "Transpose"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/concat_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/ReverseSequence"
  op: "ReverseSequence"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/transpose_1"
  input: "Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tlen"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "batch_dim"
    value {
      i: 0
    }
  }
  attr {
    key: "seq_dim"
    value {
      i: 1
    }
  }
}
node {
  name: "rnn_classification/cell_0/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/concat"
  op: "ConcatV2"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/transpose_1"
  input: "rnn_classification/cell_0/ReverseSequence"
  input: "rnn_classification/cell_0/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/Rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/range"
  op: "Range"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/range/start"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/Rank"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/concat/values_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/concat"
  op: "ConcatV2"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/concat/values_0"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/range"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/transpose"
  op: "Transpose"
  input: "rnn_classification/cell_0/concat"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/Cast"
  op: "Cast"
  input: "Squeeze"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/sequence_length"
  op: "Identity"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/Cast"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/concat"
  op: "ConcatV2"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/Const"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/Const_1"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/zeros/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/zeros"
  op: "Fill"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/concat"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/Const_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/Const_4"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/Const_5"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/concat_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/concat_1"
  op: "ConcatV2"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/Const_4"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/Const_5"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/zeros_1/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/zeros_1"
  op: "Fill"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/concat_1"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/zeros_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/Const_6"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/Const_7"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/Equal"
  op: "Equal"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/Shape"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/All"
  op: "All"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/Equal"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/Assert/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Expected shape for Tensor rnn_classification/cell_1/bidirectional_rnn/fw/fw/sequence_length:0 is "
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/Assert/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: " but saw shape: "
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Expected shape for Tensor rnn_classification/cell_1/bidirectional_rnn/fw/fw/sequence_length:0 is "
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/Assert/Assert/data_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: " but saw shape: "
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/Assert/Assert"
  op: "Assert"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/All"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/Assert/Assert/data_0"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/stack"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/Assert/Assert/data_2"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/Shape"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/CheckSeqLen"
  op: "Identity"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/sequence_length"
  input: "^rnn_classification/cell_1/bidirectional_rnn/fw/fw/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/Shape_1"
  op: "Shape"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/strided_slice"
  op: "StridedSlice"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/Shape_1"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/strided_slice/stack"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/strided_slice/stack_1"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/concat_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/concat_1"
  op: "ConcatV2"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/Const_1"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/Const_2"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/zeros/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/zeros"
  op: "Fill"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/concat_1"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/Const_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/Min"
  op: "Min"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/CheckSeqLen"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/Const_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/Const_4"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/Max"
  op: "Max"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/CheckSeqLen"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/Const_4"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/time"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/TensorArray"
  op: "TensorArrayV3"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/strided_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: 8
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/dynamic_rnn/output_0"
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/TensorArray_1"
  op: "TensorArrayV3"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/strided_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: 8
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/dynamic_rnn/input_0"
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/Shape"
  op: "Shape"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/Shape"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice/stack"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice/stack_1"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/range"
  op: "Range"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/range/start"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/TensorArray_1"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/range"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/transpose"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/fw/fw/transpose"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/Maximum/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/Maximum"
  op: "Maximum"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/Maximum/x"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/Max"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/Minimum"
  op: "Minimum"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/strided_slice"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/iteration_counter"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Enter"
  op: "Enter"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/iteration_counter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Enter_1"
  op: "Enter"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/time"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Enter_2"
  op: "Enter"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Enter_3"
  op: "Enter"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Enter_4"
  op: "Enter"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Merge"
  op: "Merge"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Enter"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Merge_1"
  op: "Merge"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Enter_1"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Merge_2"
  op: "Merge"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Enter_2"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Merge_3"
  op: "Merge"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Enter_3"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Merge_4"
  op: "Merge"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Enter_4"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/NextIteration_4"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Less"
  op: "Less"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Merge"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Less/Enter"
  op: "Enter"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Less_1"
  op: "Less"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Merge_1"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Less_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Less_1/Enter"
  op: "Enter"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/Minimum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/LogicalAnd"
  op: "LogicalAnd"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Less"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Less_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/LoopCond"
  op: "LoopCond"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/LogicalAnd"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Switch"
  op: "Switch"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Merge"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Merge"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Switch_1"
  op: "Switch"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Merge_1"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Merge_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Switch_2"
  op: "Switch"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Merge_2"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Merge_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Switch_3"
  op: "Switch"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Merge_3"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Merge_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Switch_4"
  op: "Switch"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Merge_4"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Merge_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Identity"
  op: "Identity"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Identity_1"
  op: "Identity"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Identity_2"
  op: "Identity"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Identity_3"
  op: "Identity"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Identity_4"
  op: "Identity"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Switch_4:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/add/y"
  op: "Const"
  input: "^rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/add"
  op: "Add"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Identity"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Identity_1"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/GreaterEqual"
  op: "GreaterEqual"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Identity_1"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/GreaterEqual/Enter"
  op: "Enter"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/CheckSeqLen"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\001\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.08183170855045319
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.08183170855045319
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/kernel/Initializer/random_uniform/max"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/kernel/Initializer/random_uniform"
  op: "Add"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/kernel/Initializer/random_uniform/mul"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 384
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/kernel/Assign"
  op: "Assign"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/kernel"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/kernel/read"
  op: "Identity"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/bias/Assign"
  op: "Assign"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/bias"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/bias/read"
  op: "Identity"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/concat/axis"
  op: "Const"
  input: "^rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/concat"
  op: "ConcatV2"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Identity_4"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 384
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul"
  op: "MatMul"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/concat"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul/Enter"
  op: "Enter"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd"
  op: "BiasAdd"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd/Enter"
  op: "Enter"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/Const"
  op: "Const"
  input: "^rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/split/split_dim"
  op: "Const"
  input: "^rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/split"
  op: "Split"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/split/split_dim"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "num_split"
    value {
      i: 4
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/add/y"
  op: "Const"
  input: "^rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/add"
  op: "Add"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/split:2"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/Sigmoid"
  op: "Sigmoid"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul"
  op: "Mul"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/Sigmoid"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/Sigmoid_1"
  op: "Sigmoid"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/split"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/Tanh"
  op: "Tanh"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/split:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1"
  op: "Mul"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/Sigmoid_1"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/add_1"
  op: "Add"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/Sigmoid_2"
  op: "Sigmoid"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/split:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/Tanh_1"
  op: "Tanh"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2"
  op: "Mul"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/Sigmoid_2"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Select"
  op: "Select"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/GreaterEqual"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Select/Enter"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Select/Enter"
  op: "Enter"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Select_1"
  op: "Select"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/GreaterEqual"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Identity_3"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/add_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Select_2"
  op: "Select"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/GreaterEqual"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Identity_4"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Identity_1"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Select"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/add_1/y"
  op: "Const"
  input: "^rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/add_1"
  op: "Add"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Identity_1"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/NextIteration"
  op: "NextIteration"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/NextIteration_1"
  op: "NextIteration"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/NextIteration_2"
  op: "NextIteration"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/NextIteration_3"
  op: "NextIteration"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Select_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/NextIteration_4"
  op: "NextIteration"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Select_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Exit"
  op: "Exit"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Exit_1"
  op: "Exit"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Exit_2"
  op: "Exit"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Exit_3"
  op: "Exit"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Exit_4"
  op: "Exit"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/TensorArray"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/fw/fw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/fw/fw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/fw/fw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/TensorArrayStack/range"
  op: "Range"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/TensorArrayStack/range/start"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArraySizeV3"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/fw/fw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/TensorArray"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/TensorArrayStack/range"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/fw/fw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: 8
        }
        dim {
          size: 128
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/Const_5"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/Rank_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/range_1/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/range_1/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/range_1"
  op: "Range"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/range_1/start"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/Rank_1"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/range_1/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/concat_2/values_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/concat_2/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/concat_2"
  op: "ConcatV2"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/concat_2/values_0"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/range_1"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/concat_2/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/transpose_1"
  op: "Transpose"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/concat_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/ReverseSequence"
  op: "ReverseSequence"
  input: "rnn_classification/cell_0/concat"
  input: "Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tlen"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "batch_dim"
    value {
      i: 0
    }
  }
  attr {
    key: "seq_dim"
    value {
      i: 1
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/Rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/range"
  op: "Range"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/range/start"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/Rank"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/concat/values_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/concat"
  op: "ConcatV2"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/concat/values_0"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/range"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/transpose"
  op: "Transpose"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/ReverseSequence"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/Cast"
  op: "Cast"
  input: "Squeeze"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/sequence_length"
  op: "Identity"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/Cast"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/concat"
  op: "ConcatV2"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/Const"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/Const_1"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/zeros/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/zeros"
  op: "Fill"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/concat"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/Const_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/Const_4"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/Const_5"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/concat_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/concat_1"
  op: "ConcatV2"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/Const_4"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/Const_5"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/zeros_1/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/zeros_1"
  op: "Fill"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/concat_1"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/zeros_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/Const_6"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/Const_7"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/Equal"
  op: "Equal"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/Shape"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/All"
  op: "All"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/Equal"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/Assert/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Expected shape for Tensor rnn_classification/cell_1/bidirectional_rnn/bw/bw/sequence_length:0 is "
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/Assert/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: " but saw shape: "
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Expected shape for Tensor rnn_classification/cell_1/bidirectional_rnn/bw/bw/sequence_length:0 is "
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/Assert/Assert/data_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: " but saw shape: "
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/Assert/Assert"
  op: "Assert"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/All"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/Assert/Assert/data_0"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/stack"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/Assert/Assert/data_2"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/Shape"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/CheckSeqLen"
  op: "Identity"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/sequence_length"
  input: "^rnn_classification/cell_1/bidirectional_rnn/bw/bw/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/Shape_1"
  op: "Shape"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/strided_slice"
  op: "StridedSlice"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/Shape_1"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/strided_slice/stack"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/strided_slice/stack_1"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/concat_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/concat_1"
  op: "ConcatV2"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/Const_1"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/Const_2"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/zeros/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/zeros"
  op: "Fill"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/concat_1"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/Const_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/Min"
  op: "Min"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/CheckSeqLen"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/Const_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/Const_4"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/Max"
  op: "Max"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/CheckSeqLen"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/Const_4"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/time"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/TensorArray"
  op: "TensorArrayV3"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/strided_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: 8
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/dynamic_rnn/output_0"
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/TensorArray_1"
  op: "TensorArrayV3"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/strided_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: 8
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/dynamic_rnn/input_0"
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/Shape"
  op: "Shape"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/Shape"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice/stack"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice/stack_1"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/range"
  op: "Range"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/range/start"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/TensorArray_1"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/range"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/transpose"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/bw/bw/transpose"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/Maximum/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/Maximum"
  op: "Maximum"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/Maximum/x"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/Max"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/Minimum"
  op: "Minimum"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/strided_slice"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/iteration_counter"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Enter"
  op: "Enter"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/iteration_counter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Enter_1"
  op: "Enter"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/time"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Enter_2"
  op: "Enter"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Enter_3"
  op: "Enter"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Enter_4"
  op: "Enter"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Merge"
  op: "Merge"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Enter"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Merge_1"
  op: "Merge"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Enter_1"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Merge_2"
  op: "Merge"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Enter_2"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Merge_3"
  op: "Merge"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Enter_3"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Merge_4"
  op: "Merge"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Enter_4"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/NextIteration_4"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Less"
  op: "Less"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Merge"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Less/Enter"
  op: "Enter"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Less_1"
  op: "Less"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Merge_1"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Less_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Less_1/Enter"
  op: "Enter"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/Minimum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/LogicalAnd"
  op: "LogicalAnd"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Less"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Less_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/LoopCond"
  op: "LoopCond"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/LogicalAnd"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Switch"
  op: "Switch"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Merge"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Merge"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Switch_1"
  op: "Switch"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Merge_1"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Merge_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Switch_2"
  op: "Switch"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Merge_2"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Merge_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Switch_3"
  op: "Switch"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Merge_3"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Merge_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Switch_4"
  op: "Switch"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Merge_4"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Merge_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Identity"
  op: "Identity"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Identity_1"
  op: "Identity"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Identity_2"
  op: "Identity"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Identity_3"
  op: "Identity"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Identity_4"
  op: "Identity"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Switch_4:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/add/y"
  op: "Const"
  input: "^rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/add"
  op: "Add"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Identity"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Identity_1"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/GreaterEqual"
  op: "GreaterEqual"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Identity_1"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/GreaterEqual/Enter"
  op: "Enter"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/CheckSeqLen"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\001\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.08183170855045319
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.08183170855045319
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/kernel/Initializer/random_uniform/max"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/kernel/Initializer/random_uniform"
  op: "Add"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/kernel/Initializer/random_uniform/mul"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 384
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/kernel/Assign"
  op: "Assign"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/kernel"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/kernel/read"
  op: "Identity"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/bias/Assign"
  op: "Assign"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/bias"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/bias/read"
  op: "Identity"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/concat/axis"
  op: "Const"
  input: "^rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/concat"
  op: "ConcatV2"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Identity_4"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 384
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul"
  op: "MatMul"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/concat"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul/Enter"
  op: "Enter"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd"
  op: "BiasAdd"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd/Enter"
  op: "Enter"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/Const"
  op: "Const"
  input: "^rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/split/split_dim"
  op: "Const"
  input: "^rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/split"
  op: "Split"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/split/split_dim"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "num_split"
    value {
      i: 4
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/add/y"
  op: "Const"
  input: "^rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/add"
  op: "Add"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/split:2"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/Sigmoid"
  op: "Sigmoid"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul"
  op: "Mul"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/Sigmoid"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/Sigmoid_1"
  op: "Sigmoid"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/split"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/Tanh"
  op: "Tanh"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/split:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1"
  op: "Mul"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/Sigmoid_1"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/add_1"
  op: "Add"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/Sigmoid_2"
  op: "Sigmoid"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/split:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/Tanh_1"
  op: "Tanh"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2"
  op: "Mul"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/Sigmoid_2"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Select"
  op: "Select"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/GreaterEqual"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Select/Enter"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Select/Enter"
  op: "Enter"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Select_1"
  op: "Select"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/GreaterEqual"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Identity_3"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/add_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Select_2"
  op: "Select"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/GreaterEqual"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Identity_4"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Identity_1"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Select"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/add_1/y"
  op: "Const"
  input: "^rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/add_1"
  op: "Add"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Identity_1"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/NextIteration"
  op: "NextIteration"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/NextIteration_1"
  op: "NextIteration"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/NextIteration_2"
  op: "NextIteration"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/NextIteration_3"
  op: "NextIteration"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Select_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/NextIteration_4"
  op: "NextIteration"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Select_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Exit"
  op: "Exit"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Exit_1"
  op: "Exit"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Exit_2"
  op: "Exit"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Exit_3"
  op: "Exit"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Exit_4"
  op: "Exit"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/TensorArray"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/bw/bw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/bw/bw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/bw/bw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/TensorArrayStack/range"
  op: "Range"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/TensorArrayStack/range/start"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArraySizeV3"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/bw/bw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/TensorArray"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/TensorArrayStack/range"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/bw/bw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: 8
        }
        dim {
          size: 128
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/Const_5"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/Rank_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/range_1/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/range_1/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/range_1"
  op: "Range"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/range_1/start"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/Rank_1"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/range_1/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/concat_2/values_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/concat_2/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/concat_2"
  op: "ConcatV2"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/concat_2/values_0"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/range_1"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/concat_2/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/transpose_1"
  op: "Transpose"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/concat_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/ReverseSequence"
  op: "ReverseSequence"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/transpose_1"
  input: "Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tlen"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "batch_dim"
    value {
      i: 0
    }
  }
  attr {
    key: "seq_dim"
    value {
      i: 1
    }
  }
}
node {
  name: "rnn_classification/cell_1/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/concat"
  op: "ConcatV2"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/transpose_1"
  input: "rnn_classification/cell_1/ReverseSequence"
  input: "rnn_classification/cell_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/Rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/range"
  op: "Range"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/range/start"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/Rank"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/concat/values_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/concat"
  op: "ConcatV2"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/concat/values_0"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/range"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/transpose"
  op: "Transpose"
  input: "rnn_classification/cell_1/concat"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/Cast"
  op: "Cast"
  input: "Squeeze"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/sequence_length"
  op: "Identity"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/Cast"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/concat"
  op: "ConcatV2"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/Const"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/Const_1"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/zeros/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/zeros"
  op: "Fill"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/concat"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/Const_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/Const_4"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/Const_5"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/concat_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/concat_1"
  op: "ConcatV2"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/Const_4"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/Const_5"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/zeros_1/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/zeros_1"
  op: "Fill"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/concat_1"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/zeros_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/Const_6"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/Const_7"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/Equal"
  op: "Equal"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/Shape"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/All"
  op: "All"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/Equal"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/Assert/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Expected shape for Tensor rnn_classification/cell_2/bidirectional_rnn/fw/fw/sequence_length:0 is "
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/Assert/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: " but saw shape: "
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Expected shape for Tensor rnn_classification/cell_2/bidirectional_rnn/fw/fw/sequence_length:0 is "
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/Assert/Assert/data_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: " but saw shape: "
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/Assert/Assert"
  op: "Assert"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/All"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/Assert/Assert/data_0"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/stack"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/Assert/Assert/data_2"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/Shape"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/CheckSeqLen"
  op: "Identity"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/sequence_length"
  input: "^rnn_classification/cell_2/bidirectional_rnn/fw/fw/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/Shape_1"
  op: "Shape"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/strided_slice"
  op: "StridedSlice"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/Shape_1"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/strided_slice/stack"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/strided_slice/stack_1"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/concat_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/concat_1"
  op: "ConcatV2"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/Const_1"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/Const_2"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/zeros/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/zeros"
  op: "Fill"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/concat_1"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/Const_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/Min"
  op: "Min"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/CheckSeqLen"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/Const_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/Const_4"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/Max"
  op: "Max"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/CheckSeqLen"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/Const_4"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/time"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/TensorArray"
  op: "TensorArrayV3"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/strided_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: 8
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/dynamic_rnn/output_0"
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/TensorArray_1"
  op: "TensorArrayV3"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/strided_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: 8
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/dynamic_rnn/input_0"
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/TensorArrayUnstack/Shape"
  op: "Shape"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/TensorArrayUnstack/Shape"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice/stack"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice/stack_1"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/TensorArrayUnstack/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/TensorArrayUnstack/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/TensorArrayUnstack/range"
  op: "Range"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/TensorArrayUnstack/range/start"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/TensorArray_1"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/TensorArrayUnstack/range"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/transpose"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/fw/fw/transpose"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/Maximum/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/Maximum"
  op: "Maximum"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/Maximum/x"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/Max"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/Minimum"
  op: "Minimum"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/strided_slice"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/iteration_counter"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Enter"
  op: "Enter"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/iteration_counter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Enter_1"
  op: "Enter"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/time"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Enter_2"
  op: "Enter"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Enter_3"
  op: "Enter"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Enter_4"
  op: "Enter"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Merge"
  op: "Merge"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Enter"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Merge_1"
  op: "Merge"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Enter_1"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Merge_2"
  op: "Merge"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Enter_2"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Merge_3"
  op: "Merge"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Enter_3"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Merge_4"
  op: "Merge"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Enter_4"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/NextIteration_4"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Less"
  op: "Less"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Merge"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Less/Enter"
  op: "Enter"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Less_1"
  op: "Less"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Merge_1"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Less_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Less_1/Enter"
  op: "Enter"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/Minimum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/LogicalAnd"
  op: "LogicalAnd"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Less"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Less_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/LoopCond"
  op: "LoopCond"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/LogicalAnd"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Switch"
  op: "Switch"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Merge"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Merge"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Switch_1"
  op: "Switch"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Merge_1"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Merge_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Switch_2"
  op: "Switch"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Merge_2"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Merge_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Switch_3"
  op: "Switch"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Merge_3"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Merge_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Switch_4"
  op: "Switch"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Merge_4"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Merge_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Identity"
  op: "Identity"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Identity_1"
  op: "Identity"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Identity_2"
  op: "Identity"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Identity_3"
  op: "Identity"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Identity_4"
  op: "Identity"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Switch_4:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/add/y"
  op: "Const"
  input: "^rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/add"
  op: "Add"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Identity"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Identity_1"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/GreaterEqual"
  op: "GreaterEqual"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Identity_1"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/GreaterEqual/Enter"
  op: "Enter"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/CheckSeqLen"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\001\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.08183170855045319
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.08183170855045319
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/kernel/Initializer/random_uniform/max"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/kernel/Initializer/random_uniform"
  op: "Add"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/kernel/Initializer/random_uniform/mul"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 384
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/kernel/Assign"
  op: "Assign"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/kernel"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/kernel/read"
  op: "Identity"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/bias/Assign"
  op: "Assign"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/bias"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/bias/read"
  op: "Identity"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/concat/axis"
  op: "Const"
  input: "^rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/concat"
  op: "ConcatV2"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Identity_4"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 384
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul"
  op: "MatMul"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/concat"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul/Enter"
  op: "Enter"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd"
  op: "BiasAdd"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd/Enter"
  op: "Enter"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/Const"
  op: "Const"
  input: "^rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/split/split_dim"
  op: "Const"
  input: "^rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/split"
  op: "Split"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/split/split_dim"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "num_split"
    value {
      i: 4
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/add/y"
  op: "Const"
  input: "^rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/add"
  op: "Add"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/split:2"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/Sigmoid"
  op: "Sigmoid"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul"
  op: "Mul"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/Sigmoid"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/Sigmoid_1"
  op: "Sigmoid"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/split"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/Tanh"
  op: "Tanh"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/split:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1"
  op: "Mul"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/Sigmoid_1"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/add_1"
  op: "Add"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/Sigmoid_2"
  op: "Sigmoid"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/split:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/Tanh_1"
  op: "Tanh"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2"
  op: "Mul"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/Sigmoid_2"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Select"
  op: "Select"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/GreaterEqual"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Select/Enter"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Select/Enter"
  op: "Enter"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Select_1"
  op: "Select"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/GreaterEqual"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Identity_3"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/add_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Select_2"
  op: "Select"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/GreaterEqual"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Identity_4"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Identity_1"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Select"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/add_1/y"
  op: "Const"
  input: "^rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/add_1"
  op: "Add"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Identity_1"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/NextIteration"
  op: "NextIteration"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/NextIteration_1"
  op: "NextIteration"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/NextIteration_2"
  op: "NextIteration"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/NextIteration_3"
  op: "NextIteration"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Select_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/NextIteration_4"
  op: "NextIteration"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Select_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Exit"
  op: "Exit"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Exit_1"
  op: "Exit"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Exit_2"
  op: "Exit"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Exit_3"
  op: "Exit"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Exit_4"
  op: "Exit"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/TensorArray"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/fw/fw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/fw/fw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/fw/fw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/TensorArrayStack/range"
  op: "Range"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/TensorArrayStack/range/start"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArraySizeV3"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/fw/fw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/TensorArray"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/TensorArrayStack/range"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/fw/fw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: 8
        }
        dim {
          size: 128
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/Const_5"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/Rank_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/range_1/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/range_1/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/range_1"
  op: "Range"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/range_1/start"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/Rank_1"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/range_1/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/concat_2/values_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/concat_2/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/concat_2"
  op: "ConcatV2"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/concat_2/values_0"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/range_1"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/concat_2/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/transpose_1"
  op: "Transpose"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/concat_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/ReverseSequence"
  op: "ReverseSequence"
  input: "rnn_classification/cell_1/concat"
  input: "Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tlen"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "batch_dim"
    value {
      i: 0
    }
  }
  attr {
    key: "seq_dim"
    value {
      i: 1
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/Rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/range"
  op: "Range"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/range/start"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/Rank"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/concat/values_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/concat"
  op: "ConcatV2"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/concat/values_0"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/range"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/transpose"
  op: "Transpose"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/ReverseSequence"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/Cast"
  op: "Cast"
  input: "Squeeze"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/sequence_length"
  op: "Identity"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/Cast"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/concat"
  op: "ConcatV2"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/Const"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/Const_1"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/zeros/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/zeros"
  op: "Fill"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/concat"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/Const_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/Const_4"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/Const_5"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/concat_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/concat_1"
  op: "ConcatV2"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/Const_4"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/Const_5"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/zeros_1/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/zeros_1"
  op: "Fill"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/concat_1"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/zeros_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/Const_6"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/Const_7"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/Equal"
  op: "Equal"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/Shape"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/All"
  op: "All"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/Equal"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/Assert/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Expected shape for Tensor rnn_classification/cell_2/bidirectional_rnn/bw/bw/sequence_length:0 is "
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/Assert/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: " but saw shape: "
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Expected shape for Tensor rnn_classification/cell_2/bidirectional_rnn/bw/bw/sequence_length:0 is "
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/Assert/Assert/data_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: " but saw shape: "
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/Assert/Assert"
  op: "Assert"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/All"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/Assert/Assert/data_0"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/stack"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/Assert/Assert/data_2"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/Shape"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/CheckSeqLen"
  op: "Identity"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/sequence_length"
  input: "^rnn_classification/cell_2/bidirectional_rnn/bw/bw/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/Shape_1"
  op: "Shape"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/strided_slice"
  op: "StridedSlice"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/Shape_1"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/strided_slice/stack"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/strided_slice/stack_1"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/concat_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/concat_1"
  op: "ConcatV2"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/Const_1"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/Const_2"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/zeros/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/zeros"
  op: "Fill"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/concat_1"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/Const_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/Min"
  op: "Min"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/CheckSeqLen"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/Const_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/Const_4"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/Max"
  op: "Max"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/CheckSeqLen"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/Const_4"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/time"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/TensorArray"
  op: "TensorArrayV3"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/strided_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: 8
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/dynamic_rnn/output_0"
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/TensorArray_1"
  op: "TensorArrayV3"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/strided_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: 8
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/dynamic_rnn/input_0"
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/TensorArrayUnstack/Shape"
  op: "Shape"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/TensorArrayUnstack/Shape"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice/stack"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice/stack_1"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/TensorArrayUnstack/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/TensorArrayUnstack/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/TensorArrayUnstack/range"
  op: "Range"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/TensorArrayUnstack/range/start"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/TensorArray_1"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/TensorArrayUnstack/range"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/transpose"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/bw/bw/transpose"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/Maximum/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/Maximum"
  op: "Maximum"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/Maximum/x"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/Max"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/Minimum"
  op: "Minimum"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/strided_slice"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/iteration_counter"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Enter"
  op: "Enter"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/iteration_counter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Enter_1"
  op: "Enter"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/time"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Enter_2"
  op: "Enter"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Enter_3"
  op: "Enter"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Enter_4"
  op: "Enter"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Merge"
  op: "Merge"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Enter"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Merge_1"
  op: "Merge"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Enter_1"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Merge_2"
  op: "Merge"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Enter_2"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Merge_3"
  op: "Merge"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Enter_3"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Merge_4"
  op: "Merge"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Enter_4"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/NextIteration_4"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Less"
  op: "Less"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Merge"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Less/Enter"
  op: "Enter"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Less_1"
  op: "Less"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Merge_1"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Less_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Less_1/Enter"
  op: "Enter"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/Minimum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/LogicalAnd"
  op: "LogicalAnd"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Less"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Less_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/LoopCond"
  op: "LoopCond"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/LogicalAnd"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Switch"
  op: "Switch"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Merge"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Merge"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Switch_1"
  op: "Switch"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Merge_1"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Merge_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Switch_2"
  op: "Switch"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Merge_2"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Merge_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Switch_3"
  op: "Switch"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Merge_3"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Merge_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Switch_4"
  op: "Switch"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Merge_4"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Merge_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Identity"
  op: "Identity"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Identity_1"
  op: "Identity"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Identity_2"
  op: "Identity"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Identity_3"
  op: "Identity"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Identity_4"
  op: "Identity"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Switch_4:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/add/y"
  op: "Const"
  input: "^rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/add"
  op: "Add"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Identity"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Identity_1"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/GreaterEqual"
  op: "GreaterEqual"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Identity_1"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/GreaterEqual/Enter"
  op: "Enter"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/CheckSeqLen"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\001\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.08183170855045319
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.08183170855045319
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/kernel/Initializer/random_uniform/max"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/kernel/Initializer/random_uniform"
  op: "Add"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/kernel/Initializer/random_uniform/mul"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 384
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/kernel/Assign"
  op: "Assign"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/kernel"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/kernel/read"
  op: "Identity"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/bias/Assign"
  op: "Assign"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/bias"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/bias/read"
  op: "Identity"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/concat/axis"
  op: "Const"
  input: "^rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/concat"
  op: "ConcatV2"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Identity_4"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 384
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul"
  op: "MatMul"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/concat"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul/Enter"
  op: "Enter"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd"
  op: "BiasAdd"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd/Enter"
  op: "Enter"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/Const"
  op: "Const"
  input: "^rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/split/split_dim"
  op: "Const"
  input: "^rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/split"
  op: "Split"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/split/split_dim"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "num_split"
    value {
      i: 4
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/add/y"
  op: "Const"
  input: "^rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/add"
  op: "Add"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/split:2"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/Sigmoid"
  op: "Sigmoid"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul"
  op: "Mul"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/Sigmoid"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/Sigmoid_1"
  op: "Sigmoid"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/split"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/Tanh"
  op: "Tanh"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/split:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1"
  op: "Mul"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/Sigmoid_1"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/add_1"
  op: "Add"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/Sigmoid_2"
  op: "Sigmoid"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/split:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/Tanh_1"
  op: "Tanh"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2"
  op: "Mul"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/Sigmoid_2"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Select"
  op: "Select"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/GreaterEqual"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Select/Enter"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Select/Enter"
  op: "Enter"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Select_1"
  op: "Select"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/GreaterEqual"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Identity_3"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/add_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Select_2"
  op: "Select"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/GreaterEqual"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Identity_4"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Identity_1"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Select"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/add_1/y"
  op: "Const"
  input: "^rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/add_1"
  op: "Add"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Identity_1"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/NextIteration"
  op: "NextIteration"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/NextIteration_1"
  op: "NextIteration"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/NextIteration_2"
  op: "NextIteration"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/NextIteration_3"
  op: "NextIteration"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Select_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/NextIteration_4"
  op: "NextIteration"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Select_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Exit"
  op: "Exit"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Exit_1"
  op: "Exit"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Exit_2"
  op: "Exit"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Exit_3"
  op: "Exit"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Exit_4"
  op: "Exit"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/TensorArray"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/bw/bw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/bw/bw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/bw/bw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/TensorArrayStack/range"
  op: "Range"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/TensorArrayStack/range/start"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArraySizeV3"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/bw/bw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/TensorArray"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/TensorArrayStack/range"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/bw/bw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: 8
        }
        dim {
          size: 128
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/Const_5"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/Rank_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/range_1/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/range_1/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/range_1"
  op: "Range"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/range_1/start"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/Rank_1"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/range_1/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/concat_2/values_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/concat_2/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/concat_2"
  op: "ConcatV2"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/concat_2/values_0"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/range_1"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/concat_2/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/transpose_1"
  op: "Transpose"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/concat_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/ReverseSequence"
  op: "ReverseSequence"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/transpose_1"
  input: "Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tlen"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "batch_dim"
    value {
      i: 0
    }
  }
  attr {
    key: "seq_dim"
    value {
      i: 1
    }
  }
}
node {
  name: "rnn_classification/cell_2/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/concat"
  op: "ConcatV2"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/transpose_1"
  input: "rnn_classification/cell_2/ReverseSequence"
  input: "rnn_classification/cell_2/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "Shape"
  op: "Shape"
  input: "rnn_classification/cell_2/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice"
  op: "StridedSlice"
  input: "Shape"
  input: "strided_slice/stack"
  input: "strided_slice/stack_1"
  input: "strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "SequenceMask/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "SequenceMask/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "SequenceMask/Range"
  op: "Range"
  input: "SequenceMask/Const"
  input: "strided_slice"
  input: "SequenceMask/Const_1"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "SequenceMask/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "SequenceMask/ExpandDims"
  op: "ExpandDims"
  input: "Squeeze"
  input: "SequenceMask/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "SequenceMask/Cast"
  op: "Cast"
  input: "SequenceMask/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "SequenceMask/Less"
  op: "Less"
  input: "SequenceMask/Range"
  input: "SequenceMask/Cast"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "ExpandDims"
  op: "ExpandDims"
  input: "SequenceMask/Less"
  input: "ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Shape_1"
  op: "Shape"
  input: "rnn_classification/cell_2/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "strided_slice_1/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_1"
  op: "StridedSlice"
  input: "Shape_1"
  input: "strided_slice_1/stack"
  input: "strided_slice_1/stack_1"
  input: "strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Tile/multiples/0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Tile/multiples/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Tile/multiples"
  op: "Pack"
  input: "Tile/multiples/0"
  input: "Tile/multiples/1"
  input: "strided_slice_1"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Tile"
  op: "Tile"
  input: "ExpandDims"
  input: "Tile/multiples"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "zeros_like"
  op: "ZerosLike"
  input: "rnn_classification/cell_2/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "Select"
  op: "Select"
  input: "Tile"
  input: "rnn_classification/cell_2/concat"
  input: "zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "Sum/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Sum"
  op: "Sum"
  input: "Select"
  input: "Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Final_Layer/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Final_Layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\001\000\000\027\000\000\000"
      }
    }
  }
}
node {
  name: "Final_Layer/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Final_Layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.146647110581398
      }
    }
  }
}
node {
  name: "Final_Layer/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Final_Layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.146647110581398
      }
    }
  }
}
node {
  name: "Final_Layer/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "Final_Layer/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Final_Layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 23
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "Final_Layer/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "Final_Layer/kernel/Initializer/random_uniform/max"
  input: "Final_Layer/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Final_Layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Final_Layer/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "Final_Layer/kernel/Initializer/random_uniform/RandomUniform"
  input: "Final_Layer/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Final_Layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 23
          }
        }
      }
    }
  }
}
node {
  name: "Final_Layer/kernel/Initializer/random_uniform"
  op: "Add"
  input: "Final_Layer/kernel/Initializer/random_uniform/mul"
  input: "Final_Layer/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Final_Layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 23
          }
        }
      }
    }
  }
}
node {
  name: "Final_Layer/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Final_Layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 23
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
        dim {
          size: 23
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Final_Layer/kernel/Assign"
  op: "Assign"
  input: "Final_Layer/kernel"
  input: "Final_Layer/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Final_Layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 23
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Final_Layer/kernel/read"
  op: "Identity"
  input: "Final_Layer/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Final_Layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 23
          }
        }
      }
    }
  }
}
node {
  name: "Final_Layer/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Final_Layer/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 23
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 23
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Final_Layer/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Final_Layer/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 23
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 23
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Final_Layer/bias/Assign"
  op: "Assign"
  input: "Final_Layer/bias"
  input: "Final_Layer/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Final_Layer/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 23
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Final_Layer/bias/read"
  op: "Identity"
  input: "Final_Layer/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Final_Layer/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 23
          }
        }
      }
    }
  }
}
node {
  name: "Final_Layer/Final_Layer/MatMul"
  op: "MatMul"
  input: "Sum"
  input: "Final_Layer/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 23
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "Final_Layer/Final_Layer/BiasAdd"
  op: "BiasAdd"
  input: "Final_Layer/Final_Layer/MatMul"
  input: "Final_Layer/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 23
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "ArgMax/dimension"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "ArgMax"
  op: "ArgMax"
  input: "Final_Layer/Final_Layer/BiasAdd"
  input: "ArgMax/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "softmax_tensor"
  op: "Softmax"
  input: "Final_Layer/Final_Layer/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 23
          }
        }
      }
    }
  }
}
node {
  name: "SparseSoftmaxCrossEntropyWithLogits/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"
  op: "SparseSoftmaxCrossEntropyWithLogits"
  input: "Final_Layer/Final_Layer/BiasAdd"
  input: "Squeeze_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tlabels"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
        shape {
          dim {
            size: 8
          }
          dim {
            size: 23
          }
        }
      }
    }
  }
}
node {
  name: "Const_4"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Mean"
  op: "Mean"
  input: "SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"
  input: "Const_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/grad_ys_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "gradients/Fill"
  op: "Fill"
  input: "gradients/Shape"
  input: "gradients/grad_ys_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/f_count"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/f_count_1"
  op: "Enter"
  input: "gradients/f_count"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/Merge"
  op: "Merge"
  input: "gradients/f_count_1"
  input: "gradients/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Switch"
  op: "Switch"
  input: "gradients/Merge"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Add/y"
  op: "Const"
  input: "^rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Add"
  op: "Add"
  input: "gradients/Switch:1"
  input: "gradients/Add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/NextIteration"
  op: "NextIteration"
  input: "gradients/Add"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/StackPushV2"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/MatMul_1/StackPushV2"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul/StackPushV2"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul_1/StackPushV2"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul/StackPushV2"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul_1/StackPushV2"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul/StackPushV2"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul_1/StackPushV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/f_count_2"
  op: "Exit"
  input: "gradients/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/b_count"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/b_count_1"
  op: "Enter"
  input: "gradients/f_count_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/Merge_1"
  op: "Merge"
  input: "gradients/b_count_1"
  input: "gradients/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/GreaterEqual"
  op: "GreaterEqual"
  input: "gradients/Merge_1"
  input: "gradients/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/GreaterEqual/Enter"
  op: "Enter"
  input: "gradients/b_count"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/b_count_2"
  op: "LoopCond"
  input: "gradients/GreaterEqual"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Switch_1"
  op: "Switch"
  input: "gradients/Merge_1"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Sub"
  op: "Sub"
  input: "gradients/Switch_1:1"
  input: "gradients/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/NextIteration_1"
  op: "NextIteration"
  input: "gradients/Sub"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/b_count_3"
  op: "Exit"
  input: "gradients/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/f_count_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/f_count_4"
  op: "Enter"
  input: "gradients/f_count_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/Merge_2"
  op: "Merge"
  input: "gradients/f_count_4"
  input: "gradients/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Switch_2"
  op: "Switch"
  input: "gradients/Merge_2"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Add_1/y"
  op: "Const"
  input: "^rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Add_1"
  op: "Add"
  input: "gradients/Switch_2:1"
  input: "gradients/Add_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/NextIteration_2"
  op: "NextIteration"
  input: "gradients/Add_1"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/StackPushV2"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/MatMul_1/StackPushV2"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul/StackPushV2"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul_1/StackPushV2"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul/StackPushV2"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul_1/StackPushV2"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul/StackPushV2"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul_1/StackPushV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/f_count_5"
  op: "Exit"
  input: "gradients/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/b_count_4"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/b_count_5"
  op: "Enter"
  input: "gradients/f_count_5"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/Merge_3"
  op: "Merge"
  input: "gradients/b_count_5"
  input: "gradients/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/GreaterEqual_1"
  op: "GreaterEqual"
  input: "gradients/Merge_3"
  input: "gradients/GreaterEqual_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/GreaterEqual_1/Enter"
  op: "Enter"
  input: "gradients/b_count_4"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/b_count_6"
  op: "LoopCond"
  input: "gradients/GreaterEqual_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Switch_3"
  op: "Switch"
  input: "gradients/Merge_3"
  input: "gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Sub_1"
  op: "Sub"
  input: "gradients/Switch_3:1"
  input: "gradients/GreaterEqual_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/NextIteration_3"
  op: "NextIteration"
  input: "gradients/Sub_1"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/b_count_7"
  op: "Exit"
  input: "gradients/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/f_count_6"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/f_count_7"
  op: "Enter"
  input: "gradients/f_count_6"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/Merge_4"
  op: "Merge"
  input: "gradients/f_count_7"
  input: "gradients/NextIteration_4"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Switch_4"
  op: "Switch"
  input: "gradients/Merge_4"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Add_2/y"
  op: "Const"
  input: "^rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Add_2"
  op: "Add"
  input: "gradients/Switch_4:1"
  input: "gradients/Add_2/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/NextIteration_4"
  op: "NextIteration"
  input: "gradients/Add_2"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/StackPushV2"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/MatMul_1/StackPushV2"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul/StackPushV2"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul_1/StackPushV2"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul/StackPushV2"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul_1/StackPushV2"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul/StackPushV2"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul_1/StackPushV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/f_count_8"
  op: "Exit"
  input: "gradients/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/b_count_8"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/b_count_9"
  op: "Enter"
  input: "gradients/f_count_8"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/Merge_5"
  op: "Merge"
  input: "gradients/b_count_9"
  input: "gradients/NextIteration_5"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/GreaterEqual_2"
  op: "GreaterEqual"
  input: "gradients/Merge_5"
  input: "gradients/GreaterEqual_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/GreaterEqual_2/Enter"
  op: "Enter"
  input: "gradients/b_count_8"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/b_count_10"
  op: "LoopCond"
  input: "gradients/GreaterEqual_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Switch_5"
  op: "Switch"
  input: "gradients/Merge_5"
  input: "gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Sub_2"
  op: "Sub"
  input: "gradients/Switch_5:1"
  input: "gradients/GreaterEqual_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/NextIteration_5"
  op: "NextIteration"
  input: "gradients/Sub_2"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/b_count_11"
  op: "Exit"
  input: "gradients/Switch_5"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/f_count_9"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/f_count_10"
  op: "Enter"
  input: "gradients/f_count_9"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/Merge_6"
  op: "Merge"
  input: "gradients/f_count_10"
  input: "gradients/NextIteration_6"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Switch_6"
  op: "Switch"
  input: "gradients/Merge_6"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Add_3/y"
  op: "Const"
  input: "^rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Add_3"
  op: "Add"
  input: "gradients/Switch_6:1"
  input: "gradients/Add_3/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/NextIteration_6"
  op: "NextIteration"
  input: "gradients/Add_3"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/StackPushV2"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/MatMul_1/StackPushV2"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul/StackPushV2"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul_1/StackPushV2"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul/StackPushV2"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul_1/StackPushV2"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul/StackPushV2"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul_1/StackPushV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/f_count_11"
  op: "Exit"
  input: "gradients/Switch_6"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/b_count_12"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/b_count_13"
  op: "Enter"
  input: "gradients/f_count_11"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/Merge_7"
  op: "Merge"
  input: "gradients/b_count_13"
  input: "gradients/NextIteration_7"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/GreaterEqual_3"
  op: "GreaterEqual"
  input: "gradients/Merge_7"
  input: "gradients/GreaterEqual_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/GreaterEqual_3/Enter"
  op: "Enter"
  input: "gradients/b_count_12"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/b_count_14"
  op: "LoopCond"
  input: "gradients/GreaterEqual_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Switch_7"
  op: "Switch"
  input: "gradients/Merge_7"
  input: "gradients/b_count_14"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Sub_3"
  op: "Sub"
  input: "gradients/Switch_7:1"
  input: "gradients/GreaterEqual_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/NextIteration_7"
  op: "NextIteration"
  input: "gradients/Sub_3"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/b_count_15"
  op: "Exit"
  input: "gradients/Switch_7"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/f_count_12"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/f_count_13"
  op: "Enter"
  input: "gradients/f_count_12"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/Merge_8"
  op: "Merge"
  input: "gradients/f_count_13"
  input: "gradients/NextIteration_8"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Switch_8"
  op: "Switch"
  input: "gradients/Merge_8"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Add_4/y"
  op: "Const"
  input: "^rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Add_4"
  op: "Add"
  input: "gradients/Switch_8:1"
  input: "gradients/Add_4/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/NextIteration_8"
  op: "NextIteration"
  input: "gradients/Add_4"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/StackPushV2"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/MatMul_1/StackPushV2"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul/StackPushV2"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul_1/StackPushV2"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul/StackPushV2"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul_1/StackPushV2"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul/StackPushV2"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul_1/StackPushV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/f_count_14"
  op: "Exit"
  input: "gradients/Switch_8"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/b_count_16"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/b_count_17"
  op: "Enter"
  input: "gradients/f_count_14"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/Merge_9"
  op: "Merge"
  input: "gradients/b_count_17"
  input: "gradients/NextIteration_9"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/GreaterEqual_4"
  op: "GreaterEqual"
  input: "gradients/Merge_9"
  input: "gradients/GreaterEqual_4/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/GreaterEqual_4/Enter"
  op: "Enter"
  input: "gradients/b_count_16"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/b_count_18"
  op: "LoopCond"
  input: "gradients/GreaterEqual_4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Switch_9"
  op: "Switch"
  input: "gradients/Merge_9"
  input: "gradients/b_count_18"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Sub_4"
  op: "Sub"
  input: "gradients/Switch_9:1"
  input: "gradients/GreaterEqual_4/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/NextIteration_9"
  op: "NextIteration"
  input: "gradients/Sub_4"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/b_count_19"
  op: "Exit"
  input: "gradients/Switch_9"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/f_count_15"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/f_count_16"
  op: "Enter"
  input: "gradients/f_count_15"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/Merge_10"
  op: "Merge"
  input: "gradients/f_count_16"
  input: "gradients/NextIteration_10"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Switch_10"
  op: "Switch"
  input: "gradients/Merge_10"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Add_5/y"
  op: "Const"
  input: "^rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Add_5"
  op: "Add"
  input: "gradients/Switch_10:1"
  input: "gradients/Add_5/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/NextIteration_10"
  op: "NextIteration"
  input: "gradients/Add_5"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/StackPushV2"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/MatMul_1/StackPushV2"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul/StackPushV2"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul_1/StackPushV2"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul/StackPushV2"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul_1/StackPushV2"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul/StackPushV2"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul_1/StackPushV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/f_count_17"
  op: "Exit"
  input: "gradients/Switch_10"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/b_count_20"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/b_count_21"
  op: "Enter"
  input: "gradients/f_count_17"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/Merge_11"
  op: "Merge"
  input: "gradients/b_count_21"
  input: "gradients/NextIteration_11"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/GreaterEqual_5"
  op: "GreaterEqual"
  input: "gradients/Merge_11"
  input: "gradients/GreaterEqual_5/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/GreaterEqual_5/Enter"
  op: "Enter"
  input: "gradients/b_count_20"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/b_count_22"
  op: "LoopCond"
  input: "gradients/GreaterEqual_5"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Switch_11"
  op: "Switch"
  input: "gradients/Merge_11"
  input: "gradients/b_count_22"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Sub_5"
  op: "Sub"
  input: "gradients/Switch_11:1"
  input: "gradients/GreaterEqual_5/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/NextIteration_11"
  op: "NextIteration"
  input: "gradients/Sub_5"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/b_count_23"
  op: "Exit"
  input: "gradients/Switch_11"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Reshape"
  op: "Reshape"
  input: "gradients/Fill"
  input: "gradients/Mean_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Tile"
  op: "Tile"
  input: "gradients/Mean_grad/Reshape"
  input: "gradients/Mean_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 8.0
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/truediv"
  op: "RealDiv"
  input: "gradients/Mean_grad/Tile"
  input: "gradients/Mean_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_like"
  op: "ZerosLike"
  input: "SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 23
          }
        }
      }
    }
  }
}
node {
  name: "gradients/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits_grad/PreventGradient"
  op: "PreventGradient"
  input: "SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 23
          }
        }
      }
    }
  }
  attr {
    key: "message"
    value {
      s: "Currently there is no way to take the second derivative of sparse_softmax_cross_entropy_with_logits due to the fused implementation\'s interaction with tf.gradients()"
    }
  }
}
node {
  name: "gradients/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits_grad/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits_grad/ExpandDims"
  op: "ExpandDims"
  input: "gradients/Mean_grad/truediv"
  input: "gradients/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits_grad/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits_grad/mul"
  op: "Mul"
  input: "gradients/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits_grad/ExpandDims"
  input: "gradients/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits_grad/PreventGradient"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 23
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Final_Layer/Final_Layer/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits_grad/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 23
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/Final_Layer/Final_Layer/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/Final_Layer/Final_Layer/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits_grad/mul"
}
node {
  name: "gradients/Final_Layer/Final_Layer/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits_grad/mul"
  input: "^gradients/Final_Layer/Final_Layer/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits_grad/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 23
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Final_Layer/Final_Layer/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/Final_Layer/Final_Layer/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/Final_Layer/Final_Layer/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Final_Layer/Final_Layer/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 23
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Final_Layer/Final_Layer/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/Final_Layer/Final_Layer/BiasAdd_grad/tuple/control_dependency"
  input: "Final_Layer/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/Final_Layer/Final_Layer/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "Sum"
  input: "gradients/Final_Layer/Final_Layer/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 23
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Final_Layer/Final_Layer/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/Final_Layer/Final_Layer/MatMul_grad/MatMul"
  input: "^gradients/Final_Layer/Final_Layer/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/Final_Layer/Final_Layer/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/Final_Layer/Final_Layer/MatMul_grad/MatMul"
  input: "^gradients/Final_Layer/Final_Layer/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Final_Layer/Final_Layer/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Final_Layer/Final_Layer/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/Final_Layer/Final_Layer/MatMul_grad/MatMul_1"
  input: "^gradients/Final_Layer/Final_Layer/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Final_Layer/Final_Layer/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 23
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Sum_grad/Shape"
  op: "Shape"
  input: "Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Sum_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "gradients/Sum_grad/add"
  op: "Add"
  input: "Sum/reduction_indices"
  input: "gradients/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Sum_grad/mod"
  op: "FloorMod"
  input: "gradients/Sum_grad/add"
  input: "gradients/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Sum_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Sum_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/Sum_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Sum_grad/range"
  op: "Range"
  input: "gradients/Sum_grad/range/start"
  input: "gradients/Sum_grad/Size"
  input: "gradients/Sum_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Sum_grad/Fill/value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Sum_grad/Fill"
  op: "Fill"
  input: "gradients/Sum_grad/Shape_1"
  input: "gradients/Sum_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Sum_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/Sum_grad/range"
  input: "gradients/Sum_grad/mod"
  input: "gradients/Sum_grad/Shape"
  input: "gradients/Sum_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Sum_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Sum_grad/Maximum"
  op: "Maximum"
  input: "gradients/Sum_grad/DynamicStitch"
  input: "gradients/Sum_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Sum_grad/floordiv"
  op: "FloorDiv"
  input: "gradients/Sum_grad/Shape"
  input: "gradients/Sum_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Sum_grad/Reshape"
  op: "Reshape"
  input: "gradients/Final_Layer/Final_Layer/MatMul_grad/tuple/control_dependency"
  input: "gradients/Sum_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Sum_grad/Tile"
  op: "Tile"
  input: "gradients/Sum_grad/Reshape"
  input: "gradients/Sum_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Select_grad/zeros_like"
  op: "ZerosLike"
  input: "rnn_classification/cell_2/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Select_grad/Select"
  op: "Select"
  input: "Tile"
  input: "gradients/Sum_grad/Tile"
  input: "gradients/Select_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Select_grad/Select_1"
  op: "Select"
  input: "Tile"
  input: "gradients/Select_grad/zeros_like"
  input: "gradients/Sum_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Select_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/Select_grad/Select"
  input: "^gradients/Select_grad/Select_1"
}
node {
  name: "gradients/Select_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/Select_grad/Select"
  input: "^gradients/Select_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Select_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Select_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/Select_grad/Select_1"
  input: "^gradients/Select_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Select_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/concat_grad/Rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/concat_grad/mod"
  op: "FloorMod"
  input: "rnn_classification/cell_2/concat/axis"
  input: "gradients/rnn_classification/cell_2/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/concat_grad/Shape"
  op: "Shape"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/transpose_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/concat_grad/ShapeN"
  op: "ShapeN"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/transpose_1"
  input: "rnn_classification/cell_2/ReverseSequence"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "gradients/rnn_classification/cell_2/concat_grad/mod"
  input: "gradients/rnn_classification/cell_2/concat_grad/ShapeN"
  input: "gradients/rnn_classification/cell_2/concat_grad/ShapeN:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/concat_grad/Slice"
  op: "Slice"
  input: "gradients/Select_grad/tuple/control_dependency"
  input: "gradients/rnn_classification/cell_2/concat_grad/ConcatOffset"
  input: "gradients/rnn_classification/cell_2/concat_grad/ShapeN"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/concat_grad/Slice_1"
  op: "Slice"
  input: "gradients/Select_grad/tuple/control_dependency"
  input: "gradients/rnn_classification/cell_2/concat_grad/ConcatOffset:1"
  input: "gradients/rnn_classification/cell_2/concat_grad/ShapeN:1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/concat_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn_classification/cell_2/concat_grad/Slice"
  input: "^gradients/rnn_classification/cell_2/concat_grad/Slice_1"
}
node {
  name: "gradients/rnn_classification/cell_2/concat_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn_classification/cell_2/concat_grad/Slice"
  input: "^gradients/rnn_classification/cell_2/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_2/concat_grad/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/concat_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn_classification/cell_2/concat_grad/Slice_1"
  input: "^gradients/rnn_classification/cell_2/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_2/concat_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/transpose_1_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/concat_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/transpose_1_grad/transpose"
  op: "Transpose"
  input: "gradients/rnn_classification/cell_2/concat_grad/tuple/control_dependency"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/transpose_1_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/ReverseSequence_grad/ReverseSequence"
  op: "ReverseSequence"
  input: "gradients/rnn_classification/cell_2/concat_grad/tuple/control_dependency_1"
  input: "Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tlen"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "batch_dim"
    value {
      i: 0
    }
  }
  attr {
    key: "seq_dim"
    value {
      i: 1
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/TensorArray"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/fw/fw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients"
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Exit_2"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/fw/fw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/TensorArrayStack/range"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/transpose_1_grad/transpose"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/zeros/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros"
  op: "Fill"
  input: "gradients/zeros/shape_as_tensor"
  input: "gradients/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_1/shape_as_tensor"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/zeros_1/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_1"
  op: "Fill"
  input: "gradients/zeros_1/shape_as_tensor"
  input: "gradients/zeros_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/transpose_1_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/concat_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/transpose_1_grad/transpose"
  op: "Transpose"
  input: "gradients/rnn_classification/cell_2/ReverseSequence_grad/ReverseSequence"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/transpose_1_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Exit_2_grad/b_exit"
  op: "Enter"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Exit_3_grad/b_exit"
  op: "Enter"
  input: "gradients/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Exit_4_grad/b_exit"
  op: "Enter"
  input: "gradients/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/TensorArray"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/bw/bw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients"
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Exit_2"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/bw/bw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/TensorArrayStack/range"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/transpose_1_grad/transpose"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_2/shape_as_tensor"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/zeros_2/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_2"
  op: "Fill"
  input: "gradients/zeros_2/shape_as_tensor"
  input: "gradients/zeros_2/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_3/shape_as_tensor"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/zeros_3/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_3"
  op: "Fill"
  input: "gradients/zeros_3/shape_as_tensor"
  input: "gradients/zeros_3/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Switch_2_grad/b_switch"
  op: "Merge"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Exit_2_grad/b_exit"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Switch_2_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Switch_3_grad/b_switch"
  op: "Merge"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Exit_3_grad/b_exit"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Switch_3_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Switch_4_grad/b_switch"
  op: "Merge"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Exit_4_grad/b_exit"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Switch_4_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Exit_2_grad/b_exit"
  op: "Enter"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Exit_3_grad/b_exit"
  op: "Enter"
  input: "gradients/zeros_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Exit_4_grad/b_exit"
  op: "Enter"
  input: "gradients/zeros_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Merge_2_grad/Switch"
  op: "Switch"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Switch_2_grad/b_switch"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Merge_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Merge_2_grad/Switch"
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Merge_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Merge_2_grad/Switch"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Merge_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Merge_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Merge_2_grad/Switch:1"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Merge_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Merge_3_grad/Switch"
  op: "Switch"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Switch_3_grad/b_switch"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Merge_3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Merge_3_grad/Switch"
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Merge_3_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Merge_3_grad/Switch"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Merge_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Merge_3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Merge_3_grad/Switch:1"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Merge_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Merge_4_grad/Switch"
  op: "Switch"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Switch_4_grad/b_switch"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Switch_4_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Merge_4_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Merge_4_grad/Switch"
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Merge_4_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Merge_4_grad/Switch"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Merge_4_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Switch_4_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Merge_4_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Merge_4_grad/Switch:1"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Merge_4_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Switch_4_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Switch_2_grad/b_switch"
  op: "Merge"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Exit_2_grad/b_exit"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Switch_2_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Switch_3_grad/b_switch"
  op: "Merge"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Exit_3_grad/b_exit"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Switch_3_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Switch_4_grad/b_switch"
  op: "Merge"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Exit_4_grad/b_exit"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Switch_4_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Enter_2_grad/Exit"
  op: "Exit"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Merge_2_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Enter_3_grad/Exit"
  op: "Exit"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Merge_3_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Enter_4_grad/Exit"
  op: "Exit"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Merge_4_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Merge_2_grad/Switch"
  op: "Switch"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Switch_2_grad/b_switch"
  input: "gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Merge_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Merge_2_grad/Switch"
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Merge_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Merge_2_grad/Switch"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Merge_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Merge_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Merge_2_grad/Switch:1"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Merge_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Merge_3_grad/Switch"
  op: "Switch"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Switch_3_grad/b_switch"
  input: "gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Merge_3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Merge_3_grad/Switch"
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Merge_3_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Merge_3_grad/Switch"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Merge_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Merge_3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Merge_3_grad/Switch:1"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Merge_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Merge_4_grad/Switch"
  op: "Switch"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Switch_4_grad/b_switch"
  input: "gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Switch_4_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Merge_4_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Merge_4_grad/Switch"
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Merge_4_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Merge_4_grad/Switch"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Merge_4_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Switch_4_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Merge_4_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Merge_4_grad/Switch:1"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Merge_4_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Switch_4_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Merge_2_grad/tuple/control_dependency_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients"
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Merge_2_grad/tuple/control_dependency_1"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Identity_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  op: "StackV2"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Identity_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  op: "StackPushV2"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Identity_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  op: "StackPopV2"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  op: "ControlTrigger"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/StackPopV2"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul/StackPopV2"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul_1/StackPopV2"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul/StackPopV2"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul_1/StackPopV2"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul/StackPopV2"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul_1/StackPopV2"
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Merge_2_grad/tuple/control_dependency_1"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Merge_2_grad/tuple/control_dependency_1"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Select_1_grad/zeros_like/shape_as_tensor"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Select_1_grad/zeros_like/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Select_1_grad/zeros_like"
  op: "Fill"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Select_1_grad/zeros_like/shape_as_tensor"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Select_1_grad/zeros_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Select_1_grad/Select"
  op: "Select"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/StackPopV2"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Merge_3_grad/tuple/control_dependency_1"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Select_1_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/GreaterEqual"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/f_acc"
  op: "StackV2"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/GreaterEqual"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/Enter"
  op: "Enter"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/StackPushV2"
  op: "StackPushV2"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/Enter"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/GreaterEqual"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/StackPopV2"
  op: "StackPopV2"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Select_1_grad/Select_1"
  op: "Select"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/StackPopV2"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Select_1_grad/zeros_like"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Merge_3_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Select_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Select_1_grad/Select"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Select_1_grad/Select_1"
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Select_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Select_1_grad/Select"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Select_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Select_1_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Select_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Select_1_grad/Select_1"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Select_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Select_1_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Select_2_grad/zeros_like/shape_as_tensor"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Select_2_grad/zeros_like/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Select_2_grad/zeros_like"
  op: "Fill"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Select_2_grad/zeros_like/shape_as_tensor"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Select_2_grad/zeros_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Select_2_grad/Select"
  op: "Select"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/StackPopV2"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Merge_4_grad/tuple/control_dependency_1"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Select_2_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Select_2_grad/Select_1"
  op: "Select"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/StackPopV2"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Select_2_grad/zeros_like"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Merge_4_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Select_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Select_2_grad/Select"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Select_2_grad/Select_1"
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Select_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Select_2_grad/Select"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Select_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Select_2_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Select_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Select_2_grad/Select_1"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Select_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Select_2_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Enter_2_grad/Exit"
  op: "Exit"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Merge_2_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Enter_3_grad/Exit"
  op: "Exit"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Merge_3_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Enter_4_grad/Exit"
  op: "Exit"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Merge_4_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Select_grad/zeros_like/shape_as_tensor"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Select_grad/zeros_like/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Select_grad/zeros_like"
  op: "Fill"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Select_grad/zeros_like/shape_as_tensor"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Select_grad/zeros_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Select_grad/Select"
  op: "Select"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/StackPopV2"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Select_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Select_grad/Select_1"
  op: "Select"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/StackPopV2"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Select_grad/zeros_like"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Select_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Select_grad/Select"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Select_grad/Select_1"
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Select_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Select_grad/Select"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Select_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Select_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Select_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Select_grad/Select_1"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Select_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Select_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Merge_2_grad/tuple/control_dependency_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients"
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Merge_2_grad/tuple/control_dependency_1"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Identity_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  op: "StackV2"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Identity_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  op: "StackPushV2"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Identity_1"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  op: "StackPopV2"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  op: "ControlTrigger"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/StackPopV2"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul/StackPopV2"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul_1/StackPopV2"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul/StackPopV2"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul_1/StackPopV2"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul/StackPopV2"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul_1/StackPopV2"
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Merge_2_grad/tuple/control_dependency_1"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Merge_2_grad/tuple/control_dependency_1"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Select_1_grad/zeros_like/shape_as_tensor"
  op: "Const"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Select_1_grad/zeros_like/Const"
  op: "Const"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Select_1_grad/zeros_like"
  op: "Fill"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Select_1_grad/zeros_like/shape_as_tensor"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Select_1_grad/zeros_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Select_1_grad/Select"
  op: "Select"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/StackPopV2"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Merge_3_grad/tuple/control_dependency_1"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Select_1_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/GreaterEqual"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/f_acc"
  op: "StackV2"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/GreaterEqual"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/Enter"
  op: "Enter"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/StackPushV2"
  op: "StackPushV2"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/Enter"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/GreaterEqual"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/StackPopV2"
  op: "StackPopV2"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/StackPopV2/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Select_1_grad/Select_1"
  op: "Select"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/StackPopV2"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Select_1_grad/zeros_like"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Merge_3_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Select_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Select_1_grad/Select"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Select_1_grad/Select_1"
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Select_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Select_1_grad/Select"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Select_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Select_1_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Select_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Select_1_grad/Select_1"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Select_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Select_1_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Select_2_grad/zeros_like/shape_as_tensor"
  op: "Const"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Select_2_grad/zeros_like/Const"
  op: "Const"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Select_2_grad/zeros_like"
  op: "Fill"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Select_2_grad/zeros_like/shape_as_tensor"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Select_2_grad/zeros_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Select_2_grad/Select"
  op: "Select"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/StackPopV2"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Merge_4_grad/tuple/control_dependency_1"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Select_2_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Select_2_grad/Select_1"
  op: "Select"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/StackPopV2"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Select_2_grad/zeros_like"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Merge_4_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Select_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Select_2_grad/Select"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Select_2_grad/Select_1"
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Select_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Select_2_grad/Select"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Select_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Select_2_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Select_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Select_2_grad/Select_1"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Select_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Select_2_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN"
  op: "AddN"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Select_2_grad/tuple/control_dependency_1"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Select_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Select_2_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul"
  op: "Mul"
  input: "gradients/AddN"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/Tanh_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul/f_acc"
  op: "StackV2"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/Tanh_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul/Enter"
  op: "Enter"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul/Enter"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/Tanh_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul_1"
  op: "Mul"
  input: "gradients/AddN"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul_1/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/Sigmoid_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/Sigmoid_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul_1/Enter"
  op: "Enter"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul_1/Enter"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/Sigmoid_2"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul_1/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul_1"
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul_1"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Switch_2_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Select_grad/zeros_like/shape_as_tensor"
  op: "Const"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Select_grad/zeros_like/Const"
  op: "Const"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Select_grad/zeros_like"
  op: "Fill"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Select_grad/zeros_like/shape_as_tensor"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Select_grad/zeros_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Select_grad/Select"
  op: "Select"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/StackPopV2"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Select_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Select_grad/Select_1"
  op: "Select"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/StackPopV2"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Select_grad/zeros_like"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Select_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Select_grad/Select"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Select_grad/Select_1"
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Select_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Select_grad/Select"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Select_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Select_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Select_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Select_grad/Select_1"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Select_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Select_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/Sigmoid_2_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul_1/StackPopV2"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/Tanh_1_grad/TanhGrad"
  op: "TanhGrad"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul/StackPopV2"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_1"
  op: "AddN"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Select_2_grad/tuple/control_dependency_1"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Select_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Select_2_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul"
  op: "Mul"
  input: "gradients/AddN_1"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/Tanh_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul/f_acc"
  op: "StackV2"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/Tanh_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul/Enter"
  op: "Enter"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul/Enter"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/Tanh_1"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul/StackPopV2/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul_1"
  op: "Mul"
  input: "gradients/AddN_1"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul_1/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/Sigmoid_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/Sigmoid_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul_1/Enter"
  op: "Enter"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul_1/Enter"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/Sigmoid_2"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul_1/StackPopV2/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul_1"
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul_1"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Switch_2_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_2"
  op: "AddN"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Select_1_grad/tuple/control_dependency_1"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/Tanh_1_grad/TanhGrad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Select_1_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/add_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/AddN_2"
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/add_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/AddN_2"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Select_1_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/add_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/AddN_2"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Select_1_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/Sigmoid_2_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul_1/StackPopV2"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/Tanh_1_grad/TanhGrad"
  op: "TanhGrad"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul/StackPopV2"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul"
  op: "Mul"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/add_1_grad/tuple/control_dependency"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Identity_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul/f_acc"
  op: "StackV2"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Identity_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul/Enter"
  op: "Enter"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul/Enter"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Identity_3"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul_1"
  op: "Mul"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/add_1_grad/tuple/control_dependency"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul_1/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/Sigmoid"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/Sigmoid"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul_1/Enter"
  op: "Enter"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul_1/Enter"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/Sigmoid"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul_1/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul_1"
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul_1"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul"
  op: "Mul"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/add_1_grad/tuple/control_dependency_1"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/Tanh"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul/f_acc"
  op: "StackV2"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/Tanh"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul/Enter"
  op: "Enter"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul/Enter"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/Tanh"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul_1"
  op: "Mul"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/add_1_grad/tuple/control_dependency_1"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul_1/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/Sigmoid_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/Sigmoid_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul_1/Enter"
  op: "Enter"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul_1/Enter"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/Sigmoid_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul_1/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul_1"
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul_1"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_3"
  op: "AddN"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Select_1_grad/tuple/control_dependency_1"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/Tanh_1_grad/TanhGrad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Select_1_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/add_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/AddN_3"
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/add_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/AddN_3"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Select_1_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/add_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/AddN_3"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Select_1_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/Sigmoid_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul_1/StackPopV2"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_4"
  op: "AddN"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Select_1_grad/tuple/control_dependency"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Select_1_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/Sigmoid_1_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul_1/StackPopV2"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul/StackPopV2"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul"
  op: "Mul"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/add_1_grad/tuple/control_dependency"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Identity_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul/f_acc"
  op: "StackV2"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Identity_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul/Enter"
  op: "Enter"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul/Enter"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Identity_3"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul/StackPopV2/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul_1"
  op: "Mul"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/add_1_grad/tuple/control_dependency"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul_1/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/Sigmoid"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/Sigmoid"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul_1/Enter"
  op: "Enter"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul_1/Enter"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/Sigmoid"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul_1/StackPopV2/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul_1"
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul_1"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul"
  op: "Mul"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/add_1_grad/tuple/control_dependency_1"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/Tanh"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul/f_acc"
  op: "StackV2"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/Tanh"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul/Enter"
  op: "Enter"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul/Enter"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/Tanh"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul/StackPopV2/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul_1"
  op: "Mul"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/add_1_grad/tuple/control_dependency_1"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul_1/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/Sigmoid_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/Sigmoid_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul_1/Enter"
  op: "Enter"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul_1/Enter"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/Sigmoid_1"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul_1/StackPopV2/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul_1"
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul_1"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/add_grad/Shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/add_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/add_grad/Shape"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/add_grad/Sum"
  op: "Sum"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/Sigmoid_grad/SigmoidGrad"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/add_grad/Reshape"
  op: "Reshape"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/add_grad/Sum"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/add_grad/Sum_1"
  op: "Sum"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/Sigmoid_grad/SigmoidGrad"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/add_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/add_grad/Sum_1"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/add_grad/Reshape"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/add_grad/Reshape_1"
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/add_grad/Reshape"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/add_grad/Reshape_1"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Switch_3_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients/AddN_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/Sigmoid_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul_1/StackPopV2"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_5"
  op: "AddN"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Select_1_grad/tuple/control_dependency"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Select_1_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/Sigmoid_1_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul_1/StackPopV2"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul/StackPopV2"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/split_grad/concat"
  op: "ConcatV2"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/Sigmoid_1_grad/SigmoidGrad"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/Tanh_grad/TanhGrad"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/add_grad/tuple/control_dependency"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/Sigmoid_2_grad/SigmoidGrad"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/split_grad/concat/Const"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/split_grad/concat/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/add_grad/Shape"
  op: "Const"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/add_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/add_grad/Shape"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/add_grad/Sum"
  op: "Sum"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/Sigmoid_grad/SigmoidGrad"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/add_grad/Reshape"
  op: "Reshape"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/add_grad/Sum"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/add_grad/Sum_1"
  op: "Sum"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/Sigmoid_grad/SigmoidGrad"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/add_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/add_grad/Sum_1"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/add_grad/Reshape"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/add_grad/Reshape_1"
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/add_grad/Reshape"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/add_grad/Reshape_1"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Switch_3_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients/AddN_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/split_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/split_grad/concat"
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/split_grad/concat"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/split_grad/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/split_grad/concat"
  op: "ConcatV2"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/Sigmoid_1_grad/SigmoidGrad"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/Tanh_grad/TanhGrad"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/add_grad/tuple/control_dependency"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/Sigmoid_2_grad/SigmoidGrad"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/split_grad/concat/Const"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/split_grad/concat/Const"
  op: "Const"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd_grad/tuple/control_dependency"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 384
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/MatMul_1/Enter"
  op: "Enter"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/MatMul_1/Enter"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/concat"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 384
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/MatMul_1/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 384
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/MatMul"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/MatMul"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 384
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/MatMul_1"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd/Enter_grad/b_acc_1"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd/Enter_grad/b_acc_2"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd/Enter_grad/Add"
  op: "Add"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd/Enter_grad/Switch:1"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/split_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/split_grad/concat"
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/split_grad/concat"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/split_grad/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/Rank"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/mod"
  op: "FloorMod"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/Const"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/Shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/mod"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/Shape"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/Shape_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/Slice"
  op: "Slice"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/tuple/control_dependency"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/ConcatOffset"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/Slice_1"
  op: "Slice"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/tuple/control_dependency"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/ConcatOffset:1"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/Shape_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/Slice"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/Slice_1"
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/Slice"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/Slice_1"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul/Enter_grad/b_acc_1"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul/Enter_grad/b_acc_2"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul/Enter_grad/Add"
  op: "Add"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul/Enter_grad/Switch:1"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd_grad/tuple/control_dependency"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 384
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/MatMul_1/Enter"
  op: "Enter"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/MatMul_1/Enter"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/concat"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 384
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/MatMul_1/StackPopV2/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 384
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/MatMul"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/MatMul"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 384
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/MatMul_1"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd/Enter_grad/b_acc_1"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd/Enter_grad/b_acc_2"
  input: "gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd/Enter_grad/Add"
  op: "Add"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd/Enter_grad/Switch:1"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients"
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  op: "Enter"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/tuple/control_dependency"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_6"
  op: "AddN"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Select_2_grad/tuple/control_dependency"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Select_2_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/Const"
  op: "Const"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/Rank"
  op: "Const"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/mod"
  op: "FloorMod"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/Const"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/Shape"
  op: "Const"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/mod"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/Shape"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/Shape_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/Slice"
  op: "Slice"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/tuple/control_dependency"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/ConcatOffset"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/Slice_1"
  op: "Slice"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/tuple/control_dependency"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/ConcatOffset:1"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/Shape_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/Slice"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/Slice_1"
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/Slice"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/Slice_1"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul/Enter_grad/b_acc_1"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul/Enter_grad/b_acc_2"
  input: "gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul/Enter_grad/Add"
  op: "Add"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul/Enter_grad/Switch:1"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  op: "Enter"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  op: "Merge"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/Switch"
  op: "Switch"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/Add"
  op: "Add"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/Switch:1"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  op: "Exit"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/Switch_4_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients/AddN_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients"
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  op: "Enter"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/tuple/control_dependency"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_7"
  op: "AddN"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Select_2_grad/tuple/control_dependency"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Select_2_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/TensorArray_1"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/fw/fw/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients"
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/fw/fw/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/TensorArrayUnstack/range"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  op: "Enter"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  op: "Merge"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/Switch"
  op: "Switch"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  input: "gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/Add"
  op: "Add"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/Switch:1"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  op: "Exit"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/Switch_4_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients/AddN_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/transpose_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/fw/concat"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/transpose_grad/transpose"
  op: "Transpose"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/control_dependency"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/transpose_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/TensorArray_1"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/bw/bw/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients"
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/bw/bw/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/TensorArrayUnstack/range"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  input: "^gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/transpose_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/bw/concat"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/transpose_grad/transpose"
  op: "Transpose"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/control_dependency"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/transpose_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/ReverseSequence_grad/ReverseSequence"
  op: "ReverseSequence"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/transpose_grad/transpose"
  input: "Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tlen"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "batch_dim"
    value {
      i: 0
    }
  }
  attr {
    key: "seq_dim"
    value {
      i: 1
    }
  }
}
node {
  name: "gradients/AddN_8"
  op: "AddN"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/transpose_grad/transpose"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/ReverseSequence_grad/ReverseSequence"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/transpose_grad/transpose"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/concat_grad/Rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/concat_grad/mod"
  op: "FloorMod"
  input: "rnn_classification/cell_1/concat/axis"
  input: "gradients/rnn_classification/cell_1/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/concat_grad/Shape"
  op: "Shape"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/transpose_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/concat_grad/ShapeN"
  op: "ShapeN"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/transpose_1"
  input: "rnn_classification/cell_1/ReverseSequence"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "gradients/rnn_classification/cell_1/concat_grad/mod"
  input: "gradients/rnn_classification/cell_1/concat_grad/ShapeN"
  input: "gradients/rnn_classification/cell_1/concat_grad/ShapeN:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/concat_grad/Slice"
  op: "Slice"
  input: "gradients/AddN_8"
  input: "gradients/rnn_classification/cell_1/concat_grad/ConcatOffset"
  input: "gradients/rnn_classification/cell_1/concat_grad/ShapeN"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/concat_grad/Slice_1"
  op: "Slice"
  input: "gradients/AddN_8"
  input: "gradients/rnn_classification/cell_1/concat_grad/ConcatOffset:1"
  input: "gradients/rnn_classification/cell_1/concat_grad/ShapeN:1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/concat_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn_classification/cell_1/concat_grad/Slice"
  input: "^gradients/rnn_classification/cell_1/concat_grad/Slice_1"
}
node {
  name: "gradients/rnn_classification/cell_1/concat_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn_classification/cell_1/concat_grad/Slice"
  input: "^gradients/rnn_classification/cell_1/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_1/concat_grad/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/concat_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn_classification/cell_1/concat_grad/Slice_1"
  input: "^gradients/rnn_classification/cell_1/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_1/concat_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/transpose_1_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/concat_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/transpose_1_grad/transpose"
  op: "Transpose"
  input: "gradients/rnn_classification/cell_1/concat_grad/tuple/control_dependency"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/transpose_1_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/ReverseSequence_grad/ReverseSequence"
  op: "ReverseSequence"
  input: "gradients/rnn_classification/cell_1/concat_grad/tuple/control_dependency_1"
  input: "Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tlen"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "batch_dim"
    value {
      i: 0
    }
  }
  attr {
    key: "seq_dim"
    value {
      i: 1
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/TensorArray"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/fw/fw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients"
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Exit_2"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/fw/fw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/TensorArrayStack/range"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/transpose_1_grad/transpose"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_4/shape_as_tensor"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/zeros_4/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_4"
  op: "Fill"
  input: "gradients/zeros_4/shape_as_tensor"
  input: "gradients/zeros_4/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_5/shape_as_tensor"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/zeros_5/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_5"
  op: "Fill"
  input: "gradients/zeros_5/shape_as_tensor"
  input: "gradients/zeros_5/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/transpose_1_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/concat_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/transpose_1_grad/transpose"
  op: "Transpose"
  input: "gradients/rnn_classification/cell_1/ReverseSequence_grad/ReverseSequence"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/transpose_1_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Exit_2_grad/b_exit"
  op: "Enter"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Exit_3_grad/b_exit"
  op: "Enter"
  input: "gradients/zeros_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Exit_4_grad/b_exit"
  op: "Enter"
  input: "gradients/zeros_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/TensorArray"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/bw/bw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients"
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Exit_2"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/bw/bw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/TensorArrayStack/range"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/transpose_1_grad/transpose"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_6/shape_as_tensor"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/zeros_6/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_6"
  op: "Fill"
  input: "gradients/zeros_6/shape_as_tensor"
  input: "gradients/zeros_6/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_7/shape_as_tensor"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/zeros_7/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_7"
  op: "Fill"
  input: "gradients/zeros_7/shape_as_tensor"
  input: "gradients/zeros_7/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Switch_2_grad/b_switch"
  op: "Merge"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Exit_2_grad/b_exit"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Switch_2_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Switch_3_grad/b_switch"
  op: "Merge"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Exit_3_grad/b_exit"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Switch_3_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Switch_4_grad/b_switch"
  op: "Merge"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Exit_4_grad/b_exit"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Switch_4_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Exit_2_grad/b_exit"
  op: "Enter"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Exit_3_grad/b_exit"
  op: "Enter"
  input: "gradients/zeros_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Exit_4_grad/b_exit"
  op: "Enter"
  input: "gradients/zeros_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Merge_2_grad/Switch"
  op: "Switch"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Switch_2_grad/b_switch"
  input: "gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Merge_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Merge_2_grad/Switch"
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Merge_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Merge_2_grad/Switch"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Merge_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Merge_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Merge_2_grad/Switch:1"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Merge_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Merge_3_grad/Switch"
  op: "Switch"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Switch_3_grad/b_switch"
  input: "gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Merge_3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Merge_3_grad/Switch"
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Merge_3_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Merge_3_grad/Switch"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Merge_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Merge_3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Merge_3_grad/Switch:1"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Merge_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Merge_4_grad/Switch"
  op: "Switch"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Switch_4_grad/b_switch"
  input: "gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Switch_4_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Merge_4_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Merge_4_grad/Switch"
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Merge_4_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Merge_4_grad/Switch"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Merge_4_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Switch_4_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Merge_4_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Merge_4_grad/Switch:1"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Merge_4_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Switch_4_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Switch_2_grad/b_switch"
  op: "Merge"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Exit_2_grad/b_exit"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Switch_2_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Switch_3_grad/b_switch"
  op: "Merge"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Exit_3_grad/b_exit"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Switch_3_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Switch_4_grad/b_switch"
  op: "Merge"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Exit_4_grad/b_exit"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Switch_4_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Enter_2_grad/Exit"
  op: "Exit"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Merge_2_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Enter_3_grad/Exit"
  op: "Exit"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Merge_3_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Enter_4_grad/Exit"
  op: "Exit"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Merge_4_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Merge_2_grad/Switch"
  op: "Switch"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Switch_2_grad/b_switch"
  input: "gradients/b_count_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Merge_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Merge_2_grad/Switch"
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Merge_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Merge_2_grad/Switch"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Merge_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Merge_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Merge_2_grad/Switch:1"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Merge_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Merge_3_grad/Switch"
  op: "Switch"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Switch_3_grad/b_switch"
  input: "gradients/b_count_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Merge_3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Merge_3_grad/Switch"
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Merge_3_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Merge_3_grad/Switch"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Merge_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Merge_3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Merge_3_grad/Switch:1"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Merge_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Merge_4_grad/Switch"
  op: "Switch"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Switch_4_grad/b_switch"
  input: "gradients/b_count_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Switch_4_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Merge_4_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Merge_4_grad/Switch"
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Merge_4_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Merge_4_grad/Switch"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Merge_4_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Switch_4_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Merge_4_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Merge_4_grad/Switch:1"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Merge_4_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Switch_4_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Merge_2_grad/tuple/control_dependency_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients"
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Merge_2_grad/tuple/control_dependency_1"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Identity_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  op: "StackV2"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Identity_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  op: "StackPushV2"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Identity_1"
  input: "^gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  op: "StackPopV2"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  input: "^gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  op: "ControlTrigger"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/StackPopV2"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul/StackPopV2"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul_1/StackPopV2"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul/StackPopV2"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul_1/StackPopV2"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul/StackPopV2"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul_1/StackPopV2"
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Merge_2_grad/tuple/control_dependency_1"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Merge_2_grad/tuple/control_dependency_1"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Select_1_grad/zeros_like/shape_as_tensor"
  op: "Const"
  input: "^gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Select_1_grad/zeros_like/Const"
  op: "Const"
  input: "^gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Select_1_grad/zeros_like"
  op: "Fill"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Select_1_grad/zeros_like/shape_as_tensor"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Select_1_grad/zeros_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Select_1_grad/Select"
  op: "Select"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/StackPopV2"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Merge_3_grad/tuple/control_dependency_1"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Select_1_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/GreaterEqual"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/f_acc"
  op: "StackV2"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/GreaterEqual"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/Enter"
  op: "Enter"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/StackPushV2"
  op: "StackPushV2"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/Enter"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/GreaterEqual"
  input: "^gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/StackPopV2"
  op: "StackPopV2"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/StackPopV2/Enter"
  input: "^gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Select_1_grad/Select_1"
  op: "Select"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/StackPopV2"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Select_1_grad/zeros_like"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Merge_3_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Select_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Select_1_grad/Select"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Select_1_grad/Select_1"
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Select_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Select_1_grad/Select"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Select_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Select_1_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Select_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Select_1_grad/Select_1"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Select_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Select_1_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Select_2_grad/zeros_like/shape_as_tensor"
  op: "Const"
  input: "^gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Select_2_grad/zeros_like/Const"
  op: "Const"
  input: "^gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Select_2_grad/zeros_like"
  op: "Fill"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Select_2_grad/zeros_like/shape_as_tensor"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Select_2_grad/zeros_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Select_2_grad/Select"
  op: "Select"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/StackPopV2"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Merge_4_grad/tuple/control_dependency_1"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Select_2_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Select_2_grad/Select_1"
  op: "Select"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/StackPopV2"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Select_2_grad/zeros_like"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Merge_4_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Select_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Select_2_grad/Select"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Select_2_grad/Select_1"
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Select_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Select_2_grad/Select"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Select_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Select_2_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Select_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Select_2_grad/Select_1"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Select_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Select_2_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Enter_2_grad/Exit"
  op: "Exit"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Merge_2_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Enter_3_grad/Exit"
  op: "Exit"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Merge_3_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Enter_4_grad/Exit"
  op: "Exit"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Merge_4_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Select_grad/zeros_like/shape_as_tensor"
  op: "Const"
  input: "^gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Select_grad/zeros_like/Const"
  op: "Const"
  input: "^gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Select_grad/zeros_like"
  op: "Fill"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Select_grad/zeros_like/shape_as_tensor"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Select_grad/zeros_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Select_grad/Select"
  op: "Select"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/StackPopV2"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Select_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Select_grad/Select_1"
  op: "Select"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/StackPopV2"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Select_grad/zeros_like"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Select_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Select_grad/Select"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Select_grad/Select_1"
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Select_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Select_grad/Select"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Select_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Select_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Select_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Select_grad/Select_1"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Select_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Select_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Merge_2_grad/tuple/control_dependency_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients"
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Merge_2_grad/tuple/control_dependency_1"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Identity_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  op: "StackV2"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Identity_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  op: "StackPushV2"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Identity_1"
  input: "^gradients/Add_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  op: "StackPopV2"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  input: "^gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  op: "ControlTrigger"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/StackPopV2"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul/StackPopV2"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul_1/StackPopV2"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul/StackPopV2"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul_1/StackPopV2"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul/StackPopV2"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul_1/StackPopV2"
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Merge_2_grad/tuple/control_dependency_1"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Merge_2_grad/tuple/control_dependency_1"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Select_1_grad/zeros_like/shape_as_tensor"
  op: "Const"
  input: "^gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Select_1_grad/zeros_like/Const"
  op: "Const"
  input: "^gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Select_1_grad/zeros_like"
  op: "Fill"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Select_1_grad/zeros_like/shape_as_tensor"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Select_1_grad/zeros_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Select_1_grad/Select"
  op: "Select"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/StackPopV2"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Merge_3_grad/tuple/control_dependency_1"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Select_1_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/GreaterEqual"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/f_acc"
  op: "StackV2"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/GreaterEqual"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/Enter"
  op: "Enter"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/StackPushV2"
  op: "StackPushV2"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/Enter"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/GreaterEqual"
  input: "^gradients/Add_3"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/StackPopV2"
  op: "StackPopV2"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/StackPopV2/Enter"
  input: "^gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Select_1_grad/Select_1"
  op: "Select"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/StackPopV2"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Select_1_grad/zeros_like"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Merge_3_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Select_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Select_1_grad/Select"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Select_1_grad/Select_1"
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Select_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Select_1_grad/Select"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Select_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Select_1_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Select_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Select_1_grad/Select_1"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Select_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Select_1_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Select_2_grad/zeros_like/shape_as_tensor"
  op: "Const"
  input: "^gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Select_2_grad/zeros_like/Const"
  op: "Const"
  input: "^gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Select_2_grad/zeros_like"
  op: "Fill"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Select_2_grad/zeros_like/shape_as_tensor"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Select_2_grad/zeros_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Select_2_grad/Select"
  op: "Select"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/StackPopV2"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Merge_4_grad/tuple/control_dependency_1"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Select_2_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Select_2_grad/Select_1"
  op: "Select"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/StackPopV2"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Select_2_grad/zeros_like"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Merge_4_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Select_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Select_2_grad/Select"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Select_2_grad/Select_1"
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Select_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Select_2_grad/Select"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Select_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Select_2_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Select_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Select_2_grad/Select_1"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Select_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Select_2_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_9"
  op: "AddN"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Select_2_grad/tuple/control_dependency_1"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Select_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Select_2_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul"
  op: "Mul"
  input: "gradients/AddN_9"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/Tanh_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul/f_acc"
  op: "StackV2"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/Tanh_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul/Enter"
  op: "Enter"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul/Enter"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/Tanh_1"
  input: "^gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul/StackPopV2/Enter"
  input: "^gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul_1"
  op: "Mul"
  input: "gradients/AddN_9"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul_1/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/Sigmoid_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/Sigmoid_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul_1/Enter"
  op: "Enter"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul_1/Enter"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/Sigmoid_2"
  input: "^gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul_1/StackPopV2/Enter"
  input: "^gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul_1"
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul_1"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Switch_2_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Select_grad/zeros_like/shape_as_tensor"
  op: "Const"
  input: "^gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Select_grad/zeros_like/Const"
  op: "Const"
  input: "^gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Select_grad/zeros_like"
  op: "Fill"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Select_grad/zeros_like/shape_as_tensor"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Select_grad/zeros_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Select_grad/Select"
  op: "Select"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/StackPopV2"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Select_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Select_grad/Select_1"
  op: "Select"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/StackPopV2"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Select_grad/zeros_like"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Select_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Select_grad/Select"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Select_grad/Select_1"
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Select_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Select_grad/Select"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Select_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Select_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Select_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Select_grad/Select_1"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Select_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Select_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/Sigmoid_2_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul_1/StackPopV2"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/Tanh_1_grad/TanhGrad"
  op: "TanhGrad"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul/StackPopV2"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_10"
  op: "AddN"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Select_2_grad/tuple/control_dependency_1"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Select_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Select_2_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul"
  op: "Mul"
  input: "gradients/AddN_10"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/Tanh_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul/f_acc"
  op: "StackV2"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/Tanh_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul/Enter"
  op: "Enter"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul/Enter"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/Tanh_1"
  input: "^gradients/Add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul/StackPopV2/Enter"
  input: "^gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul_1"
  op: "Mul"
  input: "gradients/AddN_10"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul_1/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/Sigmoid_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/Sigmoid_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul_1/Enter"
  op: "Enter"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul_1/Enter"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/Sigmoid_2"
  input: "^gradients/Add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul_1/StackPopV2/Enter"
  input: "^gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul_1"
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul_1"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Switch_2_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_11"
  op: "AddN"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Select_1_grad/tuple/control_dependency_1"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/Tanh_1_grad/TanhGrad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Select_1_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/add_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/AddN_11"
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/add_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/AddN_11"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Select_1_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/add_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/AddN_11"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Select_1_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/Sigmoid_2_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul_1/StackPopV2"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/Tanh_1_grad/TanhGrad"
  op: "TanhGrad"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul/StackPopV2"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul"
  op: "Mul"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/add_1_grad/tuple/control_dependency"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Identity_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul/f_acc"
  op: "StackV2"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Identity_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul/Enter"
  op: "Enter"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul/Enter"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Identity_3"
  input: "^gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul/StackPopV2/Enter"
  input: "^gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul_1"
  op: "Mul"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/add_1_grad/tuple/control_dependency"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul_1/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/Sigmoid"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/Sigmoid"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul_1/Enter"
  op: "Enter"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul_1/Enter"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/Sigmoid"
  input: "^gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul_1/StackPopV2/Enter"
  input: "^gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul_1"
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul_1"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul"
  op: "Mul"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/add_1_grad/tuple/control_dependency_1"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/Tanh"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul/f_acc"
  op: "StackV2"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/Tanh"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul/Enter"
  op: "Enter"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul/Enter"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/Tanh"
  input: "^gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul/StackPopV2/Enter"
  input: "^gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul_1"
  op: "Mul"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/add_1_grad/tuple/control_dependency_1"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul_1/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/Sigmoid_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/Sigmoid_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul_1/Enter"
  op: "Enter"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul_1/Enter"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/Sigmoid_1"
  input: "^gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul_1/StackPopV2/Enter"
  input: "^gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul_1"
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul_1"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_12"
  op: "AddN"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Select_1_grad/tuple/control_dependency_1"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/Tanh_1_grad/TanhGrad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Select_1_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/add_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/AddN_12"
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/add_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/AddN_12"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Select_1_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/add_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/AddN_12"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Select_1_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/Sigmoid_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul_1/StackPopV2"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_13"
  op: "AddN"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Select_1_grad/tuple/control_dependency"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Select_1_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/Sigmoid_1_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul_1/StackPopV2"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul/StackPopV2"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul"
  op: "Mul"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/add_1_grad/tuple/control_dependency"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Identity_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul/f_acc"
  op: "StackV2"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Identity_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul/Enter"
  op: "Enter"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul/Enter"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Identity_3"
  input: "^gradients/Add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul/StackPopV2/Enter"
  input: "^gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul_1"
  op: "Mul"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/add_1_grad/tuple/control_dependency"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul_1/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/Sigmoid"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/Sigmoid"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul_1/Enter"
  op: "Enter"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul_1/Enter"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/Sigmoid"
  input: "^gradients/Add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul_1/StackPopV2/Enter"
  input: "^gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul_1"
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul_1"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul"
  op: "Mul"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/add_1_grad/tuple/control_dependency_1"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/Tanh"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul/f_acc"
  op: "StackV2"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/Tanh"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul/Enter"
  op: "Enter"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul/Enter"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/Tanh"
  input: "^gradients/Add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul/StackPopV2/Enter"
  input: "^gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul_1"
  op: "Mul"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/add_1_grad/tuple/control_dependency_1"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul_1/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/Sigmoid_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/Sigmoid_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul_1/Enter"
  op: "Enter"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul_1/Enter"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/Sigmoid_1"
  input: "^gradients/Add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul_1/StackPopV2/Enter"
  input: "^gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul_1"
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul_1"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/add_grad/Shape"
  op: "Const"
  input: "^gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/add_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/add_grad/Shape"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/add_grad/Sum"
  op: "Sum"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/Sigmoid_grad/SigmoidGrad"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/add_grad/Reshape"
  op: "Reshape"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/add_grad/Sum"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/add_grad/Sum_1"
  op: "Sum"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/Sigmoid_grad/SigmoidGrad"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/add_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/add_grad/Sum_1"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/add_grad/Reshape"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/add_grad/Reshape_1"
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/add_grad/Reshape"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/add_grad/Reshape_1"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Switch_3_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients/AddN_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/Sigmoid_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul_1/StackPopV2"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_14"
  op: "AddN"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Select_1_grad/tuple/control_dependency"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Select_1_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/Sigmoid_1_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul_1/StackPopV2"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul/StackPopV2"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/split_grad/concat"
  op: "ConcatV2"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/Sigmoid_1_grad/SigmoidGrad"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/Tanh_grad/TanhGrad"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/add_grad/tuple/control_dependency"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/Sigmoid_2_grad/SigmoidGrad"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/split_grad/concat/Const"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/split_grad/concat/Const"
  op: "Const"
  input: "^gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/add_grad/Shape"
  op: "Const"
  input: "^gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/add_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/add_grad/Shape"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/add_grad/Sum"
  op: "Sum"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/Sigmoid_grad/SigmoidGrad"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/add_grad/Reshape"
  op: "Reshape"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/add_grad/Sum"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/add_grad/Sum_1"
  op: "Sum"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/Sigmoid_grad/SigmoidGrad"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/add_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/add_grad/Sum_1"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/add_grad/Reshape"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/add_grad/Reshape_1"
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/add_grad/Reshape"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/add_grad/Reshape_1"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Switch_3_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients/AddN_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/split_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/split_grad/concat"
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/split_grad/concat"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/split_grad/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/split_grad/concat"
  op: "ConcatV2"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/Sigmoid_1_grad/SigmoidGrad"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/Tanh_grad/TanhGrad"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/add_grad/tuple/control_dependency"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/Sigmoid_2_grad/SigmoidGrad"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/split_grad/concat/Const"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/split_grad/concat/Const"
  op: "Const"
  input: "^gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd_grad/tuple/control_dependency"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 384
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/MatMul_1/Enter"
  op: "Enter"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/MatMul_1/Enter"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/concat"
  input: "^gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 384
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/MatMul_1/StackPopV2/Enter"
  input: "^gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 384
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/MatMul"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/MatMul"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 384
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/MatMul_1"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd/Enter_grad/b_acc_1"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd/Enter_grad/b_acc_2"
  input: "gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd/Enter_grad/Add"
  op: "Add"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd/Enter_grad/Switch:1"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/split_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/split_grad/concat"
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/split_grad/concat"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/split_grad/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/Const"
  op: "Const"
  input: "^gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/Rank"
  op: "Const"
  input: "^gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/mod"
  op: "FloorMod"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/Const"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/Shape"
  op: "Const"
  input: "^gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/mod"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/Shape"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/Shape_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/Slice"
  op: "Slice"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/tuple/control_dependency"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/ConcatOffset"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/Slice_1"
  op: "Slice"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/tuple/control_dependency"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/ConcatOffset:1"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/Shape_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/Slice"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/Slice_1"
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/Slice"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/Slice_1"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul/Enter_grad/b_acc_1"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul/Enter_grad/b_acc_2"
  input: "gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul/Enter_grad/Add"
  op: "Add"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul/Enter_grad/Switch:1"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd_grad/tuple/control_dependency"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 384
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/MatMul_1/Enter"
  op: "Enter"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/MatMul_1/Enter"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/concat"
  input: "^gradients/Add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 384
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/MatMul_1/StackPopV2/Enter"
  input: "^gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 384
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/MatMul"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/MatMul"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 384
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/MatMul_1"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd/Enter_grad/b_acc_1"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd/Enter_grad/b_acc_2"
  input: "gradients/b_count_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd/Enter_grad/Add"
  op: "Add"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd/Enter_grad/Switch:1"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients"
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  op: "Enter"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/tuple/control_dependency"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_15"
  op: "AddN"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Select_2_grad/tuple/control_dependency"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Select_2_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/Const"
  op: "Const"
  input: "^gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/Rank"
  op: "Const"
  input: "^gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/mod"
  op: "FloorMod"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/Const"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/Shape"
  op: "Const"
  input: "^gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/mod"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/Shape"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/Shape_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/Slice"
  op: "Slice"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/tuple/control_dependency"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/ConcatOffset"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/Slice_1"
  op: "Slice"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/tuple/control_dependency"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/ConcatOffset:1"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/Shape_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/Slice"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/Slice_1"
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/Slice"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/Slice_1"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul/Enter_grad/b_acc_1"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul/Enter_grad/b_acc_2"
  input: "gradients/b_count_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul/Enter_grad/Add"
  op: "Add"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul/Enter_grad/Switch:1"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  op: "Enter"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  op: "Merge"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/Switch"
  op: "Switch"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  input: "gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/Add"
  op: "Add"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/Switch:1"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  op: "Exit"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/Switch_4_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients/AddN_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^gradients/Sub_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients"
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  op: "Enter"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/tuple/control_dependency"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_16"
  op: "AddN"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Select_2_grad/tuple/control_dependency"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Select_2_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/TensorArray_1"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/fw/fw/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients"
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/fw/fw/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/range"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  op: "Enter"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  op: "Merge"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/Switch"
  op: "Switch"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  input: "gradients/b_count_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/Add"
  op: "Add"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/Switch:1"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  op: "Exit"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/Switch_4_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients/AddN_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/transpose_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/fw/concat"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/transpose_grad/transpose"
  op: "Transpose"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/control_dependency"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/transpose_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/TensorArray_1"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/bw/bw/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients"
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/bw/bw/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/range"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  input: "^gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/transpose_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/bw/concat"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/transpose_grad/transpose"
  op: "Transpose"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/control_dependency"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/transpose_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/ReverseSequence_grad/ReverseSequence"
  op: "ReverseSequence"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/transpose_grad/transpose"
  input: "Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tlen"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "batch_dim"
    value {
      i: 0
    }
  }
  attr {
    key: "seq_dim"
    value {
      i: 1
    }
  }
}
node {
  name: "gradients/AddN_17"
  op: "AddN"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/transpose_grad/transpose"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/ReverseSequence_grad/ReverseSequence"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/transpose_grad/transpose"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/concat_grad/Rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/concat_grad/mod"
  op: "FloorMod"
  input: "rnn_classification/cell_0/concat/axis"
  input: "gradients/rnn_classification/cell_0/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/concat_grad/Shape"
  op: "Shape"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/transpose_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/concat_grad/ShapeN"
  op: "ShapeN"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/transpose_1"
  input: "rnn_classification/cell_0/ReverseSequence"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "gradients/rnn_classification/cell_0/concat_grad/mod"
  input: "gradients/rnn_classification/cell_0/concat_grad/ShapeN"
  input: "gradients/rnn_classification/cell_0/concat_grad/ShapeN:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/concat_grad/Slice"
  op: "Slice"
  input: "gradients/AddN_17"
  input: "gradients/rnn_classification/cell_0/concat_grad/ConcatOffset"
  input: "gradients/rnn_classification/cell_0/concat_grad/ShapeN"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/concat_grad/Slice_1"
  op: "Slice"
  input: "gradients/AddN_17"
  input: "gradients/rnn_classification/cell_0/concat_grad/ConcatOffset:1"
  input: "gradients/rnn_classification/cell_0/concat_grad/ShapeN:1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/concat_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn_classification/cell_0/concat_grad/Slice"
  input: "^gradients/rnn_classification/cell_0/concat_grad/Slice_1"
}
node {
  name: "gradients/rnn_classification/cell_0/concat_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn_classification/cell_0/concat_grad/Slice"
  input: "^gradients/rnn_classification/cell_0/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_0/concat_grad/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/concat_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn_classification/cell_0/concat_grad/Slice_1"
  input: "^gradients/rnn_classification/cell_0/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_0/concat_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/transpose_1_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/concat_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/transpose_1_grad/transpose"
  op: "Transpose"
  input: "gradients/rnn_classification/cell_0/concat_grad/tuple/control_dependency"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/transpose_1_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/ReverseSequence_grad/ReverseSequence"
  op: "ReverseSequence"
  input: "gradients/rnn_classification/cell_0/concat_grad/tuple/control_dependency_1"
  input: "Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tlen"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "batch_dim"
    value {
      i: 0
    }
  }
  attr {
    key: "seq_dim"
    value {
      i: 1
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/TensorArray"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/fw/fw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients"
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Exit_2"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/fw/fw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/TensorArrayStack/range"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/transpose_1_grad/transpose"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_8/shape_as_tensor"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/zeros_8/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_8"
  op: "Fill"
  input: "gradients/zeros_8/shape_as_tensor"
  input: "gradients/zeros_8/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_9/shape_as_tensor"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/zeros_9/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_9"
  op: "Fill"
  input: "gradients/zeros_9/shape_as_tensor"
  input: "gradients/zeros_9/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/transpose_1_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/concat_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/transpose_1_grad/transpose"
  op: "Transpose"
  input: "gradients/rnn_classification/cell_0/ReverseSequence_grad/ReverseSequence"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/transpose_1_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Exit_2_grad/b_exit"
  op: "Enter"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Exit_3_grad/b_exit"
  op: "Enter"
  input: "gradients/zeros_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Exit_4_grad/b_exit"
  op: "Enter"
  input: "gradients/zeros_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/TensorArray"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/bw/bw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients"
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Exit_2"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/bw/bw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/TensorArrayStack/range"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/transpose_1_grad/transpose"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_10/shape_as_tensor"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/zeros_10/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_10"
  op: "Fill"
  input: "gradients/zeros_10/shape_as_tensor"
  input: "gradients/zeros_10/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_11/shape_as_tensor"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/zeros_11/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_11"
  op: "Fill"
  input: "gradients/zeros_11/shape_as_tensor"
  input: "gradients/zeros_11/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Switch_2_grad/b_switch"
  op: "Merge"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Exit_2_grad/b_exit"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Switch_2_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Switch_3_grad/b_switch"
  op: "Merge"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Exit_3_grad/b_exit"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Switch_3_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Switch_4_grad/b_switch"
  op: "Merge"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Exit_4_grad/b_exit"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Switch_4_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Exit_2_grad/b_exit"
  op: "Enter"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Exit_3_grad/b_exit"
  op: "Enter"
  input: "gradients/zeros_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Exit_4_grad/b_exit"
  op: "Enter"
  input: "gradients/zeros_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Merge_2_grad/Switch"
  op: "Switch"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Switch_2_grad/b_switch"
  input: "gradients/b_count_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Merge_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Merge_2_grad/Switch"
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Merge_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Merge_2_grad/Switch"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Merge_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Merge_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Merge_2_grad/Switch:1"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Merge_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Merge_3_grad/Switch"
  op: "Switch"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Switch_3_grad/b_switch"
  input: "gradients/b_count_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Merge_3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Merge_3_grad/Switch"
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Merge_3_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Merge_3_grad/Switch"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Merge_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Merge_3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Merge_3_grad/Switch:1"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Merge_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Merge_4_grad/Switch"
  op: "Switch"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Switch_4_grad/b_switch"
  input: "gradients/b_count_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Switch_4_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Merge_4_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Merge_4_grad/Switch"
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Merge_4_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Merge_4_grad/Switch"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Merge_4_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Switch_4_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Merge_4_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Merge_4_grad/Switch:1"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Merge_4_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Switch_4_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Switch_2_grad/b_switch"
  op: "Merge"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Exit_2_grad/b_exit"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Switch_2_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Switch_3_grad/b_switch"
  op: "Merge"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Exit_3_grad/b_exit"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Switch_3_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Switch_4_grad/b_switch"
  op: "Merge"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Exit_4_grad/b_exit"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Switch_4_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Enter_2_grad/Exit"
  op: "Exit"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Merge_2_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Enter_3_grad/Exit"
  op: "Exit"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Merge_3_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Enter_4_grad/Exit"
  op: "Exit"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Merge_4_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Merge_2_grad/Switch"
  op: "Switch"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Switch_2_grad/b_switch"
  input: "gradients/b_count_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Merge_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Merge_2_grad/Switch"
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Merge_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Merge_2_grad/Switch"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Merge_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Merge_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Merge_2_grad/Switch:1"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Merge_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Merge_3_grad/Switch"
  op: "Switch"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Switch_3_grad/b_switch"
  input: "gradients/b_count_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Merge_3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Merge_3_grad/Switch"
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Merge_3_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Merge_3_grad/Switch"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Merge_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Merge_3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Merge_3_grad/Switch:1"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Merge_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Merge_4_grad/Switch"
  op: "Switch"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Switch_4_grad/b_switch"
  input: "gradients/b_count_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Switch_4_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Merge_4_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Merge_4_grad/Switch"
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Merge_4_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Merge_4_grad/Switch"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Merge_4_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Switch_4_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Merge_4_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Merge_4_grad/Switch:1"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Merge_4_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Switch_4_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Merge_2_grad/tuple/control_dependency_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients"
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Merge_2_grad/tuple/control_dependency_1"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Identity_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  op: "StackV2"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Identity_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  op: "StackPushV2"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Identity_1"
  input: "^gradients/Add_4"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  op: "StackPopV2"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  input: "^gradients/Sub_4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  op: "ControlTrigger"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/StackPopV2"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul/StackPopV2"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul_1/StackPopV2"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul/StackPopV2"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul_1/StackPopV2"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul/StackPopV2"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul_1/StackPopV2"
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Merge_2_grad/tuple/control_dependency_1"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Merge_2_grad/tuple/control_dependency_1"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Select_1_grad/zeros_like/shape_as_tensor"
  op: "Const"
  input: "^gradients/Sub_4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Select_1_grad/zeros_like/Const"
  op: "Const"
  input: "^gradients/Sub_4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Select_1_grad/zeros_like"
  op: "Fill"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Select_1_grad/zeros_like/shape_as_tensor"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Select_1_grad/zeros_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Select_1_grad/Select"
  op: "Select"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/StackPopV2"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Merge_3_grad/tuple/control_dependency_1"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Select_1_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/GreaterEqual"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/f_acc"
  op: "StackV2"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/GreaterEqual"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/Enter"
  op: "Enter"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/StackPushV2"
  op: "StackPushV2"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/Enter"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/GreaterEqual"
  input: "^gradients/Add_4"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/StackPopV2"
  op: "StackPopV2"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/StackPopV2/Enter"
  input: "^gradients/Sub_4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Select_1_grad/Select_1"
  op: "Select"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/StackPopV2"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Select_1_grad/zeros_like"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Merge_3_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Select_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Select_1_grad/Select"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Select_1_grad/Select_1"
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Select_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Select_1_grad/Select"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Select_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Select_1_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Select_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Select_1_grad/Select_1"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Select_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Select_1_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Select_2_grad/zeros_like/shape_as_tensor"
  op: "Const"
  input: "^gradients/Sub_4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Select_2_grad/zeros_like/Const"
  op: "Const"
  input: "^gradients/Sub_4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Select_2_grad/zeros_like"
  op: "Fill"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Select_2_grad/zeros_like/shape_as_tensor"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Select_2_grad/zeros_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Select_2_grad/Select"
  op: "Select"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/StackPopV2"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Merge_4_grad/tuple/control_dependency_1"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Select_2_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Select_2_grad/Select_1"
  op: "Select"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/StackPopV2"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Select_2_grad/zeros_like"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Merge_4_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Select_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Select_2_grad/Select"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Select_2_grad/Select_1"
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Select_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Select_2_grad/Select"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Select_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Select_2_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Select_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Select_2_grad/Select_1"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Select_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Select_2_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Enter_2_grad/Exit"
  op: "Exit"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Merge_2_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Enter_3_grad/Exit"
  op: "Exit"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Merge_3_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Enter_4_grad/Exit"
  op: "Exit"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Merge_4_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Select_grad/zeros_like/shape_as_tensor"
  op: "Const"
  input: "^gradients/Sub_4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Select_grad/zeros_like/Const"
  op: "Const"
  input: "^gradients/Sub_4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Select_grad/zeros_like"
  op: "Fill"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Select_grad/zeros_like/shape_as_tensor"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Select_grad/zeros_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Select_grad/Select"
  op: "Select"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/StackPopV2"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Select_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Select_grad/Select_1"
  op: "Select"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/StackPopV2"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Select_grad/zeros_like"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Select_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Select_grad/Select"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Select_grad/Select_1"
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Select_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Select_grad/Select"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Select_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Select_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Select_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Select_grad/Select_1"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Select_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Select_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Merge_2_grad/tuple/control_dependency_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients"
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Merge_2_grad/tuple/control_dependency_1"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Identity_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  op: "StackV2"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Identity_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  op: "StackPushV2"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Identity_1"
  input: "^gradients/Add_5"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  op: "StackPopV2"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  input: "^gradients/Sub_5"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  op: "ControlTrigger"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/StackPopV2"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul/StackPopV2"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul_1/StackPopV2"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul/StackPopV2"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul_1/StackPopV2"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul/StackPopV2"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul_1/StackPopV2"
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Merge_2_grad/tuple/control_dependency_1"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Merge_2_grad/tuple/control_dependency_1"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Select_1_grad/zeros_like/shape_as_tensor"
  op: "Const"
  input: "^gradients/Sub_5"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Select_1_grad/zeros_like/Const"
  op: "Const"
  input: "^gradients/Sub_5"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Select_1_grad/zeros_like"
  op: "Fill"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Select_1_grad/zeros_like/shape_as_tensor"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Select_1_grad/zeros_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Select_1_grad/Select"
  op: "Select"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/StackPopV2"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Merge_3_grad/tuple/control_dependency_1"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Select_1_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/GreaterEqual"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/f_acc"
  op: "StackV2"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/GreaterEqual"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/Enter"
  op: "Enter"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/StackPushV2"
  op: "StackPushV2"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/Enter"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/GreaterEqual"
  input: "^gradients/Add_5"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/StackPopV2"
  op: "StackPopV2"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/StackPopV2/Enter"
  input: "^gradients/Sub_5"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Select_1_grad/Select_1"
  op: "Select"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/StackPopV2"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Select_1_grad/zeros_like"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Merge_3_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Select_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Select_1_grad/Select"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Select_1_grad/Select_1"
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Select_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Select_1_grad/Select"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Select_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Select_1_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Select_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Select_1_grad/Select_1"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Select_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Select_1_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Select_2_grad/zeros_like/shape_as_tensor"
  op: "Const"
  input: "^gradients/Sub_5"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Select_2_grad/zeros_like/Const"
  op: "Const"
  input: "^gradients/Sub_5"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Select_2_grad/zeros_like"
  op: "Fill"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Select_2_grad/zeros_like/shape_as_tensor"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Select_2_grad/zeros_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Select_2_grad/Select"
  op: "Select"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/StackPopV2"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Merge_4_grad/tuple/control_dependency_1"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Select_2_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Select_2_grad/Select_1"
  op: "Select"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/StackPopV2"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Select_2_grad/zeros_like"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Merge_4_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Select_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Select_2_grad/Select"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Select_2_grad/Select_1"
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Select_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Select_2_grad/Select"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Select_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Select_2_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Select_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Select_2_grad/Select_1"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Select_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Select_2_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_18"
  op: "AddN"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Select_2_grad/tuple/control_dependency_1"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Select_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Select_2_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul"
  op: "Mul"
  input: "gradients/AddN_18"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/Tanh_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul/f_acc"
  op: "StackV2"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/Tanh_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul/Enter"
  op: "Enter"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul/Enter"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/Tanh_1"
  input: "^gradients/Add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul/StackPopV2/Enter"
  input: "^gradients/Sub_4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul_1"
  op: "Mul"
  input: "gradients/AddN_18"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul_1/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/Sigmoid_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/Sigmoid_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul_1/Enter"
  op: "Enter"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul_1/Enter"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/Sigmoid_2"
  input: "^gradients/Add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul_1/StackPopV2/Enter"
  input: "^gradients/Sub_4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul_1"
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul_1"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Switch_2_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Select_grad/zeros_like/shape_as_tensor"
  op: "Const"
  input: "^gradients/Sub_5"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Select_grad/zeros_like/Const"
  op: "Const"
  input: "^gradients/Sub_5"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Select_grad/zeros_like"
  op: "Fill"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Select_grad/zeros_like/shape_as_tensor"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Select_grad/zeros_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Select_grad/Select"
  op: "Select"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/StackPopV2"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Select_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Select_grad/Select_1"
  op: "Select"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/StackPopV2"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Select_grad/zeros_like"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Select_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Select_grad/Select"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Select_grad/Select_1"
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Select_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Select_grad/Select"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Select_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Select_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Select_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Select_grad/Select_1"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Select_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Select_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/Sigmoid_2_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul_1/StackPopV2"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/Tanh_1_grad/TanhGrad"
  op: "TanhGrad"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul/StackPopV2"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_19"
  op: "AddN"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Select_2_grad/tuple/control_dependency_1"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Select_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Select_2_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul"
  op: "Mul"
  input: "gradients/AddN_19"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/Tanh_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul/f_acc"
  op: "StackV2"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/Tanh_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul/Enter"
  op: "Enter"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul/Enter"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/Tanh_1"
  input: "^gradients/Add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul/StackPopV2/Enter"
  input: "^gradients/Sub_5"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul_1"
  op: "Mul"
  input: "gradients/AddN_19"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul_1/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/Sigmoid_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/Sigmoid_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul_1/Enter"
  op: "Enter"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul_1/Enter"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/Sigmoid_2"
  input: "^gradients/Add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul_1/StackPopV2/Enter"
  input: "^gradients/Sub_5"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul_1"
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul_1"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Switch_2_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_20"
  op: "AddN"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Select_1_grad/tuple/control_dependency_1"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/Tanh_1_grad/TanhGrad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Select_1_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/add_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/AddN_20"
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/add_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/AddN_20"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Select_1_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/add_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/AddN_20"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Select_1_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/Sigmoid_2_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul_1/StackPopV2"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/Tanh_1_grad/TanhGrad"
  op: "TanhGrad"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul/StackPopV2"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul"
  op: "Mul"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/add_1_grad/tuple/control_dependency"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Identity_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul/f_acc"
  op: "StackV2"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Identity_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul/Enter"
  op: "Enter"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul/Enter"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Identity_3"
  input: "^gradients/Add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul/StackPopV2/Enter"
  input: "^gradients/Sub_4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul_1"
  op: "Mul"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/add_1_grad/tuple/control_dependency"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul_1/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/Sigmoid"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/Sigmoid"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul_1/Enter"
  op: "Enter"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul_1/Enter"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/Sigmoid"
  input: "^gradients/Add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul_1/StackPopV2/Enter"
  input: "^gradients/Sub_4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul_1"
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul_1"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul"
  op: "Mul"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/add_1_grad/tuple/control_dependency_1"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/Tanh"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul/f_acc"
  op: "StackV2"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/Tanh"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul/Enter"
  op: "Enter"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul/Enter"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/Tanh"
  input: "^gradients/Add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul/StackPopV2/Enter"
  input: "^gradients/Sub_4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul_1"
  op: "Mul"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/add_1_grad/tuple/control_dependency_1"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul_1/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/Sigmoid_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/Sigmoid_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul_1/Enter"
  op: "Enter"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul_1/Enter"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/Sigmoid_1"
  input: "^gradients/Add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul_1/StackPopV2/Enter"
  input: "^gradients/Sub_4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul_1"
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul_1"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_21"
  op: "AddN"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Select_1_grad/tuple/control_dependency_1"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/Tanh_1_grad/TanhGrad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Select_1_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/add_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/AddN_21"
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/add_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/AddN_21"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Select_1_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/add_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/AddN_21"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Select_1_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/Sigmoid_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul_1/StackPopV2"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_22"
  op: "AddN"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Select_1_grad/tuple/control_dependency"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Select_1_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/Sigmoid_1_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul_1/StackPopV2"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul/StackPopV2"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul"
  op: "Mul"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/add_1_grad/tuple/control_dependency"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Identity_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul/f_acc"
  op: "StackV2"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Identity_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul/Enter"
  op: "Enter"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul/Enter"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Identity_3"
  input: "^gradients/Add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul/StackPopV2/Enter"
  input: "^gradients/Sub_5"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul_1"
  op: "Mul"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/add_1_grad/tuple/control_dependency"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul_1/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/Sigmoid"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/Sigmoid"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul_1/Enter"
  op: "Enter"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul_1/Enter"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/Sigmoid"
  input: "^gradients/Add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul_1/StackPopV2/Enter"
  input: "^gradients/Sub_5"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul_1"
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul_1"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul"
  op: "Mul"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/add_1_grad/tuple/control_dependency_1"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/Tanh"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul/f_acc"
  op: "StackV2"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/Tanh"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul/Enter"
  op: "Enter"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul/Enter"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/Tanh"
  input: "^gradients/Add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul/StackPopV2/Enter"
  input: "^gradients/Sub_5"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul_1"
  op: "Mul"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/add_1_grad/tuple/control_dependency_1"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul_1/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/Sigmoid_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/Sigmoid_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul_1/Enter"
  op: "Enter"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul_1/Enter"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/Sigmoid_1"
  input: "^gradients/Add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul_1/StackPopV2/Enter"
  input: "^gradients/Sub_5"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul_1"
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul_1"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/add_grad/Shape"
  op: "Const"
  input: "^gradients/Sub_4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/add_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub_4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/add_grad/Shape"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/add_grad/Sum"
  op: "Sum"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/Sigmoid_grad/SigmoidGrad"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/add_grad/Reshape"
  op: "Reshape"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/add_grad/Sum"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/add_grad/Sum_1"
  op: "Sum"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/Sigmoid_grad/SigmoidGrad"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/add_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/add_grad/Sum_1"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/add_grad/Reshape"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/add_grad/Reshape_1"
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/add_grad/Reshape"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/add_grad/Reshape_1"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Switch_3_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients/AddN_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/Sigmoid_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul_1/StackPopV2"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_23"
  op: "AddN"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Select_1_grad/tuple/control_dependency"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Select_1_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/Sigmoid_1_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul_1/StackPopV2"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul/StackPopV2"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/split_grad/concat"
  op: "ConcatV2"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/Sigmoid_1_grad/SigmoidGrad"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/Tanh_grad/TanhGrad"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/add_grad/tuple/control_dependency"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/Sigmoid_2_grad/SigmoidGrad"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/split_grad/concat/Const"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/split_grad/concat/Const"
  op: "Const"
  input: "^gradients/Sub_4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/add_grad/Shape"
  op: "Const"
  input: "^gradients/Sub_5"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/add_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub_5"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/add_grad/Shape"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/add_grad/Sum"
  op: "Sum"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/Sigmoid_grad/SigmoidGrad"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/add_grad/Reshape"
  op: "Reshape"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/add_grad/Sum"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/add_grad/Sum_1"
  op: "Sum"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/Sigmoid_grad/SigmoidGrad"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/add_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/add_grad/Sum_1"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/add_grad/Reshape"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/add_grad/Reshape_1"
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/add_grad/Reshape"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/add_grad/Reshape_1"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Switch_3_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients/AddN_23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/split_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/split_grad/concat"
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/split_grad/concat"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/split_grad/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/split_grad/concat"
  op: "ConcatV2"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/Sigmoid_1_grad/SigmoidGrad"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/Tanh_grad/TanhGrad"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/add_grad/tuple/control_dependency"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/Sigmoid_2_grad/SigmoidGrad"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/split_grad/concat/Const"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/split_grad/concat/Const"
  op: "Const"
  input: "^gradients/Sub_5"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd_grad/tuple/control_dependency"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 224
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 224
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 224
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/MatMul_1/Enter"
  op: "Enter"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/MatMul_1/Enter"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/concat"
  input: "^gradients/Add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 224
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/MatMul_1/StackPopV2/Enter"
  input: "^gradients/Sub_4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 224
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/MatMul"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/MatMul"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 224
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/MatMul_1"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 224
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd/Enter_grad/b_acc_1"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd/Enter_grad/b_acc_2"
  input: "gradients/b_count_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd/Enter_grad/Add"
  op: "Add"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd/Enter_grad/Switch:1"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/split_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/split_grad/concat"
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/split_grad/concat"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/split_grad/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/Const"
  op: "Const"
  input: "^gradients/Sub_4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/Rank"
  op: "Const"
  input: "^gradients/Sub_4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/mod"
  op: "FloorMod"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/Const"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/Shape"
  op: "Const"
  input: "^gradients/Sub_4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000`\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub_4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/mod"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/Shape"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/Shape_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/Slice"
  op: "Slice"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/tuple/control_dependency"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/ConcatOffset"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 96
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/Slice_1"
  op: "Slice"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/tuple/control_dependency"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/ConcatOffset:1"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/Shape_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/Slice"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/Slice_1"
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/Slice"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 96
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/Slice_1"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 224
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 224
          }
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 224
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul/Enter_grad/b_acc_1"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 224
          }
          dim {
            size: 512
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul/Enter_grad/b_acc_2"
  input: "gradients/b_count_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 224
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 224
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul/Enter_grad/Add"
  op: "Add"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul/Enter_grad/Switch:1"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 224
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 224
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 224
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd_grad/tuple/control_dependency"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 224
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 224
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 224
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/MatMul_1/Enter"
  op: "Enter"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/MatMul_1/Enter"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/concat"
  input: "^gradients/Add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 224
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/MatMul_1/StackPopV2/Enter"
  input: "^gradients/Sub_5"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 224
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/MatMul"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/MatMul"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 224
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/MatMul_1"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 224
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd/Enter_grad/b_acc_1"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd/Enter_grad/b_acc_2"
  input: "gradients/b_count_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd/Enter_grad/Add"
  op: "Add"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd/Enter_grad/Switch:1"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^gradients/Sub_4"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients"
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  op: "Enter"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/tuple/control_dependency"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_24"
  op: "AddN"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Select_2_grad/tuple/control_dependency"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Select_2_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/Const"
  op: "Const"
  input: "^gradients/Sub_5"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/Rank"
  op: "Const"
  input: "^gradients/Sub_5"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/mod"
  op: "FloorMod"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/Const"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/Shape"
  op: "Const"
  input: "^gradients/Sub_5"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000`\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub_5"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/mod"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/Shape"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/Shape_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/Slice"
  op: "Slice"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/tuple/control_dependency"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/ConcatOffset"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 96
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/Slice_1"
  op: "Slice"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/tuple/control_dependency"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/ConcatOffset:1"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/Shape_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/Slice"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/Slice_1"
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/Slice"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 96
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/Slice_1"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 224
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 224
          }
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 224
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul/Enter_grad/b_acc_1"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 224
          }
          dim {
            size: 512
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul/Enter_grad/b_acc_2"
  input: "gradients/b_count_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 224
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 224
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul/Enter_grad/Add"
  op: "Add"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul/Enter_grad/Switch:1"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 224
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 224
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 224
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  op: "Enter"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  op: "Merge"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/Switch"
  op: "Switch"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  input: "gradients/b_count_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/Add"
  op: "Add"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/Switch:1"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  op: "Exit"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/Switch_4_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients/AddN_24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^gradients/Sub_5"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients"
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  op: "Enter"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/tuple/control_dependency"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_25"
  op: "AddN"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Select_2_grad/tuple/control_dependency"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Select_2_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/TensorArray_1"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/fw/fw/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients"
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/fw/fw/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/TensorArrayUnstack/range"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 96
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 96
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  op: "Enter"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  op: "Merge"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/Switch"
  op: "Switch"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  input: "gradients/b_count_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/Add"
  op: "Add"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/Switch:1"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  op: "Exit"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/Switch_4_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients/AddN_25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/transpose_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/fw/concat"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/transpose_grad/transpose"
  op: "Transpose"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/control_dependency"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/transpose_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: -1
          }
          dim {
            size: 96
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/TensorArray_1"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/bw/bw/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients"
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/bw/bw/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/TensorArrayUnstack/range"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 96
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 96
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  input: "^gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/transpose_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/bw/concat"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/transpose_grad/transpose"
  op: "Transpose"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/control_dependency"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/transpose_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: -1
          }
          dim {
            size: 96
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/ReverseSequence_grad/ReverseSequence"
  op: "ReverseSequence"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/transpose_grad/transpose"
  input: "Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tlen"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: -1
          }
          dim {
            size: 96
          }
        }
      }
    }
  }
  attr {
    key: "batch_dim"
    value {
      i: 0
    }
  }
  attr {
    key: "seq_dim"
    value {
      i: 1
    }
  }
}
node {
  name: "gradients/AddN_26"
  op: "AddN"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/transpose_grad/transpose"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/ReverseSequence_grad/ReverseSequence"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/transpose_grad/transpose"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: -1
          }
          dim {
            size: 96
          }
        }
      }
    }
  }
}
node {
  name: "gradients/conv1d_3_doodle/conv1d_3/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/AddN_26"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 96
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/conv1d_3_doodle/conv1d_3/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/AddN_26"
  input: "^gradients/conv1d_3_doodle/conv1d_3/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "gradients/conv1d_3_doodle/conv1d_3/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/AddN_26"
  input: "^gradients/conv1d_3_doodle/conv1d_3/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/transpose_grad/transpose"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: -1
          }
          dim {
            size: 96
          }
        }
      }
    }
  }
}
node {
  name: "gradients/conv1d_3_doodle/conv1d_3/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/conv1d_3_doodle/conv1d_3/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/conv1d_3_doodle/conv1d_3/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv1d_3_doodle/conv1d_3/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 96
          }
        }
      }
    }
  }
}
node {
  name: "gradients/conv1d_3_doodle/conv1d_3/conv1d/Squeeze_grad/Shape"
  op: "Shape"
  input: "conv1d_3_doodle/conv1d_3/conv1d"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/conv1d_3_doodle/conv1d_3/conv1d/Squeeze_grad/Reshape"
  op: "Reshape"
  input: "gradients/conv1d_3_doodle/conv1d_3/BiasAdd_grad/tuple/control_dependency"
  input: "gradients/conv1d_3_doodle/conv1d_3/conv1d/Squeeze_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 1
          }
          dim {
            size: -1
          }
          dim {
            size: 96
          }
        }
      }
    }
  }
}
node {
  name: "gradients/conv1d_3_doodle/conv1d_3/conv1d_grad/ShapeN"
  op: "ShapeN"
  input: "conv1d_3_doodle/conv1d_3/conv1d/ExpandDims"
  input: "conv1d_3_doodle/conv1d_3/conv1d/ExpandDims_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/conv1d_3_doodle/conv1d_3/conv1d_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "gradients/conv1d_3_doodle/conv1d_3/conv1d_grad/ShapeN"
  input: "conv1d_3_doodle/conv1d_3/conv1d/ExpandDims_1"
  input: "gradients/conv1d_3_doodle/conv1d_3/conv1d/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 1
          }
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/conv1d_3_doodle/conv1d_3/conv1d_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "conv1d_3_doodle/conv1d_3/conv1d/ExpandDims"
  input: "gradients/conv1d_3_doodle/conv1d_3/conv1d_grad/ShapeN:1"
  input: "gradients/conv1d_3_doodle/conv1d_3/conv1d/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 96
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/conv1d_3_doodle/conv1d_3/conv1d_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/conv1d_3_doodle/conv1d_3/conv1d_grad/Conv2DBackpropFilter"
  input: "^gradients/conv1d_3_doodle/conv1d_3/conv1d_grad/Conv2DBackpropInput"
}
node {
  name: "gradients/conv1d_3_doodle/conv1d_3/conv1d_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/conv1d_3_doodle/conv1d_3/conv1d_grad/Conv2DBackpropInput"
  input: "^gradients/conv1d_3_doodle/conv1d_3/conv1d_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv1d_3_doodle/conv1d_3/conv1d_grad/Conv2DBackpropInput"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 1
          }
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/conv1d_3_doodle/conv1d_3/conv1d_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/conv1d_3_doodle/conv1d_3/conv1d_grad/Conv2DBackpropFilter"
  input: "^gradients/conv1d_3_doodle/conv1d_3/conv1d_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv1d_3_doodle/conv1d_3/conv1d_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 96
          }
        }
      }
    }
  }
}
node {
  name: "gradients/conv1d_3_doodle/conv1d_3/conv1d/ExpandDims_grad/Shape"
  op: "Shape"
  input: "conv1d_2_doodle/conv1d_2/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/conv1d_3_doodle/conv1d_3/conv1d/ExpandDims_grad/Reshape"
  op: "Reshape"
  input: "gradients/conv1d_3_doodle/conv1d_3/conv1d_grad/tuple/control_dependency"
  input: "gradients/conv1d_3_doodle/conv1d_3/conv1d/ExpandDims_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/conv1d_3_doodle/conv1d_3/conv1d/ExpandDims_1_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\003\000\000\000@\000\000\000`\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/conv1d_3_doodle/conv1d_3/conv1d/ExpandDims_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/conv1d_3_doodle/conv1d_3/conv1d_grad/tuple/control_dependency_1"
  input: "gradients/conv1d_3_doodle/conv1d_3/conv1d/ExpandDims_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 96
          }
        }
      }
    }
  }
}
node {
  name: "gradients/conv1d_2_doodle/conv1d_2/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/conv1d_3_doodle/conv1d_3/conv1d/ExpandDims_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/conv1d_2_doodle/conv1d_2/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/conv1d_2_doodle/conv1d_2/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/conv1d_3_doodle/conv1d_3/conv1d/ExpandDims_grad/Reshape"
}
node {
  name: "gradients/conv1d_2_doodle/conv1d_2/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/conv1d_3_doodle/conv1d_3/conv1d/ExpandDims_grad/Reshape"
  input: "^gradients/conv1d_2_doodle/conv1d_2/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv1d_3_doodle/conv1d_3/conv1d/ExpandDims_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/conv1d_2_doodle/conv1d_2/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/conv1d_2_doodle/conv1d_2/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/conv1d_2_doodle/conv1d_2/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv1d_2_doodle/conv1d_2/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/conv1d_2_doodle/conv1d_2/conv1d/Squeeze_grad/Shape"
  op: "Shape"
  input: "conv1d_2_doodle/conv1d_2/conv1d"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/conv1d_2_doodle/conv1d_2/conv1d/Squeeze_grad/Reshape"
  op: "Reshape"
  input: "gradients/conv1d_2_doodle/conv1d_2/BiasAdd_grad/tuple/control_dependency"
  input: "gradients/conv1d_2_doodle/conv1d_2/conv1d/Squeeze_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 1
          }
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/conv1d_2_doodle/conv1d_2/conv1d_grad/ShapeN"
  op: "ShapeN"
  input: "conv1d_2_doodle/conv1d_2/conv1d/ExpandDims"
  input: "conv1d_2_doodle/conv1d_2/conv1d/ExpandDims_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/conv1d_2_doodle/conv1d_2/conv1d_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "gradients/conv1d_2_doodle/conv1d_2/conv1d_grad/ShapeN"
  input: "conv1d_2_doodle/conv1d_2/conv1d/ExpandDims_1"
  input: "gradients/conv1d_2_doodle/conv1d_2/conv1d/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 1
          }
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/conv1d_2_doodle/conv1d_2/conv1d_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "conv1d_2_doodle/conv1d_2/conv1d/ExpandDims"
  input: "gradients/conv1d_2_doodle/conv1d_2/conv1d_grad/ShapeN:1"
  input: "gradients/conv1d_2_doodle/conv1d_2/conv1d/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 5
          }
          dim {
            size: 48
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/conv1d_2_doodle/conv1d_2/conv1d_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/conv1d_2_doodle/conv1d_2/conv1d_grad/Conv2DBackpropFilter"
  input: "^gradients/conv1d_2_doodle/conv1d_2/conv1d_grad/Conv2DBackpropInput"
}
node {
  name: "gradients/conv1d_2_doodle/conv1d_2/conv1d_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/conv1d_2_doodle/conv1d_2/conv1d_grad/Conv2DBackpropInput"
  input: "^gradients/conv1d_2_doodle/conv1d_2/conv1d_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv1d_2_doodle/conv1d_2/conv1d_grad/Conv2DBackpropInput"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 1
          }
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "gradients/conv1d_2_doodle/conv1d_2/conv1d_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/conv1d_2_doodle/conv1d_2/conv1d_grad/Conv2DBackpropFilter"
  input: "^gradients/conv1d_2_doodle/conv1d_2/conv1d_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv1d_2_doodle/conv1d_2/conv1d_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 5
          }
          dim {
            size: 48
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/conv1d_2_doodle/conv1d_2/conv1d/ExpandDims_grad/Shape"
  op: "Shape"
  input: "conv1d_1_doodle/conv1d_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/conv1d_2_doodle/conv1d_2/conv1d/ExpandDims_grad/Reshape"
  op: "Reshape"
  input: "gradients/conv1d_2_doodle/conv1d_2/conv1d_grad/tuple/control_dependency"
  input: "gradients/conv1d_2_doodle/conv1d_2/conv1d/ExpandDims_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "gradients/conv1d_2_doodle/conv1d_2/conv1d/ExpandDims_1_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\005\000\000\0000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/conv1d_2_doodle/conv1d_2/conv1d/ExpandDims_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/conv1d_2_doodle/conv1d_2/conv1d_grad/tuple/control_dependency_1"
  input: "gradients/conv1d_2_doodle/conv1d_2/conv1d/ExpandDims_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 48
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/conv1d_1_doodle/conv1d_1/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/conv1d_2_doodle/conv1d_2/conv1d/ExpandDims_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/conv1d_1_doodle/conv1d_1/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/conv1d_1_doodle/conv1d_1/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/conv1d_2_doodle/conv1d_2/conv1d/ExpandDims_grad/Reshape"
}
node {
  name: "gradients/conv1d_1_doodle/conv1d_1/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/conv1d_2_doodle/conv1d_2/conv1d/ExpandDims_grad/Reshape"
  input: "^gradients/conv1d_1_doodle/conv1d_1/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv1d_2_doodle/conv1d_2/conv1d/ExpandDims_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "gradients/conv1d_1_doodle/conv1d_1/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/conv1d_1_doodle/conv1d_1/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/conv1d_1_doodle/conv1d_1/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv1d_1_doodle/conv1d_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "gradients/conv1d_1_doodle/conv1d_1/conv1d/Squeeze_grad/Shape"
  op: "Shape"
  input: "conv1d_1_doodle/conv1d_1/conv1d"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/conv1d_1_doodle/conv1d_1/conv1d/Squeeze_grad/Reshape"
  op: "Reshape"
  input: "gradients/conv1d_1_doodle/conv1d_1/BiasAdd_grad/tuple/control_dependency"
  input: "gradients/conv1d_1_doodle/conv1d_1/conv1d/Squeeze_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 1
          }
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "gradients/conv1d_1_doodle/conv1d_1/conv1d_grad/ShapeN"
  op: "ShapeN"
  input: "conv1d_1_doodle/conv1d_1/conv1d/ExpandDims"
  input: "conv1d_1_doodle/conv1d_1/conv1d/ExpandDims_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/conv1d_1_doodle/conv1d_1/conv1d_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "gradients/conv1d_1_doodle/conv1d_1/conv1d_grad/ShapeN"
  input: "conv1d_1_doodle/conv1d_1/conv1d/ExpandDims_1"
  input: "gradients/conv1d_1_doodle/conv1d_1/conv1d/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 1
          }
          dim {
            size: -1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/conv1d_1_doodle/conv1d_1/conv1d_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "conv1d_1_doodle/conv1d_1/conv1d/ExpandDims"
  input: "gradients/conv1d_1_doodle/conv1d_1/conv1d_grad/ShapeN:1"
  input: "gradients/conv1d_1_doodle/conv1d_1/conv1d/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/conv1d_1_doodle/conv1d_1/conv1d_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/conv1d_1_doodle/conv1d_1/conv1d_grad/Conv2DBackpropFilter"
  input: "^gradients/conv1d_1_doodle/conv1d_1/conv1d_grad/Conv2DBackpropInput"
}
node {
  name: "gradients/conv1d_1_doodle/conv1d_1/conv1d_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/conv1d_1_doodle/conv1d_1/conv1d_grad/Conv2DBackpropInput"
  input: "^gradients/conv1d_1_doodle/conv1d_1/conv1d_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv1d_1_doodle/conv1d_1/conv1d_grad/Conv2DBackpropInput"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 1
          }
          dim {
            size: -1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/conv1d_1_doodle/conv1d_1/conv1d_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/conv1d_1_doodle/conv1d_1/conv1d_grad/Conv2DBackpropFilter"
  input: "^gradients/conv1d_1_doodle/conv1d_1/conv1d_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv1d_1_doodle/conv1d_1/conv1d_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "gradients/conv1d_1_doodle/conv1d_1/conv1d/ExpandDims_1_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\005\000\000\000\005\000\000\0000\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/conv1d_1_doodle/conv1d_1/conv1d/ExpandDims_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/conv1d_1_doodle/conv1d_1/conv1d_grad/tuple/control_dependency_1"
  input: "gradients/conv1d_1_doodle/conv1d_1/conv1d/ExpandDims_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "beta1_power/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Final_Layer/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "beta1_power"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Final_Layer/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "beta1_power/Assign"
  op: "Assign"
  input: "beta1_power"
  input: "beta1_power/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Final_Layer/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "beta1_power/read"
  op: "Identity"
  input: "beta1_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Final_Layer/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "beta2_power/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Final_Layer/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9990000128746033
      }
    }
  }
}
node {
  name: "beta2_power"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Final_Layer/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "beta2_power/Assign"
  op: "Assign"
  input: "beta2_power"
  input: "beta2_power/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Final_Layer/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "beta2_power/read"
  op: "Identity"
  input: "beta2_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Final_Layer/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "conv1d_1/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\005\000\000\000\005\000\000\0000\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_1/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv1d_1/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "conv1d_1/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "conv1d_1/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_1/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 5
        }
        dim {
          size: 48
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv1d_1/kernel/Adam/Assign"
  op: "Assign"
  input: "conv1d_1/kernel/Adam"
  input: "conv1d_1/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_1/kernel/Adam/read"
  op: "Identity"
  input: "conv1d_1/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "conv1d_1/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\005\000\000\000\005\000\000\0000\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_1/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv1d_1/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "conv1d_1/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "conv1d_1/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_1/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 5
        }
        dim {
          size: 48
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv1d_1/kernel/Adam_1/Assign"
  op: "Assign"
  input: "conv1d_1/kernel/Adam_1"
  input: "conv1d_1/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_1/kernel/Adam_1/read"
  op: "Identity"
  input: "conv1d_1/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "conv1d_1/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 48
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv1d_1/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 48
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv1d_1/bias/Adam/Assign"
  op: "Assign"
  input: "conv1d_1/bias/Adam"
  input: "conv1d_1/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_1/bias/Adam/read"
  op: "Identity"
  input: "conv1d_1/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "conv1d_1/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 48
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv1d_1/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 48
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv1d_1/bias/Adam_1/Assign"
  op: "Assign"
  input: "conv1d_1/bias/Adam_1"
  input: "conv1d_1/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_1/bias/Adam_1/read"
  op: "Identity"
  input: "conv1d_1/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "conv1d_2/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\005\000\000\0000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_2/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv1d_2/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "conv1d_2/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "conv1d_2/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 48
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_2/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 48
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 48
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv1d_2/kernel/Adam/Assign"
  op: "Assign"
  input: "conv1d_2/kernel/Adam"
  input: "conv1d_2/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 48
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_2/kernel/Adam/read"
  op: "Identity"
  input: "conv1d_2/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 48
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "conv1d_2/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\005\000\000\0000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_2/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv1d_2/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "conv1d_2/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "conv1d_2/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 48
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_2/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 48
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 48
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv1d_2/kernel/Adam_1/Assign"
  op: "Assign"
  input: "conv1d_2/kernel/Adam_1"
  input: "conv1d_2/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 48
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_2/kernel/Adam_1/read"
  op: "Identity"
  input: "conv1d_2/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 48
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "conv1d_2/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv1d_2/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv1d_2/bias/Adam/Assign"
  op: "Assign"
  input: "conv1d_2/bias/Adam"
  input: "conv1d_2/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_2/bias/Adam/read"
  op: "Identity"
  input: "conv1d_2/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "conv1d_2/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv1d_2/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv1d_2/bias/Adam_1/Assign"
  op: "Assign"
  input: "conv1d_2/bias/Adam_1"
  input: "conv1d_2/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_2/bias/Adam_1/read"
  op: "Identity"
  input: "conv1d_2/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "conv1d_3/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\003\000\000\000@\000\000\000`\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_3/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv1d_3/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "conv1d_3/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "conv1d_3/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 96
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_3/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 96
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 96
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv1d_3/kernel/Adam/Assign"
  op: "Assign"
  input: "conv1d_3/kernel/Adam"
  input: "conv1d_3/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 96
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_3/kernel/Adam/read"
  op: "Identity"
  input: "conv1d_3/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 96
          }
        }
      }
    }
  }
}
node {
  name: "conv1d_3/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\003\000\000\000@\000\000\000`\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_3/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv1d_3/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "conv1d_3/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "conv1d_3/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 96
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_3/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 96
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 96
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv1d_3/kernel/Adam_1/Assign"
  op: "Assign"
  input: "conv1d_3/kernel/Adam_1"
  input: "conv1d_3/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 96
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_3/kernel/Adam_1/read"
  op: "Identity"
  input: "conv1d_3/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 96
          }
        }
      }
    }
  }
}
node {
  name: "conv1d_3/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 96
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 96
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv1d_3/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 96
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 96
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv1d_3/bias/Adam/Assign"
  op: "Assign"
  input: "conv1d_3/bias/Adam"
  input: "conv1d_3/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 96
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_3/bias/Adam/read"
  op: "Identity"
  input: "conv1d_3/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 96
          }
        }
      }
    }
  }
}
node {
  name: "conv1d_3/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 96
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 96
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv1d_3/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 96
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 96
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv1d_3/bias/Adam_1/Assign"
  op: "Assign"
  input: "conv1d_3/bias/Adam_1"
  input: "conv1d_3/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 96
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_3/bias/Adam_1/read"
  op: "Identity"
  input: "conv1d_3/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 96
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\340\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 224
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 224
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 224
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/kernel/Adam/Assign"
  op: "Assign"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/kernel/Adam"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 224
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/kernel/Adam/read"
  op: "Identity"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 224
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\340\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 224
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 224
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 224
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/kernel/Adam_1/Assign"
  op: "Assign"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/kernel/Adam_1"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 224
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/kernel/Adam_1/read"
  op: "Identity"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 224
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/bias/Adam/Assign"
  op: "Assign"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/bias/Adam"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/bias/Adam/read"
  op: "Identity"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/bias/Adam_1/Assign"
  op: "Assign"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/bias/Adam_1"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/bias/Adam_1/read"
  op: "Identity"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\340\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 224
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 224
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 224
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/kernel/Adam/Assign"
  op: "Assign"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/kernel/Adam"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 224
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/kernel/Adam/read"
  op: "Identity"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 224
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\340\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 224
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 224
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 224
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/kernel/Adam_1/Assign"
  op: "Assign"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/kernel/Adam_1"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 224
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/kernel/Adam_1/read"
  op: "Identity"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 224
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/bias/Adam/Assign"
  op: "Assign"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/bias/Adam"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/bias/Adam/read"
  op: "Identity"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/bias/Adam_1/Assign"
  op: "Assign"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/bias/Adam_1"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/bias/Adam_1/read"
  op: "Identity"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\001\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 384
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/kernel/Adam/Assign"
  op: "Assign"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/kernel/Adam"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/kernel/Adam/read"
  op: "Identity"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\001\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 384
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/kernel/Adam_1/Assign"
  op: "Assign"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/kernel/Adam_1"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/kernel/Adam_1/read"
  op: "Identity"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/bias/Adam/Assign"
  op: "Assign"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/bias/Adam"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/bias/Adam/read"
  op: "Identity"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/bias/Adam_1/Assign"
  op: "Assign"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/bias/Adam_1"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/bias/Adam_1/read"
  op: "Identity"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\001\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 384
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/kernel/Adam/Assign"
  op: "Assign"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/kernel/Adam"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/kernel/Adam/read"
  op: "Identity"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\001\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 384
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/kernel/Adam_1/Assign"
  op: "Assign"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/kernel/Adam_1"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/kernel/Adam_1/read"
  op: "Identity"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/bias/Adam/Assign"
  op: "Assign"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/bias/Adam"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/bias/Adam/read"
  op: "Identity"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/bias/Adam_1/Assign"
  op: "Assign"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/bias/Adam_1"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/bias/Adam_1/read"
  op: "Identity"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\001\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 384
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/kernel/Adam/Assign"
  op: "Assign"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/kernel/Adam"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/kernel/Adam/read"
  op: "Identity"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\001\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 384
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/kernel/Adam_1/Assign"
  op: "Assign"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/kernel/Adam_1"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/kernel/Adam_1/read"
  op: "Identity"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/bias/Adam/Assign"
  op: "Assign"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/bias/Adam"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/bias/Adam/read"
  op: "Identity"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/bias/Adam_1/Assign"
  op: "Assign"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/bias/Adam_1"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/bias/Adam_1/read"
  op: "Identity"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\001\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 384
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/kernel/Adam/Assign"
  op: "Assign"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/kernel/Adam"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/kernel/Adam/read"
  op: "Identity"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\001\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 384
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/kernel/Adam_1/Assign"
  op: "Assign"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/kernel/Adam_1"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/kernel/Adam_1/read"
  op: "Identity"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/bias/Adam/Assign"
  op: "Assign"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/bias/Adam"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/bias/Adam/read"
  op: "Identity"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/bias/Adam_1/Assign"
  op: "Assign"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/bias/Adam_1"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/bias/Adam_1/read"
  op: "Identity"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "Final_Layer/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Final_Layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\001\000\000\027\000\000\000"
      }
    }
  }
}
node {
  name: "Final_Layer/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Final_Layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Final_Layer/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "Final_Layer/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "Final_Layer/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Final_Layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 23
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Final_Layer/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Final_Layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 23
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
        dim {
          size: 23
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Final_Layer/kernel/Adam/Assign"
  op: "Assign"
  input: "Final_Layer/kernel/Adam"
  input: "Final_Layer/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Final_Layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 23
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Final_Layer/kernel/Adam/read"
  op: "Identity"
  input: "Final_Layer/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Final_Layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 23
          }
        }
      }
    }
  }
}
node {
  name: "Final_Layer/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Final_Layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\001\000\000\027\000\000\000"
      }
    }
  }
}
node {
  name: "Final_Layer/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Final_Layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Final_Layer/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "Final_Layer/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "Final_Layer/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Final_Layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 23
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Final_Layer/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Final_Layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 23
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
        dim {
          size: 23
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Final_Layer/kernel/Adam_1/Assign"
  op: "Assign"
  input: "Final_Layer/kernel/Adam_1"
  input: "Final_Layer/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Final_Layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 23
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Final_Layer/kernel/Adam_1/read"
  op: "Identity"
  input: "Final_Layer/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Final_Layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 23
          }
        }
      }
    }
  }
}
node {
  name: "Final_Layer/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Final_Layer/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 23
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 23
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Final_Layer/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Final_Layer/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 23
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 23
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Final_Layer/bias/Adam/Assign"
  op: "Assign"
  input: "Final_Layer/bias/Adam"
  input: "Final_Layer/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Final_Layer/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 23
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Final_Layer/bias/Adam/read"
  op: "Identity"
  input: "Final_Layer/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Final_Layer/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 23
          }
        }
      }
    }
  }
}
node {
  name: "Final_Layer/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Final_Layer/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 23
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 23
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Final_Layer/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Final_Layer/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 23
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 23
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Final_Layer/bias/Adam_1/Assign"
  op: "Assign"
  input: "Final_Layer/bias/Adam_1"
  input: "Final_Layer/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Final_Layer/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 23
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Final_Layer/bias/Adam_1/read"
  op: "Identity"
  input: "Final_Layer/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Final_Layer/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 23
          }
        }
      }
    }
  }
}
node {
  name: "Adam/learning_rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999747378752e-05
      }
    }
  }
}
node {
  name: "Adam/beta1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "Adam/beta2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9990000128746033
      }
    }
  }
}
node {
  name: "Adam/epsilon"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.99999993922529e-09
      }
    }
  }
}
node {
  name: "Adam/update_conv1d_1/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "conv1d_1/kernel"
  input: "conv1d_1/kernel/Adam"
  input: "conv1d_1/kernel/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/conv1d_1_doodle/conv1d_1/conv1d/ExpandDims_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_conv1d_1/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "conv1d_1/bias"
  input: "conv1d_1/bias/Adam"
  input: "conv1d_1/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/conv1d_1_doodle/conv1d_1/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_conv1d_2/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "conv1d_2/kernel"
  input: "conv1d_2/kernel/Adam"
  input: "conv1d_2/kernel/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/conv1d_2_doodle/conv1d_2/conv1d/ExpandDims_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 48
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_conv1d_2/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "conv1d_2/bias"
  input: "conv1d_2/bias/Adam"
  input: "conv1d_2/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/conv1d_2_doodle/conv1d_2/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_conv1d_3/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "conv1d_3/kernel"
  input: "conv1d_3/kernel/Adam"
  input: "conv1d_3/kernel/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/conv1d_3_doodle/conv1d_3/conv1d/ExpandDims_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 96
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_conv1d_3/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "conv1d_3/bias"
  input: "conv1d_3/bias/Adam"
  input: "conv1d_3/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/conv1d_3_doodle/conv1d_3/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 96
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/kernel"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/kernel/Adam"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/kernel/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 224
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/bias"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/bias/Adam"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/kernel"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/kernel/Adam"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/kernel/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 224
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/bias"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/bias/Adam"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/rnn_classification/cell_0/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/kernel"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/kernel/Adam"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/kernel/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/bias"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/bias/Adam"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/kernel"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/kernel/Adam"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/kernel/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/bias"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/bias/Adam"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/rnn_classification/cell_1/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/kernel"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/kernel/Adam"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/kernel/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/bias"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/bias/Adam"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/kernel"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/kernel/Adam"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/kernel/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/bias"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/bias/Adam"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/rnn_classification/cell_2/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_Final_Layer/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "Final_Layer/kernel"
  input: "Final_Layer/kernel/Adam"
  input: "Final_Layer/kernel/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/Final_Layer/Final_Layer/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Final_Layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 23
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_Final_Layer/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "Final_Layer/bias"
  input: "Final_Layer/bias/Adam"
  input: "Final_Layer/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/Final_Layer/Final_Layer/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Final_Layer/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 23
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/mul"
  op: "Mul"
  input: "beta1_power/read"
  input: "Adam/beta1"
  input: "^Adam/update_Final_Layer/bias/ApplyAdam"
  input: "^Adam/update_Final_Layer/kernel/ApplyAdam"
  input: "^Adam/update_conv1d_1/bias/ApplyAdam"
  input: "^Adam/update_conv1d_1/kernel/ApplyAdam"
  input: "^Adam/update_conv1d_2/bias/ApplyAdam"
  input: "^Adam/update_conv1d_2/kernel/ApplyAdam"
  input: "^Adam/update_conv1d_3/bias/ApplyAdam"
  input: "^Adam/update_conv1d_3/kernel/ApplyAdam"
  input: "^Adam/update_rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/bias/ApplyAdam"
  input: "^Adam/update_rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/kernel/ApplyAdam"
  input: "^Adam/update_rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/bias/ApplyAdam"
  input: "^Adam/update_rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/kernel/ApplyAdam"
  input: "^Adam/update_rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/bias/ApplyAdam"
  input: "^Adam/update_rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/kernel/ApplyAdam"
  input: "^Adam/update_rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/bias/ApplyAdam"
  input: "^Adam/update_rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/kernel/ApplyAdam"
  input: "^Adam/update_rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/bias/ApplyAdam"
  input: "^Adam/update_rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/kernel/ApplyAdam"
  input: "^Adam/update_rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/bias/ApplyAdam"
  input: "^Adam/update_rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/kernel/ApplyAdam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Final_Layer/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Adam/Assign"
  op: "Assign"
  input: "beta1_power"
  input: "Adam/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Final_Layer/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/mul_1"
  op: "Mul"
  input: "beta2_power/read"
  input: "Adam/beta2"
  input: "^Adam/update_Final_Layer/bias/ApplyAdam"
  input: "^Adam/update_Final_Layer/kernel/ApplyAdam"
  input: "^Adam/update_conv1d_1/bias/ApplyAdam"
  input: "^Adam/update_conv1d_1/kernel/ApplyAdam"
  input: "^Adam/update_conv1d_2/bias/ApplyAdam"
  input: "^Adam/update_conv1d_2/kernel/ApplyAdam"
  input: "^Adam/update_conv1d_3/bias/ApplyAdam"
  input: "^Adam/update_conv1d_3/kernel/ApplyAdam"
  input: "^Adam/update_rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/bias/ApplyAdam"
  input: "^Adam/update_rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/kernel/ApplyAdam"
  input: "^Adam/update_rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/bias/ApplyAdam"
  input: "^Adam/update_rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/kernel/ApplyAdam"
  input: "^Adam/update_rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/bias/ApplyAdam"
  input: "^Adam/update_rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/kernel/ApplyAdam"
  input: "^Adam/update_rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/bias/ApplyAdam"
  input: "^Adam/update_rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/kernel/ApplyAdam"
  input: "^Adam/update_rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/bias/ApplyAdam"
  input: "^Adam/update_rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/kernel/ApplyAdam"
  input: "^Adam/update_rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/bias/ApplyAdam"
  input: "^Adam/update_rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/kernel/ApplyAdam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Final_Layer/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Adam/Assign_1"
  op: "Assign"
  input: "beta2_power"
  input: "Adam/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Final_Layer/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/update"
  op: "NoOp"
  input: "^Adam/Assign"
  input: "^Adam/Assign_1"
  input: "^Adam/update_Final_Layer/bias/ApplyAdam"
  input: "^Adam/update_Final_Layer/kernel/ApplyAdam"
  input: "^Adam/update_conv1d_1/bias/ApplyAdam"
  input: "^Adam/update_conv1d_1/kernel/ApplyAdam"
  input: "^Adam/update_conv1d_2/bias/ApplyAdam"
  input: "^Adam/update_conv1d_2/kernel/ApplyAdam"
  input: "^Adam/update_conv1d_3/bias/ApplyAdam"
  input: "^Adam/update_conv1d_3/kernel/ApplyAdam"
  input: "^Adam/update_rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/bias/ApplyAdam"
  input: "^Adam/update_rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/kernel/ApplyAdam"
  input: "^Adam/update_rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/bias/ApplyAdam"
  input: "^Adam/update_rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/kernel/ApplyAdam"
  input: "^Adam/update_rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/bias/ApplyAdam"
  input: "^Adam/update_rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/kernel/ApplyAdam"
  input: "^Adam/update_rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/bias/ApplyAdam"
  input: "^Adam/update_rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/kernel/ApplyAdam"
  input: "^Adam/update_rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/bias/ApplyAdam"
  input: "^Adam/update_rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/kernel/ApplyAdam"
  input: "^Adam/update_rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/bias/ApplyAdam"
  input: "^Adam/update_rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/kernel/ApplyAdam"
}
node {
  name: "Adam/value"
  op: "Const"
  input: "^Adam/update"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "Adam"
  op: "AssignAdd"
  input: "global_step"
  input: "Adam/value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "loss/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "loss"
      }
    }
  }
}
node {
  name: "loss"
  op: "ScalarSummary"
  input: "loss/tags"
  input: "Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "init"
  op: "NoOp"
  input: "^Final_Layer/bias/Adam/Assign"
  input: "^Final_Layer/bias/Adam_1/Assign"
  input: "^Final_Layer/bias/Assign"
  input: "^Final_Layer/kernel/Adam/Assign"
  input: "^Final_Layer/kernel/Adam_1/Assign"
  input: "^Final_Layer/kernel/Assign"
  input: "^beta1_power/Assign"
  input: "^beta2_power/Assign"
  input: "^conv1d_1/bias/Adam/Assign"
  input: "^conv1d_1/bias/Adam_1/Assign"
  input: "^conv1d_1/bias/Assign"
  input: "^conv1d_1/kernel/Adam/Assign"
  input: "^conv1d_1/kernel/Adam_1/Assign"
  input: "^conv1d_1/kernel/Assign"
  input: "^conv1d_2/bias/Adam/Assign"
  input: "^conv1d_2/bias/Adam_1/Assign"
  input: "^conv1d_2/bias/Assign"
  input: "^conv1d_2/kernel/Adam/Assign"
  input: "^conv1d_2/kernel/Adam_1/Assign"
  input: "^conv1d_2/kernel/Assign"
  input: "^conv1d_3/bias/Adam/Assign"
  input: "^conv1d_3/bias/Adam_1/Assign"
  input: "^conv1d_3/bias/Assign"
  input: "^conv1d_3/kernel/Adam/Assign"
  input: "^conv1d_3/kernel/Adam_1/Assign"
  input: "^conv1d_3/kernel/Assign"
  input: "^global_step/Assign"
  input: "^rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/bias/Adam/Assign"
  input: "^rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/bias/Adam_1/Assign"
  input: "^rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/bias/Assign"
  input: "^rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/kernel/Adam/Assign"
  input: "^rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/kernel/Adam_1/Assign"
  input: "^rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/kernel/Assign"
  input: "^rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/bias/Adam/Assign"
  input: "^rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/bias/Adam_1/Assign"
  input: "^rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/bias/Assign"
  input: "^rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/kernel/Adam/Assign"
  input: "^rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/kernel/Adam_1/Assign"
  input: "^rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/kernel/Assign"
  input: "^rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/bias/Adam/Assign"
  input: "^rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/bias/Adam_1/Assign"
  input: "^rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/bias/Assign"
  input: "^rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/kernel/Adam/Assign"
  input: "^rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/kernel/Adam_1/Assign"
  input: "^rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/kernel/Assign"
  input: "^rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/bias/Adam/Assign"
  input: "^rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/bias/Adam_1/Assign"
  input: "^rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/bias/Assign"
  input: "^rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/kernel/Adam/Assign"
  input: "^rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/kernel/Adam_1/Assign"
  input: "^rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/kernel/Assign"
  input: "^rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/bias/Adam/Assign"
  input: "^rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/bias/Adam_1/Assign"
  input: "^rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/bias/Assign"
  input: "^rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/kernel/Adam/Assign"
  input: "^rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/kernel/Adam_1/Assign"
  input: "^rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/kernel/Assign"
  input: "^rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/bias/Adam/Assign"
  input: "^rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/bias/Adam_1/Assign"
  input: "^rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/bias/Assign"
  input: "^rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/kernel/Adam/Assign"
  input: "^rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/kernel/Adam_1/Assign"
  input: "^rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/kernel/Assign"
}
node {
  name: "init_1"
  op: "NoOp"
}
node {
  name: "group_deps"
  op: "NoOp"
  input: "^init"
  input: "^init_1"
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "conv1d_1/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "conv1d_1/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_3"
  op: "IsVariableInitialized"
  input: "conv1d_2/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_4"
  op: "IsVariableInitialized"
  input: "conv1d_2/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_5"
  op: "IsVariableInitialized"
  input: "conv1d_3/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_6"
  op: "IsVariableInitialized"
  input: "conv1d_3/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_7"
  op: "IsVariableInitialized"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_8"
  op: "IsVariableInitialized"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_9"
  op: "IsVariableInitialized"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_10"
  op: "IsVariableInitialized"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_11"
  op: "IsVariableInitialized"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_12"
  op: "IsVariableInitialized"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_13"
  op: "IsVariableInitialized"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_14"
  op: "IsVariableInitialized"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_15"
  op: "IsVariableInitialized"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_16"
  op: "IsVariableInitialized"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_17"
  op: "IsVariableInitialized"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_18"
  op: "IsVariableInitialized"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_19"
  op: "IsVariableInitialized"
  input: "Final_Layer/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Final_Layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_20"
  op: "IsVariableInitialized"
  input: "Final_Layer/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Final_Layer/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_21"
  op: "IsVariableInitialized"
  input: "beta1_power"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Final_Layer/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_22"
  op: "IsVariableInitialized"
  input: "beta2_power"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Final_Layer/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_23"
  op: "IsVariableInitialized"
  input: "conv1d_1/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_24"
  op: "IsVariableInitialized"
  input: "conv1d_1/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_25"
  op: "IsVariableInitialized"
  input: "conv1d_1/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_26"
  op: "IsVariableInitialized"
  input: "conv1d_1/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_27"
  op: "IsVariableInitialized"
  input: "conv1d_2/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_28"
  op: "IsVariableInitialized"
  input: "conv1d_2/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_29"
  op: "IsVariableInitialized"
  input: "conv1d_2/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_30"
  op: "IsVariableInitialized"
  input: "conv1d_2/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_31"
  op: "IsVariableInitialized"
  input: "conv1d_3/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_32"
  op: "IsVariableInitialized"
  input: "conv1d_3/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_33"
  op: "IsVariableInitialized"
  input: "conv1d_3/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_34"
  op: "IsVariableInitialized"
  input: "conv1d_3/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_35"
  op: "IsVariableInitialized"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_36"
  op: "IsVariableInitialized"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_37"
  op: "IsVariableInitialized"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_38"
  op: "IsVariableInitialized"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_39"
  op: "IsVariableInitialized"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_40"
  op: "IsVariableInitialized"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_41"
  op: "IsVariableInitialized"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_42"
  op: "IsVariableInitialized"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_43"
  op: "IsVariableInitialized"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_44"
  op: "IsVariableInitialized"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_45"
  op: "IsVariableInitialized"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_46"
  op: "IsVariableInitialized"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_47"
  op: "IsVariableInitialized"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_48"
  op: "IsVariableInitialized"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_49"
  op: "IsVariableInitialized"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_50"
  op: "IsVariableInitialized"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_51"
  op: "IsVariableInitialized"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_52"
  op: "IsVariableInitialized"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_53"
  op: "IsVariableInitialized"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_54"
  op: "IsVariableInitialized"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_55"
  op: "IsVariableInitialized"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_56"
  op: "IsVariableInitialized"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_57"
  op: "IsVariableInitialized"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_58"
  op: "IsVariableInitialized"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_59"
  op: "IsVariableInitialized"
  input: "Final_Layer/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Final_Layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_60"
  op: "IsVariableInitialized"
  input: "Final_Layer/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Final_Layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_61"
  op: "IsVariableInitialized"
  input: "Final_Layer/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Final_Layer/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_62"
  op: "IsVariableInitialized"
  input: "Final_Layer/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Final_Layer/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/stack"
  op: "Pack"
  input: "report_uninitialized_variables/IsVariableInitialized"
  input: "report_uninitialized_variables/IsVariableInitialized_1"
  input: "report_uninitialized_variables/IsVariableInitialized_2"
  input: "report_uninitialized_variables/IsVariableInitialized_3"
  input: "report_uninitialized_variables/IsVariableInitialized_4"
  input: "report_uninitialized_variables/IsVariableInitialized_5"
  input: "report_uninitialized_variables/IsVariableInitialized_6"
  input: "report_uninitialized_variables/IsVariableInitialized_7"
  input: "report_uninitialized_variables/IsVariableInitialized_8"
  input: "report_uninitialized_variables/IsVariableInitialized_9"
  input: "report_uninitialized_variables/IsVariableInitialized_10"
  input: "report_uninitialized_variables/IsVariableInitialized_11"
  input: "report_uninitialized_variables/IsVariableInitialized_12"
  input: "report_uninitialized_variables/IsVariableInitialized_13"
  input: "report_uninitialized_variables/IsVariableInitialized_14"
  input: "report_uninitialized_variables/IsVariableInitialized_15"
  input: "report_uninitialized_variables/IsVariableInitialized_16"
  input: "report_uninitialized_variables/IsVariableInitialized_17"
  input: "report_uninitialized_variables/IsVariableInitialized_18"
  input: "report_uninitialized_variables/IsVariableInitialized_19"
  input: "report_uninitialized_variables/IsVariableInitialized_20"
  input: "report_uninitialized_variables/IsVariableInitialized_21"
  input: "report_uninitialized_variables/IsVariableInitialized_22"
  input: "report_uninitialized_variables/IsVariableInitialized_23"
  input: "report_uninitialized_variables/IsVariableInitialized_24"
  input: "report_uninitialized_variables/IsVariableInitialized_25"
  input: "report_uninitialized_variables/IsVariableInitialized_26"
  input: "report_uninitialized_variables/IsVariableInitialized_27"
  input: "report_uninitialized_variables/IsVariableInitialized_28"
  input: "report_uninitialized_variables/IsVariableInitialized_29"
  input: "report_uninitialized_variables/IsVariableInitialized_30"
  input: "report_uninitialized_variables/IsVariableInitialized_31"
  input: "report_uninitialized_variables/IsVariableInitialized_32"
  input: "report_uninitialized_variables/IsVariableInitialized_33"
  input: "report_uninitialized_variables/IsVariableInitialized_34"
  input: "report_uninitialized_variables/IsVariableInitialized_35"
  input: "report_uninitialized_variables/IsVariableInitialized_36"
  input: "report_uninitialized_variables/IsVariableInitialized_37"
  input: "report_uninitialized_variables/IsVariableInitialized_38"
  input: "report_uninitialized_variables/IsVariableInitialized_39"
  input: "report_uninitialized_variables/IsVariableInitialized_40"
  input: "report_uninitialized_variables/IsVariableInitialized_41"
  input: "report_uninitialized_variables/IsVariableInitialized_42"
  input: "report_uninitialized_variables/IsVariableInitialized_43"
  input: "report_uninitialized_variables/IsVariableInitialized_44"
  input: "report_uninitialized_variables/IsVariableInitialized_45"
  input: "report_uninitialized_variables/IsVariableInitialized_46"
  input: "report_uninitialized_variables/IsVariableInitialized_47"
  input: "report_uninitialized_variables/IsVariableInitialized_48"
  input: "report_uninitialized_variables/IsVariableInitialized_49"
  input: "report_uninitialized_variables/IsVariableInitialized_50"
  input: "report_uninitialized_variables/IsVariableInitialized_51"
  input: "report_uninitialized_variables/IsVariableInitialized_52"
  input: "report_uninitialized_variables/IsVariableInitialized_53"
  input: "report_uninitialized_variables/IsVariableInitialized_54"
  input: "report_uninitialized_variables/IsVariableInitialized_55"
  input: "report_uninitialized_variables/IsVariableInitialized_56"
  input: "report_uninitialized_variables/IsVariableInitialized_57"
  input: "report_uninitialized_variables/IsVariableInitialized_58"
  input: "report_uninitialized_variables/IsVariableInitialized_59"
  input: "report_uninitialized_variables/IsVariableInitialized_60"
  input: "report_uninitialized_variables/IsVariableInitialized_61"
  input: "report_uninitialized_variables/IsVariableInitialized_62"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 63
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 63
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables/stack"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 63
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 63
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 63
          }
        }
        string_val: "global_step"
        string_val: "conv1d_1/kernel"
        string_val: "conv1d_1/bias"
        string_val: "conv1d_2/kernel"
        string_val: "conv1d_2/bias"
        string_val: "conv1d_3/kernel"
        string_val: "conv1d_3/bias"
        string_val: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/kernel"
        string_val: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/bias"
        string_val: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/kernel"
        string_val: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/bias"
        string_val: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/kernel"
        string_val: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/bias"
        string_val: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/kernel"
        string_val: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/bias"
        string_val: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/kernel"
        string_val: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/bias"
        string_val: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/kernel"
        string_val: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/bias"
        string_val: "Final_Layer/kernel"
        string_val: "Final_Layer/bias"
        string_val: "beta1_power"
        string_val: "beta2_power"
        string_val: "conv1d_1/kernel/Adam"
        string_val: "conv1d_1/kernel/Adam_1"
        string_val: "conv1d_1/bias/Adam"
        string_val: "conv1d_1/bias/Adam_1"
        string_val: "conv1d_2/kernel/Adam"
        string_val: "conv1d_2/kernel/Adam_1"
        string_val: "conv1d_2/bias/Adam"
        string_val: "conv1d_2/bias/Adam_1"
        string_val: "conv1d_3/kernel/Adam"
        string_val: "conv1d_3/kernel/Adam_1"
        string_val: "conv1d_3/bias/Adam"
        string_val: "conv1d_3/bias/Adam_1"
        string_val: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/kernel/Adam"
        string_val: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/kernel/Adam_1"
        string_val: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/bias/Adam"
        string_val: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/bias/Adam_1"
        string_val: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/kernel/Adam"
        string_val: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/kernel/Adam_1"
        string_val: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/bias/Adam"
        string_val: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/bias/Adam_1"
        string_val: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/kernel/Adam"
        string_val: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/kernel/Adam_1"
        string_val: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/bias/Adam"
        string_val: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/bias/Adam_1"
        string_val: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/kernel/Adam"
        string_val: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/kernel/Adam_1"
        string_val: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/bias/Adam"
        string_val: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/bias/Adam_1"
        string_val: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/kernel/Adam"
        string_val: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/kernel/Adam_1"
        string_val: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/bias/Adam"
        string_val: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/bias/Adam_1"
        string_val: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/kernel/Adam"
        string_val: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/kernel/Adam_1"
        string_val: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/bias/Adam"
        string_val: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/bias/Adam_1"
        string_val: "Final_Layer/kernel/Adam"
        string_val: "Final_Layer/kernel/Adam_1"
        string_val: "Final_Layer/bias/Adam"
        string_val: "Final_Layer/bias/Adam_1"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 63
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables/boolean_mask/strided_slice"
  input: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 63
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 63
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_2"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/values_1"
  op: "Pack"
  input: "report_uninitialized_variables/boolean_mask/Prod"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables/boolean_mask/concat/values_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2"
  input: "report_uninitialized_variables/boolean_mask/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables/Const"
  input: "report_uninitialized_variables/boolean_mask/concat"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 63
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables/LogicalNot"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 63
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables/boolean_mask/Where"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/GatherV2/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/GatherV2"
  op: "GatherV2"
  input: "report_uninitialized_variables/boolean_mask/Reshape"
  input: "report_uninitialized_variables/boolean_mask/Squeeze"
  input: "report_uninitialized_variables/boolean_mask/GatherV2/axis"
  device: "/device:CPU:0"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_resources/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables/boolean_mask/GatherV2"
  input: "report_uninitialized_resources/Const"
  input: "concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "conv1d_1/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "conv1d_1/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_3"
  op: "IsVariableInitialized"
  input: "conv1d_2/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_4"
  op: "IsVariableInitialized"
  input: "conv1d_2/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_5"
  op: "IsVariableInitialized"
  input: "conv1d_3/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_6"
  op: "IsVariableInitialized"
  input: "conv1d_3/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_7"
  op: "IsVariableInitialized"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_8"
  op: "IsVariableInitialized"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_9"
  op: "IsVariableInitialized"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_10"
  op: "IsVariableInitialized"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_11"
  op: "IsVariableInitialized"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_12"
  op: "IsVariableInitialized"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_13"
  op: "IsVariableInitialized"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_14"
  op: "IsVariableInitialized"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_15"
  op: "IsVariableInitialized"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_16"
  op: "IsVariableInitialized"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_17"
  op: "IsVariableInitialized"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_18"
  op: "IsVariableInitialized"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_19"
  op: "IsVariableInitialized"
  input: "Final_Layer/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Final_Layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_20"
  op: "IsVariableInitialized"
  input: "Final_Layer/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Final_Layer/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_21"
  op: "IsVariableInitialized"
  input: "beta1_power"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Final_Layer/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_22"
  op: "IsVariableInitialized"
  input: "beta2_power"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Final_Layer/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_23"
  op: "IsVariableInitialized"
  input: "conv1d_1/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_24"
  op: "IsVariableInitialized"
  input: "conv1d_1/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_25"
  op: "IsVariableInitialized"
  input: "conv1d_1/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_26"
  op: "IsVariableInitialized"
  input: "conv1d_1/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_27"
  op: "IsVariableInitialized"
  input: "conv1d_2/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_28"
  op: "IsVariableInitialized"
  input: "conv1d_2/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_29"
  op: "IsVariableInitialized"
  input: "conv1d_2/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_30"
  op: "IsVariableInitialized"
  input: "conv1d_2/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_31"
  op: "IsVariableInitialized"
  input: "conv1d_3/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_32"
  op: "IsVariableInitialized"
  input: "conv1d_3/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_33"
  op: "IsVariableInitialized"
  input: "conv1d_3/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_34"
  op: "IsVariableInitialized"
  input: "conv1d_3/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_35"
  op: "IsVariableInitialized"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_36"
  op: "IsVariableInitialized"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_37"
  op: "IsVariableInitialized"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_38"
  op: "IsVariableInitialized"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_39"
  op: "IsVariableInitialized"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_40"
  op: "IsVariableInitialized"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_41"
  op: "IsVariableInitialized"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_42"
  op: "IsVariableInitialized"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_43"
  op: "IsVariableInitialized"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_44"
  op: "IsVariableInitialized"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_45"
  op: "IsVariableInitialized"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_46"
  op: "IsVariableInitialized"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_47"
  op: "IsVariableInitialized"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_48"
  op: "IsVariableInitialized"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_49"
  op: "IsVariableInitialized"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_50"
  op: "IsVariableInitialized"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_51"
  op: "IsVariableInitialized"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_52"
  op: "IsVariableInitialized"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_53"
  op: "IsVariableInitialized"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_54"
  op: "IsVariableInitialized"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_55"
  op: "IsVariableInitialized"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_56"
  op: "IsVariableInitialized"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_57"
  op: "IsVariableInitialized"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_58"
  op: "IsVariableInitialized"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_59"
  op: "IsVariableInitialized"
  input: "Final_Layer/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Final_Layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_60"
  op: "IsVariableInitialized"
  input: "Final_Layer/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Final_Layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_61"
  op: "IsVariableInitialized"
  input: "Final_Layer/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Final_Layer/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_62"
  op: "IsVariableInitialized"
  input: "Final_Layer/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Final_Layer/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/stack"
  op: "Pack"
  input: "report_uninitialized_variables_1/IsVariableInitialized"
  input: "report_uninitialized_variables_1/IsVariableInitialized_1"
  input: "report_uninitialized_variables_1/IsVariableInitialized_2"
  input: "report_uninitialized_variables_1/IsVariableInitialized_3"
  input: "report_uninitialized_variables_1/IsVariableInitialized_4"
  input: "report_uninitialized_variables_1/IsVariableInitialized_5"
  input: "report_uninitialized_variables_1/IsVariableInitialized_6"
  input: "report_uninitialized_variables_1/IsVariableInitialized_7"
  input: "report_uninitialized_variables_1/IsVariableInitialized_8"
  input: "report_uninitialized_variables_1/IsVariableInitialized_9"
  input: "report_uninitialized_variables_1/IsVariableInitialized_10"
  input: "report_uninitialized_variables_1/IsVariableInitialized_11"
  input: "report_uninitialized_variables_1/IsVariableInitialized_12"
  input: "report_uninitialized_variables_1/IsVariableInitialized_13"
  input: "report_uninitialized_variables_1/IsVariableInitialized_14"
  input: "report_uninitialized_variables_1/IsVariableInitialized_15"
  input: "report_uninitialized_variables_1/IsVariableInitialized_16"
  input: "report_uninitialized_variables_1/IsVariableInitialized_17"
  input: "report_uninitialized_variables_1/IsVariableInitialized_18"
  input: "report_uninitialized_variables_1/IsVariableInitialized_19"
  input: "report_uninitialized_variables_1/IsVariableInitialized_20"
  input: "report_uninitialized_variables_1/IsVariableInitialized_21"
  input: "report_uninitialized_variables_1/IsVariableInitialized_22"
  input: "report_uninitialized_variables_1/IsVariableInitialized_23"
  input: "report_uninitialized_variables_1/IsVariableInitialized_24"
  input: "report_uninitialized_variables_1/IsVariableInitialized_25"
  input: "report_uninitialized_variables_1/IsVariableInitialized_26"
  input: "report_uninitialized_variables_1/IsVariableInitialized_27"
  input: "report_uninitialized_variables_1/IsVariableInitialized_28"
  input: "report_uninitialized_variables_1/IsVariableInitialized_29"
  input: "report_uninitialized_variables_1/IsVariableInitialized_30"
  input: "report_uninitialized_variables_1/IsVariableInitialized_31"
  input: "report_uninitialized_variables_1/IsVariableInitialized_32"
  input: "report_uninitialized_variables_1/IsVariableInitialized_33"
  input: "report_uninitialized_variables_1/IsVariableInitialized_34"
  input: "report_uninitialized_variables_1/IsVariableInitialized_35"
  input: "report_uninitialized_variables_1/IsVariableInitialized_36"
  input: "report_uninitialized_variables_1/IsVariableInitialized_37"
  input: "report_uninitialized_variables_1/IsVariableInitialized_38"
  input: "report_uninitialized_variables_1/IsVariableInitialized_39"
  input: "report_uninitialized_variables_1/IsVariableInitialized_40"
  input: "report_uninitialized_variables_1/IsVariableInitialized_41"
  input: "report_uninitialized_variables_1/IsVariableInitialized_42"
  input: "report_uninitialized_variables_1/IsVariableInitialized_43"
  input: "report_uninitialized_variables_1/IsVariableInitialized_44"
  input: "report_uninitialized_variables_1/IsVariableInitialized_45"
  input: "report_uninitialized_variables_1/IsVariableInitialized_46"
  input: "report_uninitialized_variables_1/IsVariableInitialized_47"
  input: "report_uninitialized_variables_1/IsVariableInitialized_48"
  input: "report_uninitialized_variables_1/IsVariableInitialized_49"
  input: "report_uninitialized_variables_1/IsVariableInitialized_50"
  input: "report_uninitialized_variables_1/IsVariableInitialized_51"
  input: "report_uninitialized_variables_1/IsVariableInitialized_52"
  input: "report_uninitialized_variables_1/IsVariableInitialized_53"
  input: "report_uninitialized_variables_1/IsVariableInitialized_54"
  input: "report_uninitialized_variables_1/IsVariableInitialized_55"
  input: "report_uninitialized_variables_1/IsVariableInitialized_56"
  input: "report_uninitialized_variables_1/IsVariableInitialized_57"
  input: "report_uninitialized_variables_1/IsVariableInitialized_58"
  input: "report_uninitialized_variables_1/IsVariableInitialized_59"
  input: "report_uninitialized_variables_1/IsVariableInitialized_60"
  input: "report_uninitialized_variables_1/IsVariableInitialized_61"
  input: "report_uninitialized_variables_1/IsVariableInitialized_62"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 63
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 63
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables_1/stack"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 63
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 63
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 63
          }
        }
        string_val: "global_step"
        string_val: "conv1d_1/kernel"
        string_val: "conv1d_1/bias"
        string_val: "conv1d_2/kernel"
        string_val: "conv1d_2/bias"
        string_val: "conv1d_3/kernel"
        string_val: "conv1d_3/bias"
        string_val: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/kernel"
        string_val: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/bias"
        string_val: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/kernel"
        string_val: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/bias"
        string_val: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/kernel"
        string_val: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/bias"
        string_val: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/kernel"
        string_val: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/bias"
        string_val: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/kernel"
        string_val: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/bias"
        string_val: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/kernel"
        string_val: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/bias"
        string_val: "Final_Layer/kernel"
        string_val: "Final_Layer/bias"
        string_val: "beta1_power"
        string_val: "beta2_power"
        string_val: "conv1d_1/kernel/Adam"
        string_val: "conv1d_1/kernel/Adam_1"
        string_val: "conv1d_1/bias/Adam"
        string_val: "conv1d_1/bias/Adam_1"
        string_val: "conv1d_2/kernel/Adam"
        string_val: "conv1d_2/kernel/Adam_1"
        string_val: "conv1d_2/bias/Adam"
        string_val: "conv1d_2/bias/Adam_1"
        string_val: "conv1d_3/kernel/Adam"
        string_val: "conv1d_3/kernel/Adam_1"
        string_val: "conv1d_3/bias/Adam"
        string_val: "conv1d_3/bias/Adam_1"
        string_val: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/kernel/Adam"
        string_val: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/kernel/Adam_1"
        string_val: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/bias/Adam"
        string_val: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/bias/Adam_1"
        string_val: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/kernel/Adam"
        string_val: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/kernel/Adam_1"
        string_val: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/bias/Adam"
        string_val: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/bias/Adam_1"
        string_val: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/kernel/Adam"
        string_val: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/kernel/Adam_1"
        string_val: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/bias/Adam"
        string_val: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/bias/Adam_1"
        string_val: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/kernel/Adam"
        string_val: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/kernel/Adam_1"
        string_val: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/bias/Adam"
        string_val: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/bias/Adam_1"
        string_val: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/kernel/Adam"
        string_val: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/kernel/Adam_1"
        string_val: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/bias/Adam"
        string_val: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/bias/Adam_1"
        string_val: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/kernel/Adam"
        string_val: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/kernel/Adam_1"
        string_val: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/bias/Adam"
        string_val: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/bias/Adam_1"
        string_val: "Final_Layer/kernel/Adam"
        string_val: "Final_Layer/kernel/Adam_1"
        string_val: "Final_Layer/bias/Adam"
        string_val: "Final_Layer/bias/Adam_1"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 63
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice"
  input: "report_uninitialized_variables_1/boolean_mask/Prod/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 63
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 63
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape_2"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat/values_1"
  op: "Pack"
  input: "report_uninitialized_variables_1/boolean_mask/Prod"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables_1/boolean_mask/concat/values_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2"
  input: "report_uninitialized_variables_1/boolean_mask/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables_1/Const"
  input: "report_uninitialized_variables_1/boolean_mask/concat"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 63
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables_1/LogicalNot"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 63
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables_1/boolean_mask/Where"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/GatherV2/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/GatherV2"
  op: "GatherV2"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape"
  input: "report_uninitialized_variables_1/boolean_mask/Squeeze"
  input: "report_uninitialized_variables_1/boolean_mask/GatherV2/axis"
  device: "/device:CPU:0"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_resources_1/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "concat_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "concat_1"
  op: "ConcatV2"
  input: "report_uninitialized_variables_1/boolean_mask/GatherV2"
  input: "report_uninitialized_resources_1/Const"
  input: "concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "init_2"
  op: "NoOp"
}
node {
  name: "init_all_tables"
  op: "NoOp"
}
node {
  name: "init_3"
  op: "NoOp"
}
node {
  name: "group_deps_1"
  op: "NoOp"
  input: "^init_2"
  input: "^init_3"
  input: "^init_all_tables"
}
node {
  name: "Merge/MergeSummary"
  op: "MergeSummary"
  input: "loss"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/filename/input"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "model"
      }
    }
  }
}
node {
  name: "save/filename"
  op: "PlaceholderWithDefault"
  input: "save/filename/input"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "save/Const"
  op: "PlaceholderWithDefault"
  input: "save/filename"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "save/StringJoin/inputs_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "_temp_e719c02f22374ee0b2e2a2b9d17a16e6/part"
      }
    }
  }
}
node {
  name: "save/StringJoin"
  op: "StringJoin"
  input: "save/Const"
  input: "save/StringJoin/inputs_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "separator"
    value {
      s: ""
    }
  }
}
node {
  name: "save/num_shards"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "save/ShardedFilename/shard"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "save/ShardedFilename"
  op: "ShardedFilename"
  input: "save/StringJoin"
  input: "save/ShardedFilename/shard"
  input: "save/num_shards"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/SaveV2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 63
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 63
          }
        }
        string_val: "Final_Layer/bias"
        string_val: "Final_Layer/bias/Adam"
        string_val: "Final_Layer/bias/Adam_1"
        string_val: "Final_Layer/kernel"
        string_val: "Final_Layer/kernel/Adam"
        string_val: "Final_Layer/kernel/Adam_1"
        string_val: "beta1_power"
        string_val: "beta2_power"
        string_val: "conv1d_1/bias"
        string_val: "conv1d_1/bias/Adam"
        string_val: "conv1d_1/bias/Adam_1"
        string_val: "conv1d_1/kernel"
        string_val: "conv1d_1/kernel/Adam"
        string_val: "conv1d_1/kernel/Adam_1"
        string_val: "conv1d_2/bias"
        string_val: "conv1d_2/bias/Adam"
        string_val: "conv1d_2/bias/Adam_1"
        string_val: "conv1d_2/kernel"
        string_val: "conv1d_2/kernel/Adam"
        string_val: "conv1d_2/kernel/Adam_1"
        string_val: "conv1d_3/bias"
        string_val: "conv1d_3/bias/Adam"
        string_val: "conv1d_3/bias/Adam_1"
        string_val: "conv1d_3/kernel"
        string_val: "conv1d_3/kernel/Adam"
        string_val: "conv1d_3/kernel/Adam_1"
        string_val: "global_step"
        string_val: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/bias"
        string_val: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/bias/Adam"
        string_val: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/bias/Adam_1"
        string_val: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/kernel"
        string_val: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/kernel/Adam"
        string_val: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/kernel/Adam_1"
        string_val: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/bias"
        string_val: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/bias/Adam"
        string_val: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/bias/Adam_1"
        string_val: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/kernel"
        string_val: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/kernel/Adam"
        string_val: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/kernel/Adam_1"
        string_val: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/bias"
        string_val: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/bias/Adam"
        string_val: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/bias/Adam_1"
        string_val: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/kernel"
        string_val: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/kernel/Adam"
        string_val: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/kernel/Adam_1"
        string_val: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/bias"
        string_val: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/bias/Adam"
        string_val: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/bias/Adam_1"
        string_val: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/kernel"
        string_val: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/kernel/Adam"
        string_val: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/kernel/Adam_1"
        string_val: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/bias"
        string_val: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/bias/Adam"
        string_val: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/bias/Adam_1"
        string_val: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/kernel"
        string_val: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/kernel/Adam"
        string_val: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/kernel/Adam_1"
        string_val: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/bias"
        string_val: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/bias/Adam"
        string_val: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/bias/Adam_1"
        string_val: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/kernel"
        string_val: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/kernel/Adam"
        string_val: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/kernel/Adam_1"
      }
    }
  }
}
node {
  name: "save/SaveV2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 63
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 63
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/SaveV2"
  op: "SaveV2"
  input: "save/ShardedFilename"
  input: "save/SaveV2/tensor_names"
  input: "save/SaveV2/shape_and_slices"
  input: "Final_Layer/bias"
  input: "Final_Layer/bias/Adam"
  input: "Final_Layer/bias/Adam_1"
  input: "Final_Layer/kernel"
  input: "Final_Layer/kernel/Adam"
  input: "Final_Layer/kernel/Adam_1"
  input: "beta1_power"
  input: "beta2_power"
  input: "conv1d_1/bias"
  input: "conv1d_1/bias/Adam"
  input: "conv1d_1/bias/Adam_1"
  input: "conv1d_1/kernel"
  input: "conv1d_1/kernel/Adam"
  input: "conv1d_1/kernel/Adam_1"
  input: "conv1d_2/bias"
  input: "conv1d_2/bias/Adam"
  input: "conv1d_2/bias/Adam_1"
  input: "conv1d_2/kernel"
  input: "conv1d_2/kernel/Adam"
  input: "conv1d_2/kernel/Adam_1"
  input: "conv1d_3/bias"
  input: "conv1d_3/bias/Adam"
  input: "conv1d_3/bias/Adam_1"
  input: "conv1d_3/kernel"
  input: "conv1d_3/kernel/Adam"
  input: "conv1d_3/kernel/Adam_1"
  input: "global_step"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/bias"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/bias/Adam"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/bias/Adam_1"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/kernel"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/kernel/Adam"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/kernel/Adam_1"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/bias"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/bias/Adam"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/bias/Adam_1"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/kernel"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/kernel/Adam"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/kernel/Adam_1"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/bias"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/bias/Adam"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/bias/Adam_1"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/kernel"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/kernel/Adam"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/kernel/Adam_1"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/bias"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/bias/Adam"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/bias/Adam_1"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/kernel"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/kernel/Adam"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/kernel/Adam_1"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/bias"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/bias/Adam"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/bias/Adam_1"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/kernel"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/kernel/Adam"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/kernel/Adam_1"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/bias"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/bias/Adam"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/bias/Adam_1"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/kernel"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/kernel/Adam"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/kernel/Adam_1"
  device: "/device:CPU:0"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/control_dependency"
  op: "Identity"
  input: "save/ShardedFilename"
  input: "^save/SaveV2"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save/ShardedFilename"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/MergeV2Checkpoints/checkpoint_prefixes"
  op: "Pack"
  input: "save/ShardedFilename"
  input: "^save/control_dependency"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "save/MergeV2Checkpoints"
  op: "MergeV2Checkpoints"
  input: "save/MergeV2Checkpoints/checkpoint_prefixes"
  input: "save/Const"
  device: "/device:CPU:0"
  attr {
    key: "delete_old_dirs"
    value {
      b: true
    }
  }
}
node {
  name: "save/Identity"
  op: "Identity"
  input: "save/Const"
  input: "^save/MergeV2Checkpoints"
  input: "^save/control_dependency"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/RestoreV2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 63
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 63
          }
        }
        string_val: "Final_Layer/bias"
        string_val: "Final_Layer/bias/Adam"
        string_val: "Final_Layer/bias/Adam_1"
        string_val: "Final_Layer/kernel"
        string_val: "Final_Layer/kernel/Adam"
        string_val: "Final_Layer/kernel/Adam_1"
        string_val: "beta1_power"
        string_val: "beta2_power"
        string_val: "conv1d_1/bias"
        string_val: "conv1d_1/bias/Adam"
        string_val: "conv1d_1/bias/Adam_1"
        string_val: "conv1d_1/kernel"
        string_val: "conv1d_1/kernel/Adam"
        string_val: "conv1d_1/kernel/Adam_1"
        string_val: "conv1d_2/bias"
        string_val: "conv1d_2/bias/Adam"
        string_val: "conv1d_2/bias/Adam_1"
        string_val: "conv1d_2/kernel"
        string_val: "conv1d_2/kernel/Adam"
        string_val: "conv1d_2/kernel/Adam_1"
        string_val: "conv1d_3/bias"
        string_val: "conv1d_3/bias/Adam"
        string_val: "conv1d_3/bias/Adam_1"
        string_val: "conv1d_3/kernel"
        string_val: "conv1d_3/kernel/Adam"
        string_val: "conv1d_3/kernel/Adam_1"
        string_val: "global_step"
        string_val: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/bias"
        string_val: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/bias/Adam"
        string_val: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/bias/Adam_1"
        string_val: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/kernel"
        string_val: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/kernel/Adam"
        string_val: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/kernel/Adam_1"
        string_val: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/bias"
        string_val: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/bias/Adam"
        string_val: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/bias/Adam_1"
        string_val: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/kernel"
        string_val: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/kernel/Adam"
        string_val: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/kernel/Adam_1"
        string_val: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/bias"
        string_val: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/bias/Adam"
        string_val: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/bias/Adam_1"
        string_val: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/kernel"
        string_val: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/kernel/Adam"
        string_val: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/kernel/Adam_1"
        string_val: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/bias"
        string_val: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/bias/Adam"
        string_val: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/bias/Adam_1"
        string_val: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/kernel"
        string_val: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/kernel/Adam"
        string_val: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/kernel/Adam_1"
        string_val: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/bias"
        string_val: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/bias/Adam"
        string_val: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/bias/Adam_1"
        string_val: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/kernel"
        string_val: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/kernel/Adam"
        string_val: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/kernel/Adam_1"
        string_val: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/bias"
        string_val: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/bias/Adam"
        string_val: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/bias/Adam_1"
        string_val: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/kernel"
        string_val: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/kernel/Adam"
        string_val: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/kernel/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 63
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 63
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2/tensor_names"
  input: "save/RestoreV2/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign"
  op: "Assign"
  input: "Final_Layer/bias"
  input: "save/RestoreV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Final_Layer/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 23
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_1"
  op: "Assign"
  input: "Final_Layer/bias/Adam"
  input: "save/RestoreV2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Final_Layer/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 23
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_2"
  op: "Assign"
  input: "Final_Layer/bias/Adam_1"
  input: "save/RestoreV2:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Final_Layer/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 23
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_3"
  op: "Assign"
  input: "Final_Layer/kernel"
  input: "save/RestoreV2:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Final_Layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 23
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_4"
  op: "Assign"
  input: "Final_Layer/kernel/Adam"
  input: "save/RestoreV2:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Final_Layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 23
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_5"
  op: "Assign"
  input: "Final_Layer/kernel/Adam_1"
  input: "save/RestoreV2:5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Final_Layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 23
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_6"
  op: "Assign"
  input: "beta1_power"
  input: "save/RestoreV2:6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Final_Layer/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_7"
  op: "Assign"
  input: "beta2_power"
  input: "save/RestoreV2:7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Final_Layer/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_8"
  op: "Assign"
  input: "conv1d_1/bias"
  input: "save/RestoreV2:8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_9"
  op: "Assign"
  input: "conv1d_1/bias/Adam"
  input: "save/RestoreV2:9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_10"
  op: "Assign"
  input: "conv1d_1/bias/Adam_1"
  input: "save/RestoreV2:10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_11"
  op: "Assign"
  input: "conv1d_1/kernel"
  input: "save/RestoreV2:11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_12"
  op: "Assign"
  input: "conv1d_1/kernel/Adam"
  input: "save/RestoreV2:12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_13"
  op: "Assign"
  input: "conv1d_1/kernel/Adam_1"
  input: "save/RestoreV2:13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_14"
  op: "Assign"
  input: "conv1d_2/bias"
  input: "save/RestoreV2:14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_15"
  op: "Assign"
  input: "conv1d_2/bias/Adam"
  input: "save/RestoreV2:15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_16"
  op: "Assign"
  input: "conv1d_2/bias/Adam_1"
  input: "save/RestoreV2:16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_17"
  op: "Assign"
  input: "conv1d_2/kernel"
  input: "save/RestoreV2:17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 48
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_18"
  op: "Assign"
  input: "conv1d_2/kernel/Adam"
  input: "save/RestoreV2:18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 48
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_19"
  op: "Assign"
  input: "conv1d_2/kernel/Adam_1"
  input: "save/RestoreV2:19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 48
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_20"
  op: "Assign"
  input: "conv1d_3/bias"
  input: "save/RestoreV2:20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 96
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_21"
  op: "Assign"
  input: "conv1d_3/bias/Adam"
  input: "save/RestoreV2:21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 96
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_22"
  op: "Assign"
  input: "conv1d_3/bias/Adam_1"
  input: "save/RestoreV2:22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 96
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_23"
  op: "Assign"
  input: "conv1d_3/kernel"
  input: "save/RestoreV2:23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 96
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_24"
  op: "Assign"
  input: "conv1d_3/kernel/Adam"
  input: "save/RestoreV2:24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 96
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_25"
  op: "Assign"
  input: "conv1d_3/kernel/Adam_1"
  input: "save/RestoreV2:25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 96
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_26"
  op: "Assign"
  input: "global_step"
  input: "save/RestoreV2:26"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_27"
  op: "Assign"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/bias"
  input: "save/RestoreV2:27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_28"
  op: "Assign"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/bias/Adam"
  input: "save/RestoreV2:28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_29"
  op: "Assign"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/bias/Adam_1"
  input: "save/RestoreV2:29"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_30"
  op: "Assign"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/kernel"
  input: "save/RestoreV2:30"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 224
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_31"
  op: "Assign"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/kernel/Adam"
  input: "save/RestoreV2:31"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 224
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_32"
  op: "Assign"
  input: "rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/kernel/Adam_1"
  input: "save/RestoreV2:32"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 224
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_33"
  op: "Assign"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/bias"
  input: "save/RestoreV2:33"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_34"
  op: "Assign"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/bias/Adam"
  input: "save/RestoreV2:34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_35"
  op: "Assign"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/bias/Adam_1"
  input: "save/RestoreV2:35"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_36"
  op: "Assign"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/kernel"
  input: "save/RestoreV2:36"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 224
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_37"
  op: "Assign"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/kernel/Adam"
  input: "save/RestoreV2:37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 224
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_38"
  op: "Assign"
  input: "rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/kernel/Adam_1"
  input: "save/RestoreV2:38"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_0/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 224
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_39"
  op: "Assign"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/bias"
  input: "save/RestoreV2:39"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_40"
  op: "Assign"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/bias/Adam"
  input: "save/RestoreV2:40"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_41"
  op: "Assign"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/bias/Adam_1"
  input: "save/RestoreV2:41"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_42"
  op: "Assign"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/kernel"
  input: "save/RestoreV2:42"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_43"
  op: "Assign"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/kernel/Adam"
  input: "save/RestoreV2:43"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_44"
  op: "Assign"
  input: "rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/kernel/Adam_1"
  input: "save/RestoreV2:44"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_45"
  op: "Assign"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/bias"
  input: "save/RestoreV2:45"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_46"
  op: "Assign"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/bias/Adam"
  input: "save/RestoreV2:46"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_47"
  op: "Assign"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/bias/Adam_1"
  input: "save/RestoreV2:47"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_48"
  op: "Assign"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/kernel"
  input: "save/RestoreV2:48"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_49"
  op: "Assign"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/kernel/Adam"
  input: "save/RestoreV2:49"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_50"
  op: "Assign"
  input: "rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/kernel/Adam_1"
  input: "save/RestoreV2:50"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_1/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_51"
  op: "Assign"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/bias"
  input: "save/RestoreV2:51"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_52"
  op: "Assign"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/bias/Adam"
  input: "save/RestoreV2:52"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_53"
  op: "Assign"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/bias/Adam_1"
  input: "save/RestoreV2:53"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_54"
  op: "Assign"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/kernel"
  input: "save/RestoreV2:54"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_55"
  op: "Assign"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/kernel/Adam"
  input: "save/RestoreV2:55"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_56"
  op: "Assign"
  input: "rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/kernel/Adam_1"
  input: "save/RestoreV2:56"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_57"
  op: "Assign"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/bias"
  input: "save/RestoreV2:57"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_58"
  op: "Assign"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/bias/Adam"
  input: "save/RestoreV2:58"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_59"
  op: "Assign"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/bias/Adam_1"
  input: "save/RestoreV2:59"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_60"
  op: "Assign"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/kernel"
  input: "save/RestoreV2:60"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_61"
  op: "Assign"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/kernel/Adam"
  input: "save/RestoreV2:61"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_62"
  op: "Assign"
  input: "rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/kernel/Adam_1"
  input: "save/RestoreV2:62"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn_classification/cell_2/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_shard"
  op: "NoOp"
  input: "^save/Assign"
  input: "^save/Assign_1"
  input: "^save/Assign_10"
  input: "^save/Assign_11"
  input: "^save/Assign_12"
  input: "^save/Assign_13"
  input: "^save/Assign_14"
  input: "^save/Assign_15"
  input: "^save/Assign_16"
  input: "^save/Assign_17"
  input: "^save/Assign_18"
  input: "^save/Assign_19"
  input: "^save/Assign_2"
  input: "^save/Assign_20"
  input: "^save/Assign_21"
  input: "^save/Assign_22"
  input: "^save/Assign_23"
  input: "^save/Assign_24"
  input: "^save/Assign_25"
  input: "^save/Assign_26"
  input: "^save/Assign_27"
  input: "^save/Assign_28"
  input: "^save/Assign_29"
  input: "^save/Assign_3"
  input: "^save/Assign_30"
  input: "^save/Assign_31"
  input: "^save/Assign_32"
  input: "^save/Assign_33"
  input: "^save/Assign_34"
  input: "^save/Assign_35"
  input: "^save/Assign_36"
  input: "^save/Assign_37"
  input: "^save/Assign_38"
  input: "^save/Assign_39"
  input: "^save/Assign_4"
  input: "^save/Assign_40"
  input: "^save/Assign_41"
  input: "^save/Assign_42"
  input: "^save/Assign_43"
  input: "^save/Assign_44"
  input: "^save/Assign_45"
  input: "^save/Assign_46"
  input: "^save/Assign_47"
  input: "^save/Assign_48"
  input: "^save/Assign_49"
  input: "^save/Assign_5"
  input: "^save/Assign_50"
  input: "^save/Assign_51"
  input: "^save/Assign_52"
  input: "^save/Assign_53"
  input: "^save/Assign_54"
  input: "^save/Assign_55"
  input: "^save/Assign_56"
  input: "^save/Assign_57"
  input: "^save/Assign_58"
  input: "^save/Assign_59"
  input: "^save/Assign_6"
  input: "^save/Assign_60"
  input: "^save/Assign_61"
  input: "^save/Assign_62"
  input: "^save/Assign_7"
  input: "^save/Assign_8"
  input: "^save/Assign_9"
}
node {
  name: "save/restore_all"
  op: "NoOp"
  input: "^save/restore_shard"
}
library {
  function {
    signature {
      name: "__inference_Dataset_map_<class \'functools.partial\'>_78"
      input_arg {
        name: "args_0"
        type: DT_STRING
      }
      output_arg {
        name: "identity"
        type: DT_INT64
      }
      output_arg {
        name: "identity_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_2"
        type: DT_INT64
      }
      output_arg {
        name: "identity_3"
        type: DT_INT64
      }
    }
    node_def {
      name: "ParseSingleExample/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
    }
    node_def {
      name: "ParseSingleExample/Const_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
    }
    node_def {
      name: "ParseSingleExample/ParseSingleExample"
      op: "ParseSingleExample"
      input: "args_0"
      input: "ParseSingleExample/Const:output:0"
      input: "ParseSingleExample/Const_1:output:0"
      attr {
        key: "Tdense"
        value {
          list {
            type: DT_INT64
            type: DT_INT64
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dense_keys"
        value {
          list {
            s: "class_index"
            s: "shape"
          }
        }
      }
      attr {
        key: "dense_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "num_sparse"
        value {
          i: 1
        }
      }
      attr {
        key: "sparse_keys"
        value {
          list {
            s: "ink"
          }
        }
      }
      attr {
        key: "sparse_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node_def {
      name: "SparseToDense/default_value"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "SparseToDense"
      op: "SparseToDense"
      input: "ParseSingleExample/ParseSingleExample:sparse_indices:0"
      input: "ParseSingleExample/ParseSingleExample:sparse_shapes:0"
      input: "ParseSingleExample/ParseSingleExample:sparse_values:0"
      input: "SparseToDense/default_value:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tindices"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "validate_indices"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "ParseSingleExample/ParseSingleExample:dense_values:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "SparseToDense:dense:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node_def {
      name: "Identity_2"
      op: "Identity"
      input: "ParseSingleExample/ParseSingleExample:dense_values:1"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node_def {
      name: "Identity_3"
      op: "Identity"
      input: "ParseSingleExample/ParseSingleExample:dense_values:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    ret {
      key: "identity_1"
      value: "Identity_1:output:0"
    }
    ret {
      key: "identity_2"
      value: "Identity_2:output:0"
    }
    ret {
      key: "identity_3"
      value: "Identity_3:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "args_0"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "_make_dataset_pda7gjKIBUs"
      output_arg {
        name: "modeldataset"
        type: DT_VARIANT
      }
      description: "Factory function for a dataset."
      is_stateful: true
    }
    node_def {
      name: "optimizations"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 3
              }
            }
            string_val: "map_and_batch_fusion"
            string_val: "noop_elimination"
            string_val: "shuffle_and_repeat_fusion"
          }
        }
      }
    }
    node_def {
      name: "OptimizeDataset/list_files/file_pattern"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "D:\\Soumik\\SketchRnn\\D2AQD23\\RevisedStrokeNew\\train-00000-of-00001"
          }
        }
      }
    }
    node_def {
      name: "OptimizeDataset/list_files/MatchingFiles"
      op: "MatchingFiles"
      input: "OptimizeDataset/list_files/file_pattern:output:0"
      device: "/device:CPU:0"
    }
    node_def {
      name: "OptimizeDataset/list_files/Identity"
      op: "Identity"
      input: "OptimizeDataset/list_files/MatchingFiles:filenames:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
    }
    node_def {
      name: "OptimizeDataset/list_files/TensorSliceDataset"
      op: "TensorSliceDataset"
      input: "OptimizeDataset/list_files/Identity:output:0"
      device: "/device:CPU:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_STRING
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "OptimizeDataset/list_files/file_pattern_1"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "D:\\Soumik\\SketchRnn\\D2AQD23\\RevisedStrokeNew\\train-00000-of-00001"
          }
        }
      }
    }
    node_def {
      name: "OptimizeDataset/list_files/MatchingFiles_1"
      op: "MatchingFiles"
      input: "OptimizeDataset/list_files/file_pattern_1:output:0"
      device: "/device:CPU:0"
    }
    node_def {
      name: "OptimizeDataset/list_files/Identity_1"
      op: "Identity"
      input: "OptimizeDataset/list_files/MatchingFiles_1:filenames:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
    }
    node_def {
      name: "OptimizeDataset/list_files/Shape_1"
      op: "Shape"
      input: "OptimizeDataset/list_files/Identity_1:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT64
        }
      }
    }
    node_def {
      name: "OptimizeDataset/list_files/strided_slice_1/stack"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "OptimizeDataset/list_files/strided_slice_1/stack_1"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "OptimizeDataset/list_files/strided_slice_1/stack_2"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "OptimizeDataset/list_files/strided_slice_1"
      op: "StridedSlice"
      input: "OptimizeDataset/list_files/Shape_1:output:0"
      input: "OptimizeDataset/list_files/strided_slice_1/stack:output:0"
      input: "OptimizeDataset/list_files/strided_slice_1/stack_1:output:0"
      input: "OptimizeDataset/list_files/strided_slice_1/stack_2:output:0"
      device: "/device:CPU:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "OptimizeDataset/list_files/Maximum/y"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 1
          }
        }
      }
    }
    node_def {
      name: "OptimizeDataset/list_files/Maximum"
      op: "Maximum"
      input: "OptimizeDataset/list_files/strided_slice_1:output:0"
      input: "OptimizeDataset/list_files/Maximum/y:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
    }
    node_def {
      name: "OptimizeDataset/list_files/seed"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 0
          }
        }
      }
    }
    node_def {
      name: "OptimizeDataset/list_files/seed2"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 0
          }
        }
      }
    }
    node_def {
      name: "OptimizeDataset/list_files/ShuffleDataset"
      op: "ShuffleDataset"
      input: "OptimizeDataset/list_files/TensorSliceDataset:handle:0"
      input: "OptimizeDataset/list_files/Maximum:z:0"
      input: "OptimizeDataset/list_files/seed:output:0"
      input: "OptimizeDataset/list_files/seed2:output:0"
      device: "/device:CPU:0"
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_STRING
          }
        }
      }
      attr {
        key: "reshuffle_each_iteration"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "OptimizeDataset/cycle_length"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 10
          }
        }
      }
    }
    node_def {
      name: "OptimizeDataset/block_length"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 1
          }
        }
      }
    }
    node_def {
      name: "OptimizeDataset/InterleaveDataset"
      op: "InterleaveDataset"
      input: "OptimizeDataset/list_files/ShuffleDataset:handle:0"
      input: "OptimizeDataset/cycle_length:output:0"
      input: "OptimizeDataset/block_length:output:0"
      device: "/device:CPU:0"
      attr {
        key: "Targuments"
        value {
          list {
          }
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_Dataset_interleave_<class \'abc.ABCMeta\'>_59"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_STRING
          }
        }
      }
    }
    node_def {
      name: "OptimizeDataset/num_parallel_calls"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 10
          }
        }
      }
    }
    node_def {
      name: "OptimizeDataset/ParallelMapDataset"
      op: "ParallelMapDataset"
      input: "OptimizeDataset/InterleaveDataset:handle:0"
      input: "OptimizeDataset/num_parallel_calls:output:0"
      device: "/device:CPU:0"
      attr {
        key: "Targuments"
        value {
          list {
          }
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_Dataset_map_<class \'functools.partial\'>_78"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: 2
              }
            }
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_INT64
            type: DT_FLOAT
            type: DT_INT64
            type: DT_INT64
          }
        }
      }
      attr {
        key: "preserve_cardinality"
        value {
          b: false
        }
      }
      attr {
        key: "sloppy"
        value {
          b: false
        }
      }
      attr {
        key: "use_inter_op_parallelism"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "OptimizeDataset/buffer_size"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 10000
          }
        }
      }
    }
    node_def {
      name: "OptimizeDataset/PrefetchDataset"
      op: "PrefetchDataset"
      input: "OptimizeDataset/ParallelMapDataset:handle:0"
      input: "OptimizeDataset/buffer_size:output:0"
      device: "/device:CPU:0"
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: 2
              }
            }
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_INT64
            type: DT_FLOAT
            type: DT_INT64
            type: DT_INT64
          }
        }
      }
      attr {
        key: "slack_period"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "OptimizeDataset/batch_size"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 8
          }
        }
      }
    }
    node_def {
      name: "OptimizeDataset/Const"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
              dim {
                size: 1
              }
            }
            int64_val: 1
          }
        }
      }
    }
    node_def {
      name: "OptimizeDataset/Const_1"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
              dim {
                size: 1
              }
            }
            int64_val: -1
          }
        }
      }
    }
    node_def {
      name: "OptimizeDataset/Const_2"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
              dim {
                size: 1
              }
            }
            int64_val: 2
          }
        }
      }
    }
    node_def {
      name: "OptimizeDataset/Const_3"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
              dim {
                size: 1
              }
            }
            int64_val: 1
          }
        }
      }
    }
    node_def {
      name: "OptimizeDataset/padding_value"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 0
          }
        }
      }
    }
    node_def {
      name: "OptimizeDataset/padding_value_1"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "OptimizeDataset/padding_value_2"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 0
          }
        }
      }
    }
    node_def {
      name: "OptimizeDataset/padding_value_3"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 0
          }
        }
      }
    }
    node_def {
      name: "OptimizeDataset/drop_remainder"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_BOOL
            tensor_shape {
            }
            bool_val: true
          }
        }
      }
    }
    node_def {
      name: "OptimizeDataset/PaddedBatchDatasetV2"
      op: "PaddedBatchDatasetV2"
      input: "OptimizeDataset/PrefetchDataset:handle:0"
      input: "OptimizeDataset/batch_size:output:0"
      input: "OptimizeDataset/Const:output:0"
      input: "OptimizeDataset/Const_1:output:0"
      input: "OptimizeDataset/Const_2:output:0"
      input: "OptimizeDataset/Const_3:output:0"
      input: "OptimizeDataset/padding_value:output:0"
      input: "OptimizeDataset/padding_value_1:output:0"
      input: "OptimizeDataset/padding_value_2:output:0"
      input: "OptimizeDataset/padding_value_3:output:0"
      input: "OptimizeDataset/drop_remainder:output:0"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT64
            type: DT_FLOAT
            type: DT_INT64
            type: DT_INT64
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: 8
              }
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: 8
              }
              dim {
                size: 2
              }
            }
            shape {
              dim {
                size: 8
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "parallel_copy"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "OptimizeDataset"
      op: "OptimizeDataset"
      input: "OptimizeDataset/PaddedBatchDatasetV2:handle:0"
      input: "optimizations:output:0"
      device: "/device:CPU:0"
      attr {
        key: "optimization_configs"
        value {
          list {
            s: "map_vectorization:use_choose_fastest:false"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: 8
              }
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: 8
              }
              dim {
                size: 2
              }
            }
            shape {
              dim {
                size: 8
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_INT64
            type: DT_FLOAT
            type: DT_INT64
            type: DT_INT64
          }
        }
      }
    }
    node_def {
      name: "ModelDataset"
      op: "ModelDataset"
      input: "OptimizeDataset:handle:0"
      device: "/device:CPU:0"
      attr {
        key: "cpu_budget"
        value {
          i: 0
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: 8
              }
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: 8
              }
              dim {
                size: 2
              }
            }
            shape {
              dim {
                size: 8
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_INT64
            type: DT_FLOAT
            type: DT_INT64
            type: DT_INT64
          }
        }
      }
    }
    ret {
      key: "modeldataset"
      value: "ModelDataset:handle:0"
    }
    attr {
      key: "_disable_call_shape_inference"
      value {
        b: true
      }
    }
  }
  function {
    signature {
      name: "__inference_Dataset_interleave_<class \'abc.ABCMeta\'>_59"
      input_arg {
        name: "args_0"
        type: DT_STRING
      }
      output_arg {
        name: "identity"
        type: DT_VARIANT
      }
      is_stateful: true
      control_output: "TensorSliceDataset"
    }
    node_def {
      name: "flat_filenames/shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
    }
    node_def {
      name: "flat_filenames"
      op: "Reshape"
      input: "args_0"
      input: "flat_filenames/shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node_def {
      name: "TensorSliceDataset"
      op: "TensorSliceDataset"
      input: "flat_filenames:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_STRING
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "FlatMapDataset"
      op: "FlatMapDataset"
      input: "TensorSliceDataset:handle:0"
      attr {
        key: "Targuments"
        value {
          list {
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_Dataset_flat_map_read_one_file_56"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_STRING
          }
        }
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "FlatMapDataset:handle:0"
      input: "^TensorSliceDataset"
      attr {
        key: "T"
        value {
          type: DT_VARIANT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
    control_ret {
      key: "TensorSliceDataset"
      value: "TensorSliceDataset"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "args_0"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_Dataset_flat_map_read_one_file_56"
      input_arg {
        name: "args_0"
        type: DT_STRING
      }
      output_arg {
        name: "identity"
        type: DT_VARIANT
      }
      is_stateful: true
      control_output: "TFRecordDataset"
    }
    node_def {
      name: "compression_type"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: ""
          }
        }
      }
    }
    node_def {
      name: "buffer_size"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 262144
          }
        }
      }
    }
    node_def {
      name: "TFRecordDataset"
      op: "TFRecordDataset"
      input: "args_0"
      input: "compression_type:output:0"
      input: "buffer_size:output:0"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "TFRecordDataset:handle:0"
      input: "^TFRecordDataset"
      attr {
        key: "T"
        value {
          type: DT_VARIANT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
    control_ret {
      key: "TFRecordDataset"
      value: "TFRecordDataset"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "args_0"
          }
        }
      }
    }
  }
}
versions {
  producer: 38
  min_consumer: 12
}
